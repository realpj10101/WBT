{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/scrolling/virtual-scroll-strategy.ts", "../../../../../../../src/cdk/scrolling/fixed-size-virtual-scroll.ts", "../../../../../../../src/cdk/scrolling/scroll-dispatcher.ts", "../../../../../../../src/cdk/scrolling/scrollable.ts", "../../../../../../../src/cdk/scrolling/viewport-ruler.ts", "../../../../../../../src/cdk/scrolling/virtual-scrollable.ts", "../../../../../../../src/cdk/scrolling/virtual-scroll-viewport.ts", "../../../../../../../src/cdk/scrolling/virtual-scroll-viewport.html", "../../../../../../../src/cdk/scrolling/virtual-for-of.ts", "../../../../../../../src/cdk/scrolling/virtual-scrollable-element.ts", "../../../../../../../src/cdk/scrolling/virtual-scrollable-window.ts", "../../../../../../../src/cdk/scrolling/scrolling-module.ts", "../../../../../../../src/cdk/scrolling/scrolling_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport type {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY = new InjectionToken<VirtualScrollStrategy>(\n  'VIRTUAL_SCROLL_STRATEGY',\n);\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled(): void;\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged(): void;\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered(): void;\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged(): void;\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private readonly _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() {\n    /* no-op */\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n    let scrollOffset = this._viewport.measureScrollOffset();\n    // Prevent NaN as result when dividing by zero.\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n\n    // If user scrolls to the bottom of the list and data changes to a smaller list\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(\n        0,\n        Math.min(firstVisibleIndex, dataLength - maxVisibleItems),\n      );\n\n      // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(\n        dataLength,\n        Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize),\n      );\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(\n            0,\n            Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize),\n          );\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  standalone: true,\n  providers: [\n    {\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n    },\n  ],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number {\n    return this._itemSize;\n  }\n  set itemSize(value: NumberInput) {\n    this._itemSize = coerceNumberProperty(value);\n  }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number {\n    return this._minBufferPx;\n  }\n  set minBufferPx(value: NumberInput) {\n    this._minBufferPx = coerceNumberProperty(value);\n  }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number {\n    return this._maxBufferPx;\n  }\n  set maxBufferPx(value: NumberInput) {\n    this._maxBufferPx = coerceNumberProperty(value);\n  }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy = new FixedSizeVirtualScrollStrategy(\n    this.itemSize,\n    this.minBufferPx,\n    this.maxBufferPx,\n  );\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport type {CdkScrollable} from './scrollable';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  /** Used to reference correct document/window */\n  protected _document: Document;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    @Optional() @Inject(DOCUMENT) document: any,\n  ) {\n    this._document = document;\n  }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private readonly _scrolled = new Subject<CdkScrollable | void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(\n        scrollable,\n        scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)),\n      );\n    }\n  }\n\n  /**\n   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable | void>) => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription =\n        auditTimeInMs > 0\n          ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n          : this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementOrElementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(\n    elementOrElementRef: ElementRef | HTMLElement,\n    auditTimeInMs?: number,\n  ): Observable<CdkScrollable | void> {\n    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(\n      filter(target => {\n        return !target || ancestors.indexOf(target) > -1;\n      }),\n    );\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(\n    scrollable: CdkScrollable,\n    elementOrElementRef: ElementRef | HTMLElement,\n  ): boolean {\n    let element: HTMLElement | null = coerceElement(elementOrElementRef);\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while ((element = element!.parentElement));\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  getRtlScrollAxisType,\n  RtlScrollAxisType,\n  supportsScrollBehavior,\n} from '@angular/cdk/platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subject, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]',\n  standalone: true,\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  protected readonly _destroyed = new Subject<void>();\n\n  protected _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\n    this.ngZone.runOutsideAngular(() =>\n      fromEvent(this.elementRef.nativeElement, 'scroll')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(observer),\n    ),\n  );\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected scrollDispatcher: ScrollDispatcher,\n    protected ngZone: NgZone,\n    @Optional() protected dir?: Directionality,\n  ) {}\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n        el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n          el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n          el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number} | null;\n\n  /** Stream of viewport change events. */\n  private readonly _change = new Subject<Event>();\n\n  /** Event listener that will be used to handle the viewport change events. */\n  private _changeListener = (event: Event) => {\n    this._change.next(event);\n  };\n\n  /** Used to reference correct document/window */\n  protected _document: Document;\n\n  constructor(\n    private _platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(DOCUMENT) document: any,\n  ) {\n    this._document = document;\n\n    ngZone.runOutsideAngular(() => {\n      if (_platform.isBrowser) {\n        const window = this._getWindow();\n\n        // Note that bind the events ourselves, rather than going through something like RxJS's\n        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n        window.addEventListener('resize', this._changeListener);\n        window.addEventListener('orientationchange', this._changeListener);\n      }\n\n      // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n      this.change().subscribe(() => (this._viewportSize = null));\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._platform.isBrowser) {\n      const window = this._getWindow();\n      window.removeEventListener('resize', this._changeListener);\n      window.removeEventListener('orientationchange', this._changeListener);\n    }\n\n    this._change.complete();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number; height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize!.width, height: this._viewportSize!.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect() {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._document;\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top =\n      -documentRect.top ||\n      document.body.scrollTop ||\n      window.scrollY ||\n      documentElement.scrollTop ||\n      0;\n\n    const left =\n      -documentRect.left ||\n      document.body.scrollLeft ||\n      window.scrollX ||\n      documentElement.scrollLeft ||\n      0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * This stream emits outside of the Angular zone.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser\n      ? {width: window.innerWidth, height: window.innerHeight}\n      : {width: 0, height: 0};\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, ElementRef, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable} from './scrollable';\n\nexport const VIRTUAL_SCROLLABLE = new InjectionToken<CdkVirtualScrollable>('VIRTUAL_SCROLLABLE');\n\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\n@Directive()\nexport abstract class CdkVirtualScrollable extends CdkScrollable {\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    scrollDispatcher: ScrollDispatcher,\n    ngZone: NgZone,\n    @Optional() dir?: Directionality,\n  ) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n  }\n\n  /**\n   * Measure the viewport size for the provided orientation.\n   *\n   * @param orientation The orientation to measure the size from.\n   */\n  measureViewportSize(orientation: 'horizontal' | 'vertical') {\n    const viewportEl = this.elementRef.nativeElement;\n    return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /**\n   * Measure the bounding ClientRect size including the scroll offset.\n   *\n   * @param from The edge to measure from.\n   */\n  abstract measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ListRange} from '@angular/cdk/collections';\nimport {\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  inject,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  animationFrameScheduler,\n  asapScheduler,\n  Observable,\n  Subject,\n  Observer,\n  Subscription,\n} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {ViewportRuler} from './viewport-ruler';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER =\n  typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  providers: [\n    {\n      provide: CdkScrollable,\n      useFactory: (\n        virtualScrollable: CdkVirtualScrollable | null,\n        viewport: CdkVirtualScrollViewport,\n      ) => virtualScrollable || viewport,\n      deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n    },\n  ],\n})\nexport class CdkVirtualScrollViewport extends CdkVirtualScrollable implements OnInit, OnDestroy {\n  private _platform = inject(Platform);\n\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private readonly _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private readonly _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input()\n  get orientation() {\n    return this._orientation;\n  }\n\n  set orientation(orientation: 'horizontal' | 'vertical') {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n      this._calculateSpacerSize();\n    }\n  }\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n   * will be removed.\n   */\n  @Input({transform: booleanAttribute}) appendOnly: boolean = false;\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output()\n  readonly scrolledIndexChange: Observable<number> = new Observable((observer: Observer<number>) =>\n    this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n      Promise.resolve().then(() => this.ngZone.run(() => observer.next(index))),\n    ),\n  );\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  readonly renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject;\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /** A string representing the `style.width` property value to be used for the spacer element. */\n  _totalContentWidth = '';\n\n  /** A string representing the `style.height` property value to be used for the spacer element. */\n  _totalContentHeight = '';\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualScrollRepeater. */\n  private _forOf: CdkVirtualScrollRepeater<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  /** Subscription to changes in the viewport size. */\n  private _viewportChanges = Subscription.EMPTY;\n\n  constructor(\n    public override elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    ngZone: NgZone,\n    @Optional()\n    @Inject(VIRTUAL_SCROLL_STRATEGY)\n    private _scrollStrategy: VirtualScrollStrategy,\n    @Optional() dir: Directionality,\n    scrollDispatcher: ScrollDispatcher,\n    viewportRuler: ViewportRuler,\n    @Optional() @Inject(VIRTUAL_SCROLLABLE) public scrollable: CdkVirtualScrollable,\n  ) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n\n    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    this._viewportChanges = viewportRuler.change().subscribe(() => {\n      this.checkViewportSize();\n    });\n\n    if (!this.scrollable) {\n      // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n      this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n      this.scrollable = this;\n    }\n  }\n\n  override ngOnInit() {\n    // Scrolling depends on the element dimensions which we can't get during SSR.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (this.scrollable === this) {\n      super.ngOnInit();\n    }\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() =>\n      Promise.resolve().then(() => {\n        this._measureViewportSize();\n        this._scrollStrategy.attach(this);\n\n        this.scrollable\n          .elementScrolled()\n          .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null),\n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER),\n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed),\n          )\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n        this._markChangeDetectionNeeded();\n      }),\n    );\n  }\n\n  override ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._viewportChanges.unsubscribe();\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n  attach(forOf: CdkVirtualScrollRepeater<any>) {\n    if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  measureBoundingClientRectWithScrollOffset(from: 'left' | 'top' | 'right' | 'bottom'): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      this._calculateSpacerSize();\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      if (this.appendOnly) {\n        range = {start: 0, end: Math.max(this._renderedRange.end, range.end)};\n      }\n      this._renderedRangeSubject.next((this._renderedRange = range));\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // In appendOnly, we always start from the top\n    offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollable.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the scrollable (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  override measureScrollOffset(\n    from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end',\n  ): number {\n    // This is to break the call cycle\n    let measureScrollOffset: InstanceType<typeof CdkVirtualScrollable>['measureScrollOffset'];\n    if (this.scrollable == this) {\n      measureScrollOffset = (_from: NonNullable<typeof from>) => super.measureScrollOffset(_from);\n    } else {\n      measureScrollOffset = (_from: NonNullable<typeof from>) =>\n        this.scrollable.measureScrollOffset(_from);\n    }\n\n    return Math.max(\n      0,\n      measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n        this.measureViewportOffset(),\n    );\n  }\n\n  /**\n   * Measures the offset of the viewport from the scrolling container\n   * @param from The edge to measure from.\n   */\n  measureViewportOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end') {\n    let fromRect: 'left' | 'top' | 'right' | 'bottom';\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const isRtl = this.dir?.value == 'rtl';\n    if (from == 'start') {\n      fromRect = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      fromRect = isRtl ? LEFT : RIGHT;\n    } else if (from) {\n      fromRect = from;\n    } else {\n      fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n    }\n\n    const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n    const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n\n    return viewportClientRect - scrollerClientRect;\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() =>\n        Promise.resolve().then(() => {\n          this._doChangeDetection();\n        }),\n      );\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n  private _calculateSpacerSize() {\n    this._totalContentHeight =\n      this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n    this._totalContentWidth =\n      this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n  }\n}\n", "<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class=\"cdk-virtual-scroll-spacer\"\n     [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ArrayDataSource,\n  CollectionViewer,\n  DataSource,\n  ListRange,\n  isDataSource,\n  _RecycleViewRepeaterStrategy,\n  _VIEW_REPEATER_STRATEGY,\n  _ViewRepeaterItemInsertArgs,\n} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Inject,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {NumberInput, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Observable, Subject, of as observableOf, isObservable} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation: 'horizontal' | 'vertical', direction: 'start' | 'end', node: Node) {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n  standalone: true,\n})\nexport class CdkVirtualForOf<T>\n  implements CdkVirtualScrollRepeater<T>, CollectionViewer, DoCheck, OnDestroy\n{\n  /** Emits when the rendered view of the data changes. */\n  readonly viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private readonly _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined) {\n    this._cdkVirtualForOf = value;\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // If value is an an NgIterable, convert it to an array.\n      this._dataSourceChanges.next(\n        new ArrayDataSource<T>(isObservable(value) ? value : Array.from(value || [])),\n      );\n    }\n  }\n\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn\n      ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n      : undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input()\n  get cdkVirtualForTemplateCacheSize(): number {\n    return this._viewRepeater.viewCacheSize;\n  }\n  set cdkVirtualForTemplateCacheSize(size: NumberInput) {\n    this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n  }\n\n  /** Emits whenever the data in the current DataSource changes. */\n  readonly dataStream: Observable<readonly T[]> = this._dataSourceChanges.pipe(\n    // Start off with null `DataSource`.\n    startWith(null),\n    // Bundle up the previous and current data sources so we can work with both.\n    pairwise(),\n    // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n    // Replay the last emitted data when someone subscribes.\n    shareReplay(1),\n  );\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: readonly T[];\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    /** The view container to add items to. */\n    private _viewContainerRef: ViewContainerRef,\n    /** The template to use when stamping out new items. */\n    private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n    /** The set of available differs. */\n    private _differs: IterableDiffers,\n    /** The strategy used to render items in the virtual scroll viewport. */\n    @Inject(_VIEW_REPEATER_STRATEGY)\n    private _viewRepeater: _RecycleViewRepeaterStrategy<T, T, CdkVirtualForOfContext<T>>,\n    /** The virtual scrolling viewport that these items are being rendered in. */\n    @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n    ngZone: NgZone,\n  ) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      if (this.viewChange.observers.length) {\n        ngZone.run(() => this.viewChange.next(this._renderedRange));\n      }\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (\n      (range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all the views, find the first and land node and compute the size by subtracting\n    // the top of the first node from the bottom of the last one.\n    let firstNode: HTMLElement | undefined;\n    let lastNode: HTMLElement | undefined;\n\n    // Find the first node by starting from the beginning and going forwards.\n    for (let i = 0; i < rangeLen; i++) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        firstNode = lastNode = view.rootNodes[0];\n        break;\n      }\n    }\n\n    // Find the last node by starting from the end and going backwards.\n    for (let i = rangeLen - 1; i > -1; i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        lastNode = view.rootNodes[view.rootNodes.length - 1];\n        break;\n      }\n    }\n\n    return firstNode && lastNode\n      ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n      : 0;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next(undefined!);\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._viewRepeater.detach();\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      // Use a wrapper function for the `trackBy` so any new values are\n      // picked up automatically without having to recreate the differ.\n      this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n      });\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(\n    oldDs: DataSource<T> | null,\n    newDs: DataSource<T> | null,\n  ): Observable<readonly T[]> {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : observableOf();\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    this._viewRepeater.applyChanges(\n      changes,\n      this._viewContainerRef,\n      (\n        record: IterableChangeRecord<T>,\n        _adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => this._getEmbeddedViewArgs(record, currentIndex!),\n      record => record.item,\n    );\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      >;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  private _getEmbeddedViewArgs(\n    record: IterableChangeRecord<T>,\n    index: number,\n  ): _ViewRepeaterItemInsertArgs<CdkVirtualForOfContext<T>> {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return {\n      templateRef: this._template,\n      context: {\n        $implicit: record.item,\n        // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n        // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n        cdkVirtualForOf: this._cdkVirtualForOf!,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false,\n      },\n      index,\n    };\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, ElementRef, NgZone, Optional} from '@angular/core';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\n@Directive({\n  selector: '[cdkVirtualScrollingElement]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement}],\n  standalone: true,\n  host: {\n    'class': 'cdk-virtual-scrollable',\n  },\n})\nexport class CdkVirtualScrollableElement extends CdkVirtualScrollable {\n  constructor(\n    elementRef: ElementRef,\n    scrollDispatcher: ScrollDispatcher,\n    ngZone: NgZone,\n    @Optional() dir: Directionality,\n  ) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return (\n      this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n      this.measureScrollOffset(from)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, ElementRef, NgZone, Optional} from '@angular/core';\nimport {fromEvent, Observable, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow}],\n  standalone: true,\n})\nexport class CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n  protected override _elementScrolled: Observable<Event> = new Observable(\n    (observer: Observer<Event>) =>\n      this.ngZone.runOutsideAngular(() =>\n        fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer),\n      ),\n  );\n\n  constructor(scrollDispatcher: ScrollDispatcher, ngZone: NgZone, @Optional() dir: Directionality) {\n    super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\nimport {CdkVirtualScrollableElement} from './virtual-scrollable-element';\nimport {CdkVirtualScrollableWindow} from './virtual-scrollable-window';\n\n@NgModule({\n  exports: [CdkScrollable],\n  imports: [CdkScrollable],\n})\nexport class CdkScrollableModule {}\n\n/**\n * @docs-primary-export\n */\n@NgModule({\n  imports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkVirtualScrollViewport,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n})\nexport class ScrollingModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "VIRTUAL_SCROLL_STRATEGY", "InjectionToken", "FixedSizeVirtualScrollStrategy", "constructor", "itemSize", "minBufferPx", "maxBufferPx", "_scrolledIndexChange", "Subject", "scrolledIndexChange", "pipe", "distinctUntilChanged", "_viewport", "_itemSize", "_minBufferPx", "_maxBufferPx", "attach", "viewport", "_updateTotalContentSize", "_updateRenderedRange", "detach", "complete", "updateItemAndBufferSize", "ngDevMode", "Error", "onContentScrolled", "onDataLengthChanged", "onContentRendered", "onRenderedOffsetChanged", "scrollToIndex", "index", "behavior", "scrollToOffset", "setTotalContentSize", "getDataLength", "renderedRange", "getRenderedRange", "newRange", "start", "end", "viewportSize", "getViewportSize", "dataLength", "scrollOffset", "measureScrollOffset", "firstVisibleIndex", "maxVisibleItems", "Math", "ceil", "newVisibleIndex", "max", "min", "floor", "startBuffer", "expandStart", "endBuffer", "expandEnd", "setRenderedRange", "setRenderedContentOffset", "next", "_fixedSizeVirtualScrollStrategyFactory", "fixedSizeDir", "_scrollStrategy", "CdkFixedSizeVirtualScroll", "value", "coerceNumberProperty", "ngOnChanges", "ɵdir", "selectors", "inputs", "standalone", "features", "provide", "useFactory", "deps", "forwardRef", "Directive", "args", "selector", "providers", "Input", "DEFAULT_SCROLL_TIME", "ScrollDispatcher", "_ngZone", "_platform", "document", "_scrolled", "_globalSubscription", "_scrolledCount", "scrollContainers", "Map", "_document", "register", "scrollable", "has", "set", "elementScrolled", "subscribe", "deregister", "scrollableReference", "get", "unsubscribe", "delete", "scrolled", "auditTimeInMs", "isBrowser", "of", "Observable", "observer", "_addGlobalListener", "subscription", "auditTime", "_removeGlobalListener", "ngOnDestroy", "forEach", "_", "container", "ancestorScrolled", "elementOrElementRef", "ancestors", "getAncestorScrollContainers", "filter", "target", "indexOf", "scrollingContainers", "_subscription", "_scrollableContainsElement", "push", "_getWindow", "defaultView", "window", "element", "coerceElement", "scrollableElement", "getElementRef", "nativeElement", "parentElement", "runOutsideAngular", "fromEvent", "ɵfac", "ScrollDispatcher_Factory", "t", "NgZone", "Platform", "DOCUMENT", "ɵprov", "factory", "providedIn", "Injectable", "Optional", "Inject", "CdkScrollable", "elementRef", "scrollDispatcher", "ngZone", "dir", "_destroyed", "_elementScrolled", "takeUntil", "ngOnInit", "scrollTo", "options", "el", "isRtl", "left", "right", "bottom", "top", "scrollHeight", "clientHeight", "getRtlScrollAxisType", "scrollWidth", "clientWidth", "_applyScrollToOptions", "supportsScrollBehavior", "scrollTop", "scrollLeft", "from", "LEFT", "RIGHT", "ElementRef", "Directionality", "DEFAULT_RESIZE_TIME", "ViewportRuler", "_change", "_changeListener", "event", "addEventListener", "change", "_viewportSize", "removeEventListener", "_updateViewportSize", "output", "width", "height", "getViewportRect", "scrollPosition", "getViewportScrollPosition", "documentElement", "documentRect", "getBoundingClientRect", "body", "scrollY", "scrollX", "throttleTime", "innerWidth", "innerHeight", "ViewportRuler_Factory", "VIRTUAL_SCROLLABLE", "CdkVirtualScrollable", "measureViewportSize", "orientation", "viewportEl", "rangesEqual", "r1", "r2", "SCROLL_SCHEDULER", "requestAnimationFrame", "animationFrameScheduler", "asapScheduler", "CdkVirtualScrollViewport", "_orientation", "_calculateSpacerSize", "_changeDetectorRef", "viewportRuler", "inject", "_detachedSubject", "_renderedRangeSubject", "appendOnly", "Promise", "resolve", "then", "run", "renderedRangeStream", "_totalContentSize", "_totalContentWidth", "_totalContentHeight", "_renderedRange", "_dataLength", "_renderedContentOffset", "_renderedContentOffsetNeedsRewrite", "_isChangeDetectionPending", "_runAfterChangeDetection", "_viewportChanges", "Subscription", "EMPTY", "checkViewportSize", "classList", "add", "_measureViewportSize", "startWith", "_markChangeDetectionNeeded", "forOf", "_forOf", "dataStream", "data", "newLength", "length", "_doChangeDetection", "measureBoundingClientRectWithScrollOffset", "size", "range", "getOffsetToRenderedContentStart", "offset", "to", "isHorizontal", "axis", "axisDirection", "transform", "Number", "_renderedContentTransform", "measureRenderedContentSize", "_from", "measureViewportOffset", "fromRect", "scrollerClientRect", "viewportClientRect", "contentEl", "_contentWrapper", "offsetWidth", "offsetHeight", "measureRangeSize", "runAfter", "style", "markForCheck", "runAfterChangeDetection", "fn", "ChangeDetectorRef", "viewQuery", "CdkVirtualScrollViewport_Query", "rf", "ctx", "booleanAttribute", "outputs", "virtualScrollable", "styles", "encapsulation", "changeDetection", "Component", "host", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "template", "Output", "ViewChild", "static", "getOffset", "direction", "node", "rect", "CdkVirtualForOf", "cdkVirtualForOf", "_cdkVirtualForOf", "isDataSource", "_dataSourceChanges", "ArrayDataSource", "isObservable", "Array", "cdkVirtualForTrackBy", "_cdkVirtualForTrackBy", "_needsUpdate", "item", "undefined", "cdkVirtualForTemplate", "_template", "cdkVirtualForTemplateCacheSize", "_viewRepeater", "viewCacheSize", "_viewContainerRef", "_differs", "viewChange", "pairwise", "switchMap", "prev", "cur", "_changeDataSource", "shareReplay", "_differ", "_data", "_onRenderedDataChange", "observers", "renderedStartIndex", "rangeLen", "firstNode", "lastNode", "i", "view", "rootNodes", "ngDoCheck", "changes", "diff", "_renderedItems", "_updateContext", "_applyChanges", "slice", "find", "create", "oldDs", "newDs", "disconnect", "connect", "count", "context", "_updateComputedContextProperties", "detectChanges", "applyChanges", "record", "_adjustedPreviousIndex", "currentIndex", "_getEmbeddedViewArgs", "forEachIdentityChange", "$implicit", "first", "last", "even", "odd", "templateRef", "CdkVirtualForOf_Factory", "ViewContainerRef", "TemplateRef", "IterableDiffers", "_VIEW_REPEATER_STRATEGY", "useClass", "_RecycleViewRepeaterStrategy", "SkipSelf", "CdkVirtualScrollableElement", "hostAttrs", "useExisting", "CdkVirtualScrollableWindow", "CdkScrollableModule", "imports", "exports", "NgModule", "ScrollingModule", "ɵmod", "BidiModule", "ɵinj"]
}
