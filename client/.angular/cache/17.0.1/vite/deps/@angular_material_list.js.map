{
  "version": 3,
  "sources": ["../../../../../../../src/material/list/list-option-types.ts", "../../../../../../../src/material/list/list-item-sections.ts", "../../../../../../../src/material/list/tokens.ts", "../../../../../../../src/material/list/list-base.ts", "../../../../../../../src/material/list/action-list.ts", "../../../../../../../src/material/list/list.ts", "../../../../../../../src/material/list/list-item.html", "../../../../../../../src/material/list/list-option.ts", "../../../../../../../src/material/list/list-option.html", "../../../../../../../src/material/list/subheader.ts", "../../../../../../../src/material/list/nav-list.ts", "../../../../../../../src/material/list/selection-list.ts", "../../../../../../../src/material/list/list-module.ts", "../../../../../../../src/material/list/list_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Type describing possible positions of a checkbox or radio in a list option\n * with respect to the list item's text.\n */\nexport type MatListOptionTogglePosition = 'before' | 'after';\n\n/**\n * Interface describing a list option. This is used to avoid circular\n * dependencies between the list-option and the styler directives.\n * @docs-private\n */\nexport interface ListOption {\n  _getTogglePosition(): MatListOptionTogglePosition;\n}\n\n/**\n * Injection token that can be used to reference instances of an `ListOption`. It serves\n * as alternative token to an actual implementation which could result in undesired\n * retention of the class or circular references breaking runtime execution.\n * @docs-private\n */\nexport const LIST_OPTION = new InjectionToken<ListOption>('ListOption');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional} from '@angular/core';\nimport {LIST_OPTION, ListOption} from './list-option-types';\n\n/**\n * Directive capturing the title of a list item. A list item usually consists of a\n * title and optional secondary or tertiary lines.\n *\n * Text content for the title never wraps. There can only be a single title per list item.\n */\n@Directive({\n  selector: '[matListItemTitle]',\n  host: {'class': 'mat-mdc-list-item-title mdc-list-item__primary-text'},\n})\nexport class MatListItemTitle {\n  constructor(public _elementRef: ElementRef<HTMLElement>) {}\n}\n\n/**\n * Directive capturing a line in a list item. A list item usually consists of a\n * title and optional secondary or tertiary lines.\n *\n * Text content inside a line never wraps. There can be at maximum two lines per list item.\n */\n@Directive({\n  selector: '[matListItemLine]',\n  host: {'class': 'mat-mdc-list-item-line mdc-list-item__secondary-text'},\n})\nexport class MatListItemLine {\n  constructor(public _elementRef: ElementRef<HTMLElement>) {}\n}\n\n/**\n * Directive matching an optional meta section for list items.\n *\n * List items can reserve space at the end of an item to display a control,\n * button or additional text content.\n */\n@Directive({\n  selector: '[matListItemMeta]',\n  host: {'class': 'mat-mdc-list-item-meta mdc-list-item__end'},\n})\nexport class MatListItemMeta {}\n\n/**\n * @docs-private\n *\n * MDC uses the very intuitively named classes `.mdc-list-item__start` and `.mat-list-item__end` to\n * position content such as icons or checkboxes/radios that comes either before or after the text\n * content respectively. This directive detects the placement of the checkbox/radio and applies the\n * correct MDC class to position the icon/avatar on the opposite side.\n */\n@Directive({\n  host: {\n    // MDC uses intuitively named classes `.mdc-list-item__start` and `.mat-list-item__end` to\n    // position content such as icons or checkboxes/radios that comes either before or after the\n    // text content respectively. This directive detects the placement of the checkbox/radio and\n    // applies the correct MDC class to position the icon/avatar on the opposite side.\n    '[class.mdc-list-item__start]': '_isAlignedAtStart()',\n    '[class.mdc-list-item__end]': '!_isAlignedAtStart()',\n  },\n})\nexport class _MatListItemGraphicBase {\n  constructor(@Optional() @Inject(LIST_OPTION) public _listOption: ListOption) {}\n\n  _isAlignedAtStart() {\n    // By default, in all list items the graphic is aligned at start. In list options,\n    // the graphic is only aligned at start if the checkbox/radio is at the end.\n    return !this._listOption || this._listOption?._getTogglePosition() === 'after';\n  }\n}\n\n/**\n * Directive matching an optional avatar within a list item.\n *\n * List items can reserve space at the beginning of an item to display an avatar.\n */\n@Directive({\n  selector: '[matListItemAvatar]',\n  host: {'class': 'mat-mdc-list-item-avatar'},\n})\nexport class MatListItemAvatar extends _MatListItemGraphicBase {}\n\n/**\n * Directive matching an optional icon within a list item.\n *\n * List items can reserve space at the beginning of an item to display an icon.\n */\n@Directive({\n  selector: '[matListItemIcon]',\n  host: {'class': 'mat-mdc-list-item-icon'},\n})\nexport class MatListItemIcon extends _MatListItemGraphicBase {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Object that can be used to configure the default options for the list module. */\nexport interface MatListConfig {\n  /** Wheter icon indicators should be hidden for single-selection. */\n  hideSingleSelectionIndicator?: boolean;\n}\n\n/** Injection token that can be used to provide the default options the list module. */\nexport const MAT_LIST_CONFIG = new InjectionToken<MatListConfig>('MAT_LIST_CONFIG');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  inject,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n} from '@angular/core';\nimport {\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription, merge} from 'rxjs';\nimport {\n  MatListItemLine,\n  MatListItemTitle,\n  MatListItemIcon,\n  MatListItemAvatar,\n} from './list-item-sections';\nimport {MAT_LIST_CONFIG} from './tokens';\n\n@Directive({\n  host: {\n    '[attr.aria-disabled]': 'disabled',\n  },\n})\n/** @docs-private */\nexport abstract class MatListBase {\n  _isNonInteractive: boolean = true;\n\n  /** Whether ripples for all list items is disabled. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n  private _disableRipple: boolean = false;\n\n  /**\n   * Whether the entire list is disabled. When disabled, the list itself and each of its list items\n   * are disabled.\n   */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  protected _defaultOptions = inject(MAT_LIST_CONFIG, {optional: true});\n}\n\n@Directive({\n  host: {\n    '[class.mdc-list-item--disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.disabled]': '(_isButtonElement && disabled) || null',\n  },\n})\n/** @docs-private */\nexport abstract class MatListItemBase implements AfterViewInit, OnDestroy, RippleTarget {\n  /** Query list matching list-item line elements. */\n  abstract _lines: QueryList<MatListItemLine> | undefined;\n\n  /** Query list matching list-item title elements. */\n  abstract _titles: QueryList<MatListItemTitle> | undefined;\n\n  /**\n   * Element reference to the unscoped content in a list item.\n   *\n   * Unscoped content is user-projected text content in a list item that is\n   * not part of an explicit line or title.\n   */\n  abstract _unscopedContent: ElementRef<HTMLSpanElement> | undefined;\n\n  /** Host element for the list item. */\n  _hostElement: HTMLElement;\n\n  /** indicate whether the host element is a button or not */\n  _isButtonElement: boolean;\n\n  /** Whether animations are disabled. */\n  _noopAnimations: boolean;\n\n  @ContentChildren(MatListItemAvatar, {descendants: false}) _avatars: QueryList<never>;\n  @ContentChildren(MatListItemIcon, {descendants: false}) _icons: QueryList<never>;\n\n  /**\n   * The number of lines this list item should reserve space for. If not specified,\n   * lines are inferred based on the projected content.\n   *\n   * Explicitly specifying the number of lines is useful if you want to acquire additional\n   * space and enable the wrapping of text. The unscoped text content of a list item will\n   * always be able to take up the remaining space of the item, unless it represents the title.\n   *\n   * A maximum of three lines is supported as per the Material Design specification.\n   */\n  @Input()\n  set lines(lines: number | string | null) {\n    this._explicitLines = coerceNumberProperty(lines, null);\n    this._updateItemLines(false);\n  }\n  _explicitLines: number | null = null;\n\n  /** Whether ripples for list items are disabled. */\n  @Input()\n  get disableRipple(): boolean {\n    return (\n      this.disabled ||\n      this._disableRipple ||\n      this._noopAnimations ||\n      !!this._listBase?.disableRipple\n    );\n  }\n  set disableRipple(value: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n  private _disableRipple: boolean = false;\n\n  /** Whether the list-item is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || !!this._listBase?.disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  private _subscriptions = new Subscription();\n  private _rippleRenderer: RippleRenderer | null = null;\n\n  /** Whether the list item has unscoped text content. */\n  _hasUnscopedTextContent: boolean = false;\n\n  /**\n   * Implemented as part of `RippleTarget`.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Implemented as part of `RippleTarget`.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n    public _elementRef: ElementRef<HTMLElement>,\n    protected _ngZone: NgZone,\n    @Optional() private _listBase: MatListBase | null,\n    private _platform: Platform,\n    @Optional()\n    @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    globalRippleOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    this.rippleConfig = globalRippleOptions || {};\n    this._hostElement = this._elementRef.nativeElement;\n    this._isButtonElement = this._hostElement.nodeName.toLowerCase() === 'button';\n    this._noopAnimations = animationMode === 'NoopAnimations';\n\n    if (_listBase && !_listBase._isNonInteractive) {\n      this._initInteractiveListItem();\n    }\n\n    // If no type attribute is specified for a host `<button>` element, set it to `button`. If a\n    // type attribute is already specified, we do nothing. We do this for backwards compatibility.\n    // TODO: Determine if we intend to continue doing this for the MDC-based list.\n    if (this._isButtonElement && !this._hostElement.hasAttribute('type')) {\n      this._hostElement.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterViewInit() {\n    this._monitorProjectedLinesAndTitle();\n    this._updateItemLines(true);\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n    if (this._rippleRenderer !== null) {\n      this._rippleRenderer._removeTriggerEvents();\n    }\n  }\n\n  /** Whether the list item has icons or avatars. */\n  _hasIconOrAvatar() {\n    return !!(this._avatars.length || this._icons.length);\n  }\n\n  private _initInteractiveListItem() {\n    this._hostElement.classList.add('mat-mdc-list-item-interactive');\n    this._rippleRenderer = new RippleRenderer(\n      this,\n      this._ngZone,\n      this._hostElement,\n      this._platform,\n    );\n    this._rippleRenderer.setupTriggerEvents(this._hostElement);\n  }\n\n  /**\n   * Subscribes to changes in the projected title and lines. Triggers a\n   * item lines update whenever a change occurs.\n   */\n  private _monitorProjectedLinesAndTitle() {\n    this._ngZone.runOutsideAngular(() => {\n      this._subscriptions.add(\n        merge(this._lines!.changes, this._titles!.changes).subscribe(() =>\n          this._updateItemLines(false),\n        ),\n      );\n    });\n  }\n\n  /**\n   * Updates the lines of the list item. Based on the projected user content and optional\n   * explicit lines setting, the visual appearance of the list item is determined.\n   *\n   * This method should be invoked whenever the projected user content changes, or\n   * when the explicit lines have been updated.\n   *\n   * @param recheckUnscopedContent Whether the projected unscoped content should be re-checked.\n   *   The unscoped content is not re-checked for every update as it is a rather expensive check\n   *   for content that is expected to not change very often.\n   */\n  _updateItemLines(recheckUnscopedContent: boolean) {\n    // If the updated is triggered too early before the view and content is initialized,\n    // we just skip the update. After view initialization the update is triggered again.\n    if (!this._lines || !this._titles || !this._unscopedContent) {\n      return;\n    }\n\n    // Re-check the DOM for unscoped text content if requested. This needs to\n    // happen before any computation or sanity checks run as these rely on the\n    // result of whether there is unscoped text content or not.\n    if (recheckUnscopedContent) {\n      this._checkDomForUnscopedTextContent();\n    }\n\n    // Sanity check the list item lines and title in the content. This is a dev-mode only\n    // check that can be dead-code eliminated by Terser in production.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      sanityCheckListItemContent(this);\n    }\n\n    const numberOfLines = this._explicitLines ?? this._inferLinesFromContent();\n    const unscopedContentEl = this._unscopedContent.nativeElement;\n\n    // Update the list item element to reflect the number of lines.\n    this._hostElement.classList.toggle('mat-mdc-list-item-single-line', numberOfLines <= 1);\n    this._hostElement.classList.toggle('mdc-list-item--with-one-line', numberOfLines <= 1);\n    this._hostElement.classList.toggle('mdc-list-item--with-two-lines', numberOfLines === 2);\n    this._hostElement.classList.toggle('mdc-list-item--with-three-lines', numberOfLines === 3);\n\n    // If there is no title and the unscoped content is the is the only line, the\n    // unscoped text content will be treated as the title of the list-item.\n    if (this._hasUnscopedTextContent) {\n      const treatAsTitle = this._titles.length === 0 && numberOfLines === 1;\n      unscopedContentEl.classList.toggle('mdc-list-item__primary-text', treatAsTitle);\n      unscopedContentEl.classList.toggle('mdc-list-item__secondary-text', !treatAsTitle);\n    } else {\n      unscopedContentEl.classList.remove('mdc-list-item__primary-text');\n      unscopedContentEl.classList.remove('mdc-list-item__secondary-text');\n    }\n  }\n\n  /**\n   * Infers the number of lines based on the projected user content. This is useful\n   * if no explicit number of lines has been specified on the list item.\n   *\n   * The number of lines is inferred based on whether there is a title, the number of\n   * additional lines (secondary/tertiary). An additional line is acquired if there is\n   * unscoped text content.\n   */\n  private _inferLinesFromContent() {\n    let numOfLines = this._titles!.length + this._lines!.length;\n    if (this._hasUnscopedTextContent) {\n      numOfLines += 1;\n    }\n    return numOfLines;\n  }\n\n  /** Checks whether the list item has unscoped text content. */\n  private _checkDomForUnscopedTextContent() {\n    this._hasUnscopedTextContent = Array.from<ChildNode>(\n      this._unscopedContent!.nativeElement.childNodes,\n    )\n      .filter(node => node.nodeType !== node.COMMENT_NODE)\n      .some(node => !!(node.textContent && node.textContent.trim()));\n  }\n}\n\n/**\n * Sanity checks the configuration of the list item with respect to the amount\n * of lines, whether there is a title, or if there is unscoped text content.\n *\n * The checks are extracted into a top-level function that can be dead-code\n * eliminated by Terser or other optimizers in production mode.\n */\nfunction sanityCheckListItemContent(item: MatListItemBase) {\n  const numTitles = item._titles!.length;\n  const numLines = item._lines!.length;\n\n  if (numTitles > 1) {\n    console.warn('A list item cannot have multiple titles.');\n  }\n  if (numTitles === 0 && numLines > 0) {\n    console.warn('A list item line can only be used if there is a list item title.');\n  }\n  if (\n    numTitles === 0 &&\n    item._hasUnscopedTextContent &&\n    item._explicitLines !== null &&\n    item._explicitLines > 1\n  ) {\n    console.warn('A list item cannot have wrapping content without a title.');\n  }\n  if (numLines > 2 || (numLines === 2 && item._hasUnscopedTextContent)) {\n    console.warn('A list item can have at maximum three lines.');\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatListBase} from './list-base';\n\n@Component({\n  selector: 'mat-action-list',\n  exportAs: 'matActionList',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-mdc-action-list mat-mdc-list-base mdc-list',\n    'role': 'group',\n  },\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MatListBase, useExisting: MatActionList}],\n})\nexport class MatActionList extends MatListBase {\n  // An navigation list is considered interactive, but does not extend the interactive list\n  // base class. We do this because as per MDC, items of interactive lists are only reachable\n  // through keyboard shortcuts. We want all items for the navigation list to be reachable\n  // through tab key as we do not intend to provide any special accessibility treatment. The\n  // accessibility treatment depends on how the end-user will interact with it.\n  override _isNonInteractive = false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, RippleGlobalOptions} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatListBase, MatListItemBase} from './list-base';\nimport {MatListItemLine, MatListItemMeta, MatListItemTitle} from './list-item-sections';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_LIST = new InjectionToken<MatList>('MatList');\n\n@Component({\n  selector: 'mat-list',\n  exportAs: 'matList',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-mdc-list mat-mdc-list-base mdc-list',\n  },\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MatListBase, useExisting: MatList}],\n})\nexport class MatList extends MatListBase {}\n\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-mdc-list-item mdc-list-item',\n    '[class.mdc-list-item--activated]': 'activated',\n    '[class.mdc-list-item--with-leading-avatar]': '_avatars.length !== 0',\n    '[class.mdc-list-item--with-leading-icon]': '_icons.length !== 0',\n    '[class.mdc-list-item--with-trailing-meta]': '_meta.length !== 0',\n    '[class._mat-animation-noopable]': '_noopAnimations',\n    '[attr.aria-current]': '_getAriaCurrent()',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends MatListItemBase {\n  @ContentChildren(MatListItemLine, {descendants: true}) _lines: QueryList<MatListItemLine>;\n  @ContentChildren(MatListItemTitle, {descendants: true}) _titles: QueryList<MatListItemTitle>;\n  @ContentChildren(MatListItemMeta, {descendants: true}) _meta: QueryList<MatListItemMeta>;\n  @ViewChild('unscopedContent') _unscopedContent: ElementRef<HTMLSpanElement>;\n  @ViewChild('text') _itemText: ElementRef<HTMLElement>;\n\n  /** Indicates whether an item in a `<mat-nav-list>` is the currently active page. */\n  @Input()\n  get activated() {\n    return this._activated;\n  }\n  set activated(activated) {\n    this._activated = coerceBooleanProperty(activated);\n  }\n  _activated = false;\n\n  constructor(\n    element: ElementRef,\n    ngZone: NgZone,\n    @Optional() listBase: MatListBase | null,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(element, ngZone, listBase, platform, globalRippleOptions, animationMode);\n  }\n\n  /**\n   * Determine the value of `aria-current`. Return 'page' if this item is an activated anchor tag.\n   * Otherwise, return `null`. This method is safe to use with server-side rendering.\n   */\n  _getAriaCurrent(): string | null {\n    return this._hostElement.nodeName === 'A' && this._activated ? 'page' : null;\n  }\n}\n", "<ng-content select=\"[matListItemAvatar],[matListItemIcon]\"></ng-content>\n\n<span class=\"mdc-list-item__content\">\n  <ng-content select=\"[matListItemTitle]\"></ng-content>\n  <ng-content select=\"[matListItemLine]\"></ng-content>\n  <span #unscopedContent class=\"mat-mdc-list-item-unscoped-content\"\n        (cdkObserveContent)=\"_updateItemLines(true)\">\n    <ng-content></ng-content>\n  </span>\n</span>\n\n<ng-content select=\"[matListItemMeta]\"></ng-content>\n\n<ng-content select=\"mat-divider\"></ng-content>\n\n<!--\n  Strong focus indicator element. MDC uses the `::before` pseudo element for the default\n  focus/hover/selected state, so we need a separate element.\n-->\n<div class=\"mat-mdc-focus-indicator\"></div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  ANIMATION_MODULE_TYPE,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, RippleGlobalOptions, ThemePalette} from '@angular/material/core';\nimport {MatListBase, MatListItemBase} from './list-base';\nimport {LIST_OPTION, ListOption, MatListOptionTogglePosition} from './list-option-types';\nimport {MatListItemLine, MatListItemTitle} from './list-item-sections';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Injection token that can be used to reference instances of an `SelectionList`. It serves\n * as alternative token to an actual implementation which would result in circular references.\n * @docs-private\n */\nexport const SELECTION_LIST = new InjectionToken<SelectionList>('SelectionList');\n\n/**\n * Interface describing the containing list of an list option. This is used to avoid\n * circular dependencies between the list-option and the selection list.\n * @docs-private\n */\nexport interface SelectionList extends MatListBase {\n  multiple: boolean;\n  color: ThemePalette;\n  selectedOptions: SelectionModel<MatListOption>;\n  hideSingleSelectionIndicator: boolean;\n  compareWith: (o1: any, o2: any) => boolean;\n  _value: string[] | null;\n  _reportValueChange(): void;\n  _emitChangeEvent(options: MatListOption[]): void;\n  _onTouched(): void;\n}\n\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  styleUrls: ['list-option.css'],\n  host: {\n    'class': 'mat-mdc-list-item mat-mdc-list-option mdc-list-item',\n    'role': 'option',\n    // As per MDC, only list items without checkbox or radio indicator should receive the\n    // `--selected` class.\n    '[class.mdc-list-item--selected]':\n      'selected && !_selectionList.multiple && _selectionList.hideSingleSelectionIndicator',\n    // Based on the checkbox/radio position and whether there are icons or avatars, we apply MDC's\n    // list-item `--leading` and `--trailing` classes.\n    '[class.mdc-list-item--with-leading-avatar]': '_hasProjected(\"avatars\", \"before\")',\n    '[class.mdc-list-item--with-leading-icon]': '_hasProjected(\"icons\", \"before\")',\n    '[class.mdc-list-item--with-trailing-icon]': '_hasProjected(\"icons\", \"after\")',\n    '[class.mat-mdc-list-option-with-trailing-avatar]': '_hasProjected(\"avatars\", \"after\")',\n    // Based on the checkbox/radio position, we apply the `--leading` or `--trailing` MDC classes\n    // which ensure that the checkbox/radio is positioned correctly within the list item.\n    '[class.mdc-list-item--with-leading-checkbox]': '_hasCheckboxAt(\"before\")',\n    '[class.mdc-list-item--with-trailing-checkbox]': '_hasCheckboxAt(\"after\")',\n    '[class.mdc-list-item--with-leading-radio]': '_hasRadioAt(\"before\")',\n    '[class.mdc-list-item--with-trailing-radio]': '_hasRadioAt(\"after\")',\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class._mat-animation-noopable]': '_noopAnimations',\n    '[attr.aria-selected]': 'selected',\n    '(blur)': '_handleBlur()',\n    '(click)': '_toggleOnInteraction()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MatListItemBase, useExisting: MatListOption},\n    {provide: LIST_OPTION, useExisting: MatListOption},\n  ],\n})\nexport class MatListOption extends MatListItemBase implements ListOption, OnInit, OnDestroy {\n  @ContentChildren(MatListItemLine, {descendants: true}) _lines: QueryList<MatListItemLine>;\n  @ContentChildren(MatListItemTitle, {descendants: true}) _titles: QueryList<MatListItemTitle>;\n  @ViewChild('unscopedContent') _unscopedContent: ElementRef<HTMLSpanElement>;\n\n  /**\n   * Emits when the selected state of the option has changed.\n   * Use to facilitate two-data binding to the `selected` property.\n   * @docs-private\n   */\n  @Output()\n  readonly selectedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Whether the label should appear before or after the checkbox/radio. Defaults to 'after' */\n  @Input() togglePosition: MatListOptionTogglePosition = 'after';\n\n  /**\n   * Whether the label should appear before or after the checkbox/radio. Defaults to 'after'\n   *\n   * @deprecated Use `togglePosition` instead.\n   * @breaking-change 17.0.0\n   */\n  @Input() get checkboxPosition(): MatListOptionTogglePosition {\n    return this.togglePosition;\n  }\n  set checkboxPosition(value: MatListOptionTogglePosition) {\n    this.togglePosition = value;\n  }\n\n  /** Theme color of the list option. This sets the color of the checkbox/radio. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color || this._selectionList.color;\n  }\n  set color(newValue: ThemePalette) {\n    this._color = newValue;\n  }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value && this._inputsInitialized) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selectionList.selectedOptions.isSelected(this);\n  }\n  set selected(value: BooleanInput) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n\n      if (isSelected || this._selectionList.multiple) {\n        this._selectionList._reportValueChange();\n      }\n    }\n  }\n  private _selected = false;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't\n   * clear the value of `selected` in the first cycle.\n   */\n  private _inputsInitialized = false;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    ngZone: NgZone,\n    @Inject(SELECTION_LIST) private _selectionList: SelectionList,\n    platform: Platform,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional()\n    @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    globalRippleOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, ngZone, _selectionList, platform, globalRippleOptions, animationMode);\n  }\n\n  ngOnInit() {\n    const list = this._selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(this._value, value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._hostElement.focus();\n  }\n\n  /** Gets the text label of the list option. Used for the typeahead functionality in the list. */\n  getLabel() {\n    const titleElement = this._titles?.get(0)?._elementRef.nativeElement;\n    // If there is no explicit title element, the unscoped text content\n    // is treated as the list item title.\n    const labelEl = titleElement || this._unscopedContent?.nativeElement;\n    return labelEl?.textContent || '';\n  }\n\n  /** Whether a checkbox is shown at the given position. */\n  _hasCheckboxAt(position: MatListOptionTogglePosition): boolean {\n    return this._selectionList.multiple && this._getTogglePosition() === position;\n  }\n\n  /** Where a radio indicator is shown at the given position. */\n  _hasRadioAt(position: MatListOptionTogglePosition): boolean {\n    return (\n      !this._selectionList.multiple &&\n      this._getTogglePosition() === position &&\n      !this._selectionList.hideSingleSelectionIndicator\n    );\n  }\n\n  /** Whether icons or avatars are shown at the given position. */\n  _hasIconsOrAvatarsAt(position: 'before' | 'after'): boolean {\n    return this._hasProjected('icons', position) || this._hasProjected('avatars', position);\n  }\n\n  /** Gets whether the given type of element is projected at the specified position. */\n  _hasProjected(type: 'icons' | 'avatars', position: 'before' | 'after'): boolean {\n    // If the checkbox/radio is shown at the specified position, neither icons or\n    // avatars can be shown at the position.\n    return (\n      this._getTogglePosition() !== position &&\n      (type === 'avatars' ? this._avatars.length !== 0 : this._icons.length !== 0)\n    );\n  }\n\n  _handleBlur() {\n    this._selectionList._onTouched();\n  }\n\n  /** Gets the current position of the checkbox/radio. */\n  _getTogglePosition() {\n    return this.togglePosition || 'after';\n  }\n\n  /**\n   * Sets the selected state of the option.\n   * @returns Whether the value has changed.\n   */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this._selectionList.selectedOptions.select(this);\n    } else {\n      this._selectionList.selectedOptions.deselect(this);\n    }\n\n    this.selectedChange.emit(selected);\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run.\n   * Mainly used to trigger an update of the list option if the disabled state of the selection\n   * list changed.\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the option's value based on a user interaction. */\n  _toggleOnInteraction() {\n    if (!this.disabled) {\n      if (this._selectionList.multiple) {\n        this.selected = !this.selected;\n        this._selectionList._emitChangeEvent([this]);\n      } else if (!this.selected) {\n        this.selected = true;\n        this._selectionList._emitChangeEvent([this]);\n      }\n    }\n  }\n\n  /** Sets the tabindex of the list option. */\n  _setTabindex(value: number) {\n    this._hostElement.setAttribute('tabindex', value + '');\n  }\n}\n", "<!--\n  Save icons and the pseudo checkbox/radio so that they can be re-used in the template without\n  duplication. Also content can only be injected once so we need to extract icons/avatars\n  into a template since we use it in multiple places.\n-->\n<ng-template #icons>\n  <ng-content select=\"[matListItemAvatar],[matListItemIcon]\">\n  </ng-content>\n</ng-template>\n\n<ng-template #checkbox>\n  <div class=\"mdc-checkbox\" [class.mdc-checkbox--disabled]=\"disabled\">\n    <input type=\"checkbox\" class=\"mdc-checkbox__native-control\"\n           [checked]=\"selected\" [disabled]=\"disabled\"/>\n    <div class=\"mdc-checkbox__background\">\n      <svg class=\"mdc-checkbox__checkmark\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mdc-checkbox__checkmark-path\"\n              fill=\"none\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n      </svg>\n      <div class=\"mdc-checkbox__mixedmark\"></div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #radio>\n  <div class=\"mdc-radio\" [class.mdc-radio--disabled]=\"disabled\">\n    <input type=\"radio\" class=\"mdc-radio__native-control\"\n           [checked]=\"selected\" [disabled]=\"disabled\"/>\n    <div class=\"mdc-radio__background\">\n      <div class=\"mdc-radio__outer-circle\"></div>\n      <div class=\"mdc-radio__inner-circle\"></div>\n    </div>\n  </div>\n</ng-template>\n\n@if (_hasCheckboxAt('before')) {\n  <!-- Container for the checkbox at start. -->\n  <span class=\"mdc-list-item__start mat-mdc-list-option-checkbox-before\">\n    <ng-template [ngTemplateOutlet]=\"checkbox\"></ng-template>\n  </span>\n} @else if (_hasRadioAt('before')) {\n  <!-- Container for the radio at the start. -->\n  <span class=\"mdc-list-item__start mat-mdc-list-option-radio-before\">\n    <ng-template [ngTemplateOutlet]=\"radio\"></ng-template>\n  </span>\n}\n<!-- Conditionally renders icons/avatars before the list item text. -->\n@if (_hasIconsOrAvatarsAt('before')) {\n  <ng-template [ngTemplateOutlet]=\"icons\"></ng-template>\n}\n\n<!-- Text -->\n<span class=\"mdc-list-item__content\">\n  <ng-content select=\"[matListItemTitle]\"></ng-content>\n  <ng-content select=\"[matListItemLine]\"></ng-content>\n  <span #unscopedContent class=\"mat-mdc-list-item-unscoped-content\"\n        (cdkObserveContent)=\"_updateItemLines(true)\">\n    <ng-content></ng-content>\n  </span>\n</span>\n\n@if (_hasCheckboxAt('after')) {\n  <!-- Container for the checkbox at the end. -->\n  <span class=\"mdc-list-item__end\">\n    <ng-template [ngTemplateOutlet]=\"checkbox\"></ng-template>\n  </span>\n} @else if (_hasRadioAt('after')) {\n  <!-- Container for the radio at the end. -->\n  <span class=\"mdc-list-item__end\">\n    <ng-template [ngTemplateOutlet]=\"radio\"></ng-template>\n  </span>\n}\n\n<!-- Conditionally renders icons/avatars after the list item text. -->\n@if (_hasIconsOrAvatarsAt('after')) {\n  <ng-template [ngTemplateOutlet]=\"icons\"></ng-template>\n}\n\n<!-- Divider -->\n<ng-content select=\"mat-divider\"></ng-content>\n\n<!--\n  Strong focus indicator element. MDC uses the `::before` pseudo element for the default\n  focus/hover/selected state, so we need a separate element.\n-->\n<div class=\"mat-mdc-focus-indicator\"></div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  // TODO(mmalerba): MDC's subheader font looks identical to the list item font, figure out why and\n  //  make a change in one of the repos to visually distinguish.\n  host: {'class': 'mat-mdc-subheader mdc-list-group__subheader'},\n})\nexport class MatListSubheaderCssMatStyler {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, InjectionToken, ViewEncapsulation} from '@angular/core';\nimport {MatListBase} from './list-base';\n\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_NAV_LIST = new InjectionToken<MatNavList>('MatNavList');\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-mdc-nav-list mat-mdc-list-base mdc-list',\n    'role': 'navigation',\n  },\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MatListBase, useExisting: MatNavList}],\n})\nexport class MatNavList extends MatListBase {\n  // An navigation list is considered interactive, but does not extend the interactive list\n  // base class. We do this because as per MDC, items of interactive lists are only reachable\n  // through keyboard shortcuts. We want all items for the navigation list to be reachable\n  // through tab key as we do not intend to provide any special accessibility treatment. The\n  // accessibility treatment depends on how the end-user will interact with it.\n  override _isNonInteractive = false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {A, ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {_getFocusedElementPierceShadowDom} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {ThemePalette} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListBase} from './list-base';\nimport {MatListOption, SELECTION_LIST, SelectionList} from './list-option';\n\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true,\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the options that have been changed. */\n    public options: MatListOption[],\n  ) {}\n}\n\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  host: {\n    'class': 'mat-mdc-selection-list mat-mdc-list-base mdc-list',\n    'role': 'listbox',\n    '[attr.aria-multiselectable]': 'multiple',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_SELECTION_LIST_VALUE_ACCESSOR,\n    {provide: MatListBase, useExisting: MatSelectionList},\n    {provide: SELECTION_LIST, useExisting: MatSelectionList},\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSelectionList\n  extends MatListBase\n  implements SelectionList, ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy\n{\n  private _initialized = false;\n  private _keyManager: FocusKeyManager<MatListOption>;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  @ContentChildren(MatListOption, {descendants: true}) _items: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n    new EventEmitter<MatSelectionListChange>();\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: BooleanInput) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._initialized) {\n        throw new Error(\n          'Cannot change `multiple` mode of mat-selection-list after initialization.',\n        );\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n  private _multiple = true;\n\n  /** Whether radio indicator for all list items is hidden. */\n  @Input()\n  get hideSingleSelectionIndicator(): boolean {\n    return this._hideSingleSelectionIndicator;\n  }\n  set hideSingleSelectionIndicator(value: BooleanInput) {\n    this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n  }\n  private _hideSingleSelectionIndicator: boolean =\n    this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[] | null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(public _element: ElementRef<HTMLElement>, private _ngZone: NgZone) {\n    super();\n    this._isNonInteractive = false;\n  }\n\n  ngAfterViewInit() {\n    // Mark the selection list as initialized so that the `multiple`\n    // binding can no longer be changed.\n    this._initialized = true;\n    this._setupRovingTabindex();\n\n    // These events are bound outside the zone, because they don't change\n    // any change-detected properties and they can trigger timeouts.\n    this._ngZone.runOutsideAngular(() => {\n      this._element.nativeElement.addEventListener('focusin', this._handleFocusin);\n      this._element.nativeElement.addEventListener('focusout', this._handleFocusout);\n    });\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    this._watchForSelectionChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disabledChanges = changes['disabled'];\n    const disableRippleChanges = changes['disableRipple'];\n    const hideSingleSelectionIndicatorChanges = changes['hideSingleSelectionIndicator'];\n\n    if (\n      (disableRippleChanges && !disableRippleChanges.firstChange) ||\n      (disabledChanges && !disabledChanges.firstChange) ||\n      (hideSingleSelectionIndicatorChanges && !hideSingleSelectionIndicatorChanges.firstChange)\n    ) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._element.nativeElement.removeEventListener('focusin', this._handleFocusin);\n    this._element.nativeElement.removeEventListener('focusout', this._handleFocusout);\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. Returns the options that changed as a result. */\n  selectAll(): MatListOption[] {\n    return this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. Returns the options that changed as a result. */\n  deselectAll(): MatListOption[] {\n    return this._setAllOptionsSelected(false);\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(options: MatListOption[]) {\n    this.selectionChange.emit(new MatSelectionListChange(this, options));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * Whether the *entire* selection list is disabled. When true, each list item is also disabled\n   * and each list item is removed from the tab order (has tabindex=\"-1\").\n   */\n  @Input()\n  override get disabled(): boolean {\n    return this._selectionListDisabled;\n  }\n  override set disabled(value: BooleanInput) {\n    // Update the disabled state of this list. Write to `this._selectionListDisabled` instead of\n    // `super.disabled`. That is to avoid closure compiler compatibility issues with assigning to\n    // a super property.\n    this._selectionListDisabled = coerceBooleanProperty(value);\n    if (this._selectionListDisabled) {\n      this._keyManager?.setActiveItem(-1);\n    }\n  }\n  private _selectionListDisabled = false;\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Watches for changes in the selected state of the options and updates the list accordingly. */\n  private _watchForSelectionChange() {\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      // Sync external changes to the model back to the options.\n      for (let item of event.added) {\n        item.selected = true;\n      }\n\n      for (let item of event.removed) {\n        item.selected = false;\n      }\n\n      if (!this._containsFocus()) {\n        this._resetActiveOption();\n      }\n    });\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean, skipDisabled?: boolean): MatListOption[] {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    const changedOptions: MatListOption[] = [];\n\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        changedOptions.push(option);\n      }\n    });\n\n    if (changedOptions.length) {\n      this._reportValueChange();\n    }\n\n    return changedOptions;\n  }\n\n  // Note: This getter exists for backwards compatibility. The `_items` query list\n  // cannot be named `options` as it will be picked up by the interactive list base.\n  /** The option components contained within this selection-list. */\n  get options(): QueryList<MatListOption> {\n    return this._items;\n  }\n\n  /** Handles keydown events within the list. */\n  _handleKeydown(event: KeyboardEvent) {\n    const activeItem = this._keyManager.activeItem;\n\n    if (\n      (event.keyCode === ENTER || event.keyCode === SPACE) &&\n      !this._keyManager.isTyping() &&\n      activeItem &&\n      !activeItem.disabled\n    ) {\n      event.preventDefault();\n      activeItem._toggleOnInteraction();\n    } else if (\n      event.keyCode === A &&\n      this.multiple &&\n      !this._keyManager.isTyping() &&\n      hasModifierKey(event, 'ctrlKey')\n    ) {\n      const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n      event.preventDefault();\n      this._emitChangeEvent(this._setAllOptionsSelected(shouldSelect, true));\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles focusout events within the list. */\n  private _handleFocusout = () => {\n    // Focus takes a while to update so we have to wrap our call in a timeout.\n    setTimeout(() => {\n      if (!this._containsFocus()) {\n        this._resetActiveOption();\n      }\n    });\n  };\n\n  /** Handles focusin events within the list. */\n  private _handleFocusin = (event: FocusEvent) => {\n    if (this.disabled) {\n      return;\n    }\n\n    const activeIndex = this._items\n      .toArray()\n      .findIndex(item => item._elementRef.nativeElement.contains(event.target as HTMLElement));\n\n    if (activeIndex > -1) {\n      this._setActiveOption(activeIndex);\n    } else {\n      this._resetActiveOption();\n    }\n  };\n\n  /**\n   * Sets up the logic for maintaining the roving tabindex.\n   *\n   * `skipPredicate` determines if key manager should avoid putting a given list item in the tab\n   * index. Allow disabled list items to receive focus to align with WAI ARIA recommendation.\n   * Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n   * makes a few exceptions for compound widgets.\n   *\n   * From [Developing a Keyboard Interface](\n   * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n   *   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n   *   Listbox...\"\n   */\n  private _setupRovingTabindex() {\n    this._keyManager = new FocusKeyManager(this._items)\n      .withHomeAndEnd()\n      .withTypeAhead()\n      .withWrap()\n      .skipPredicate(() => this.disabled);\n\n    // Set the initial focus.\n    this._resetActiveOption();\n\n    // Move the tabindex to the currently-focused list item.\n    this._keyManager.change.subscribe(activeItemIndex => this._setActiveOption(activeItemIndex));\n\n    // If the active item is removed from the list, reset back to the first one.\n    this._items.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      const activeItem = this._keyManager.activeItem;\n\n      if (!activeItem || !this._items.toArray().indexOf(activeItem)) {\n        this._resetActiveOption();\n      }\n    });\n  }\n\n  /**\n   * Sets an option as active.\n   * @param index Index of the active option. If set to -1, no option will be active.\n   */\n  private _setActiveOption(index: number) {\n    this._items.forEach((item, itemIndex) => item._setTabindex(itemIndex === index ? 0 : -1));\n    this._keyManager.updateActiveItem(index);\n  }\n\n  /**\n   * Resets the active option. When the list is disabled, remove all options from to the tab order.\n   * Otherwise, focus the first selected option.\n   */\n  private _resetActiveOption() {\n    if (this.disabled) {\n      this._setActiveOption(-1);\n      return;\n    }\n\n    const activeItem =\n      this._items.find(item => item.selected && !item.disabled) || this._items.first;\n    this._setActiveOption(activeItem ? this._items.toArray().indexOf(activeItem) : -1);\n  }\n\n  /** Returns whether the focus is currently within the list. */\n  private _containsFocus() {\n    const activeElement = _getFocusedElementPierceShadowDom();\n    return activeElement && this._element.nativeElement.contains(activeElement);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckboxModule, MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatActionList} from './action-list';\nimport {MatList, MatListItem} from './list';\nimport {MatListOption} from './list-option';\nimport {MatListSubheaderCssMatStyler} from './subheader';\nimport {\n  MatListItemLine,\n  MatListItemTitle,\n  MatListItemMeta,\n  MatListItemAvatar,\n  MatListItemIcon,\n} from './list-item-sections';\nimport {MatNavList} from './nav-list';\nimport {MatSelectionList} from './selection-list';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  imports: [\n    ObserversModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    MatPseudoCheckboxModule,\n  ],\n  exports: [\n    MatList,\n    MatActionList,\n    MatNavList,\n    MatSelectionList,\n    MatListItem,\n    MatListOption,\n    MatListItemAvatar,\n    MatListItemIcon,\n    MatListSubheaderCssMatStyler,\n    MatDividerModule,\n    MatListItemLine,\n    MatListItemTitle,\n    MatListItemMeta,\n  ],\n  declarations: [\n    MatList,\n    MatActionList,\n    MatNavList,\n    MatSelectionList,\n    MatListItem,\n    MatListOption,\n    MatListSubheaderCssMatStyler,\n    MatListItemAvatar,\n    MatListItemIcon,\n    MatListItemLine,\n    MatListItemTitle,\n    MatListItemMeta,\n  ],\n})\nexport class MatListModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "_c2", "_c3", "_c4", "_c5", "MatListOption_ng_template_0_Template", "rf", "ctx", "MatListOption_ng_template_2_Template", "ctx_r2", "disabled", "MatListOption_ng_template_4_Template", "ctx_r4", "MatListOption_Conditional_6_ng_template_1_Template", "MatListOption_Conditional_6_Template", "MatListOption_Conditional_7_ng_template_1_Template", "MatListOption_Conditional_7_Template", "MatListOption_Conditional_8_ng_template_0_Template", "MatListOption_Conditional_8_Template", "MatListOption_Conditional_15_ng_template_1_Template", "MatListOption_Conditional_15_Template", "MatListOption_Conditional_16_ng_template_1_Template", "MatListOption_Conditional_16_Template", "MatListOption_Conditional_17_ng_template_0_Template", "MatListOption_Conditional_17_Template", "_c6", "_c7", "LIST_OPTION", "InjectionToken", "MatListItemTitle", "constructor", "_elementRef", "ElementRef", "selectors", "hostAttrs", "Directive", "args", "selector", "host", "MatListItemLine", "MatListItemMeta", "_MatListItemGraphicBase", "_listOption", "_isAlignedAtStart", "_getTogglePosition", "ɵfac", "_MatListItemGraphicBase_Factory", "t", "hostVars", "hostBindings", "_MatListItemGraphicBase_HostBindings", "Optional", "Inject", "MatListItemAvatar", "features", "MatListItemIcon", "MAT_LIST_CONFIG", "MatListBase", "_isNonInteractive", "_disableRipple", "_disabled", "_defaultOptions", "inject", "optional", "disableRipple", "value", "coerceBooleanProperty", "MatListBase_HostBindings", "Input", "MatListItemBase", "lines", "_explicitLines", "coerceNumberProperty", "_updateItemLines", "_noopAnimations", "_listBase", "rippleDisabled", "rippleConfig", "_ngZone", "_platform", "globalRippleOptions", "animationMode", "_subscriptions", "Subscription", "_rippleRenderer", "_hasUnscopedTextContent", "_hostElement", "nativeElement", "_isButtonElement", "nodeName", "toLowerCase", "_initInteractiveListItem", "hasAttribute", "setAttribute", "ngAfterViewInit", "_monitorProjectedLinesAndTitle", "ngOnDestroy", "unsubscribe", "_removeTriggerEvents", "_hasIconOrAvatar", "_avatars", "length", "_icons", "classList", "add", "RippleRenderer", "setupTriggerEvents", "runOutsideAngular", "merge", "_lines", "changes", "_titles", "subscribe", "recheckUnscopedContent", "_unscopedContent", "_checkDomForUnscopedTextContent", "ngDevMode", "sanityCheckListItemContent", "numberOfLines", "_inferLinesFromContent", "unscopedContentEl", "toggle", "treatAsTitle", "remove", "numOfLines", "Array", "from", "childNodes", "filter", "node", "nodeType", "COMMENT_NODE", "some", "textContent", "trim", "NgZone", "Platform", "MAT_RIPPLE_GLOBAL_OPTIONS", "ANIMATION_MODULE_TYPE", "contentQueries", "MatListItemBase_ContentQueries", "dirIndex", "_t", "ContentChildren", "descendants", "item", "numTitles", "numLines", "console", "warn", "MatActionList", "ɵcmp", "exportAs", "provide", "useExisting", "styles", "encapsulation", "changeDetection", "Component", "template", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "providers", "MAT_LIST", "MatList", "MatListItem", "activated", "_activated", "element", "ngZone", "listBase", "platform", "_getAriaCurrent", "MatListItem_ContentQueries", "dependencies", "CdkObserveContent", "_meta", "ViewChild", "_itemText", "SELECTION_LIST", "MatListOption", "checkboxPosition", "togglePosition", "color", "_color", "_selectionList", "newValue", "_value", "selected", "_inputsInitialized", "selectedOptions", "isSelected", "_selected", "_setSelected", "multiple", "_reportValueChange", "elementRef", "_changeDetectorRef", "selectedChange", "EventEmitter", "ngOnInit", "list", "compareWith", "wasSelected", "Promise", "resolve", "then", "markForCheck", "focus", "getLabel", "titleElement", "get", "labelEl", "_hasCheckboxAt", "position", "_hasRadioAt", "hideSingleSelectionIndicator", "_hasIconsOrAvatarsAt", "_hasProjected", "type", "_handleBlur", "_onTouched", "select", "deselect", "emit", "_markForCheck", "_toggleOnInteraction", "_emitChangeEvent", "_setTabindex", "MatListOption_Factory", "ChangeDetectorRef", "ANIMATION_MODULE_TYPE$1", "MatListOption_ContentQueries", "MatListOption_HostBindings", "MatListOption_click_HostBindingHandler", "NgTemplateOutlet", "Output", "MatListSubheaderCssMatStyler", "MAT_NAV_LIST", "MatNavList", "MAT_SELECTION_LIST_VALUE_ACCESSOR", "NG_VALUE_ACCESSOR", "forwardRef", "MatSelectionList", "multi", "MatSelectionListChange", "source", "options", "_multiple", "_initialized", "Error", "SelectionModel", "_hideSingleSelectionIndicator", "_element", "_destroyed", "Subject", "_onChange", "_", "selectionChange", "a1", "a2", "_selectionListDisabled", "_handleFocusout", "setTimeout", "_containsFocus", "_resetActiveOption", "_handleFocusin", "event", "activeIndex", "_items", "toArray", "findIndex", "contains", "target", "_setActiveOption", "_setupRovingTabindex", "addEventListener", "_setOptionsFromValues", "_watchForSelectionChange", "ngOnChanges", "disabledChanges", "disableRippleChanges", "hideSingleSelectionIndicatorChanges", "firstChange", "_markOptionsForCheck", "_keyManager", "destroy", "removeEventListener", "next", "complete", "_isDestroyed", "selectAll", "_setAllOptionsSelected", "deselectAll", "_getSelectedOptionValues", "writeValue", "values", "setDisabledState", "isDisabled", "setActiveItem", "registerOnChange", "fn", "registerOnTouched", "changed", "pipe", "takeUntil", "added", "removed", "forEach", "option", "correspondingOption", "find", "map", "skipDisabled", "changedOptions", "push", "_handleKeydown", "activeItem", "keyCode", "ENTER", "SPACE", "isTyping", "preventDefault", "A", "hasModifierKey", "shouldSelect", "onKeydown", "FocusKeyManager", "withHomeAndEnd", "withTypeAhead", "withWrap", "skipPredicate", "change", "activeItemIndex", "indexOf", "index", "itemIndex", "updateActiveItem", "first", "activeElement", "_getFocusedElementPierceShadowDom", "MatSelectionList_ContentQueries", "MatSelectionList_HostBindings", "$event", "MatListModule", "ɵmod", "declarations", "imports", "ObserversModule", "CommonModule", "MatCommonModule", "MatRippleModule", "MatPseudoCheckboxModule", "exports", "MatDividerModule", "ɵinj", "NgModule"]
}
