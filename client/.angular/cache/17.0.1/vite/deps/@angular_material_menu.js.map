{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/portal/portal-errors.ts", "../../../../../../../src/cdk/portal/portal.ts", "../../../../../../../src/cdk/portal/dom-portal-outlet.ts", "../../../../../../../src/cdk/portal/portal-directives.ts", "../../../../../../../src/cdk/portal/portal-injector.ts", "../../../../../../../src/cdk/portal/portal_public_index.ts", "../../../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/close-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/position/scroll-clip.ts", "../../../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts", "../../../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts", "../../../../../../../src/cdk/overlay/overlay-config.ts", "../../../../../../../src/cdk/overlay/position/connected-position.ts", "../../../../../../../src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts", "../../../../../../../src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts", "../../../../../../../src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts", "../../../../../../../src/cdk/overlay/overlay-container.ts", "../../../../../../../src/cdk/overlay/overlay-ref.ts", "../../../../../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts", "../../../../../../../src/cdk/overlay/position/global-position-strategy.ts", "../../../../../../../src/cdk/overlay/position/overlay-position-builder.ts", "../../../../../../../src/cdk/overlay/overlay.ts", "../../../../../../../src/cdk/overlay/overlay-directives.ts", "../../../../../../../src/cdk/overlay/overlay-module.ts", "../../../../../../../src/cdk/overlay/fullscreen-overlay-container.ts", "../../../../../../../src/cdk/overlay/overlay_public_index.ts", "../../../../../../../src/material/menu/menu-panel.ts", "../../../../../../../src/material/menu/menu-item.ts", "../../../../../../../src/material/menu/menu-item.html", "../../../../../../../src/material/menu/menu-errors.ts", "../../../../../../../src/material/menu/menu-content.ts", "../../../../../../../src/material/menu/menu-animations.ts", "../../../../../../../src/material/menu/menu.ts", "../../../../../../../src/material/menu/menu.html", "../../../../../../../src/material/menu/menu-trigger.ts", "../../../../../../../src/material/menu/module.ts", "../../../../../../../src/material/menu/menu_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error(\n    'Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n      'a ComponentPortal or a TemplatePortal.',\n  );\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  TemplateRef,\n  ViewContainerRef,\n  ElementRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injector,\n  ComponentFactoryResolver,\n} from '@angular/core';\nimport {\n  throwNullPortalOutletError,\n  throwPortalAlreadyAttachedError,\n  throwNoPortalAttachedError,\n  throwNullPortalError,\n  throwPortalOutletAlreadyDisposedError,\n  throwUnknownPortalTypeError,\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n\n    this._attachedHost = host;\n    return <T>host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * Defaults to using the resolver from the outlet that the portal is attached to.\n   */\n  componentFactoryResolver?: ComponentFactoryResolver | null;\n\n  /**\n   * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\n   */\n  projectableNodes?: Node[][] | null;\n\n  constructor(\n    component: ComponentType<T>,\n    viewContainerRef?: ViewContainerRef | null,\n    injector?: Injector | null,\n    componentFactoryResolver?: ComponentFactoryResolver | null,\n    projectableNodes?: Node[][] | null,\n  ) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.projectableNodes = projectableNodes;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    public templateRef: TemplateRef<C>,\n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    public viewContainerRef: ViewContainerRef,\n    /** Contextual data to be passed in to the embedded view. */\n    public context?: C,\n    /** The injector to use for the embedded view. */\n    public injector?: Injector,\n  ) {\n    super();\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  override attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  override detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n  /** DOM node hosting the portal's content. */\n  readonly element: T;\n\n  constructor(element: T | ElementRef<T>) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * @deprecated Use `PortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport type PortalHost = PortalOutlet;\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport abstract class BasePortalHost extends BasePortalOutlet {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, DomPortal, TemplatePortal} from './portal';\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  private _document: Document;\n\n  /**\n   * @param outletElement Element into which the content is projected.\n   * @param _componentFactoryResolver Used to resolve the component factory.\n   *   Only required when attaching component portals.\n   * @param _appRef Reference to the application. Only used in component portals when there\n   *   is no `ViewContainerRef` available.\n   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n   *   have one. Only used for component portals.\n   * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n   *   become a required parameter.\n   */\n  constructor(\n    /** Element into which the content is projected. */\n    public outletElement: Element,\n    private _componentFactoryResolver?: ComponentFactoryResolver,\n    private _appRef?: ApplicationRef,\n    private _defaultInjector?: Injector,\n\n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document?: any,\n  ) {\n    super();\n    this._document = _document;\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver)!;\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n      throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n    }\n\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n        componentFactory,\n        portal.viewContainerRef.length,\n        portal.injector || portal.viewContainerRef.injector,\n        portal.projectableNodes || undefined,\n      );\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n      }\n\n      componentRef = componentFactory.create(\n        portal.injector || this._defaultInjector || Injector.NULL,\n      );\n      this._appRef!.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        // Verify that the ApplicationRef has registered views before trying to detach a host view.\n        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n        if (this._appRef!.viewCount > 0) {\n          this._appRef!.detachView(componentRef.hostView);\n        }\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    this._attachedPortal = portal;\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n    viewRef.detectChanges();\n\n    this.setDisposeFn(() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n\n    this._attachedPortal = portal;\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 10.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    element.parentNode!.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  override dispose(): void {\n    super.dispose();\n    this.outletElement.remove();\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport class DomPortalHost extends DomPortalOutlet {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n  providers: [\n    {\n      provide: CdkPortal,\n      useExisting: TemplatePortalDirective,\n    },\n  ],\n})\nexport class TemplatePortalDirective extends CdkPortal {}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n  inputs: ['portal: cdkPortalOutlet'],\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  private _document: Document;\n\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _viewContainerRef: ViewContainerRef,\n\n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    @Inject(DOCUMENT) _document?: any,\n  ) {\n    super();\n    this._document = _document;\n  }\n\n  /** Portal associated with the Portal outlet. */\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null | undefined | '') {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal || null;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() readonly attached: EventEmitter<CdkPortalOutletAttachedRef> =\n    new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedRef = this._attachedPortal = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef =\n      portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    const ref = viewContainerRef.createComponent(\n      componentFactory,\n      viewContainerRef.length,\n      portal.injector || viewContainerRef.injector,\n      portal.projectableNodes || undefined,\n    );\n\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 9.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    portal.setAttachedHost(this);\n    element.parentNode!.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /** Gets the root node of the portal outlet. */\n  private _getRootNode(): HTMLElement {\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\n\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return (\n      nativeElement.nodeType === nativeElement.ELEMENT_NODE\n        ? nativeElement\n        : nativeElement.parentNode!\n    ) as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalHost',\n  inputs: ['portal: cdkPortalHost'],\n  providers: [\n    {\n      provide: CdkPortalOutlet,\n      useExisting: PortalHostDirective,\n    },\n  ],\n})\nexport class PortalHostDirective extends CdkPortalOutlet {}\n\n@NgModule({\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n  declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nexport class PortalInjector implements Injector {\n  constructor(private _parentInjector: Injector, private _customTokens: WeakMap<any, any>) {}\n\n  get(token: any, notFoundValue?: any): any {\n    const value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: {top: number; left: number};\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {}\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayRef) => void;\n\n  /** Detaches the scroll strategy from the current overlay. */\n  detach?: () => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {filter} from 'rxjs/operators';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0).pipe(\n      filter(scrollable => {\n        return (\n          !scrollable ||\n          !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement)\n        );\n      }),\n    );\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/** Equivalent of `ClientRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<ClientRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any,\n  ) {\n    this._document = document;\n  }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) =>\n    new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) =>\n    new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config) as Iterable<keyof OverlayConfig> &\n        (keyof OverlayConfig)[];\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[],\n  ) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n    /** The position used as a result of this change. */\n    public connectionPair: ConnectionPositionPair,\n    /** @docs-private */\n    public scrollableViewProperties: ScrollingVisibility,\n  ) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"top\", \"bottom\" or \"center\".`,\n    );\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"start\", \"end\" or \"center\".`,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  protected _document: Document;\n  protected _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy(): void {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  /** Detaches the global event listener. */\n  protected abstract detach(): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional} from '@angular/core';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  constructor(\n    @Inject(DOCUMENT) document: any,\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    @Optional() private _ngZone?: NgZone,\n  ) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() =>\n          this._document.body.addEventListener('keydown', this._keydownListener),\n        );\n      } else {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n      }\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEvents.observers.length > 0) {\n        const keydownEvents = overlays[i]._keydownEvents;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n          this._ngZone.run(() => keydownEvents.next(event));\n        } else {\n          keydownEvents.next(event);\n        }\n        break;\n      }\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional} from '@angular/core';\nimport {Platform, _getEventTarget} from '@angular/cdk/platform';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  private _cursorOriginalValue: string;\n  private _cursorStyleIsSet = false;\n  private _pointerDownEventTarget: EventTarget | null;\n\n  constructor(\n    @Inject(DOCUMENT) document: any,\n    private _platform: Platform,\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    @Optional() private _ngZone?: NgZone,\n  ) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    if (!this._isAttached) {\n      const body = this._document.body;\n\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n      } else {\n        this._addEventListeners(body);\n      }\n\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      const body = this._document.body;\n      body.removeEventListener('pointerdown', this._pointerDownListener, true);\n      body.removeEventListener('click', this._clickListener, true);\n      body.removeEventListener('auxclick', this._clickListener, true);\n      body.removeEventListener('contextmenu', this._clickListener, true);\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  private _addEventListeners(body: HTMLElement): void {\n    body.addEventListener('pointerdown', this._pointerDownListener, true);\n    body.addEventListener('click', this._clickListener, true);\n    body.addEventListener('auxclick', this._clickListener, true);\n    body.addEventListener('contextmenu', this._clickListener, true);\n  }\n\n  /** Store pointerdown event target to track origin of click. */\n  private _pointerDownListener = (event: PointerEvent) => {\n    this._pointerDownEventTarget = _getEventTarget(event);\n  };\n\n  /** Click event listener that will be attached to the body propagate phase. */\n  private _clickListener = (event: MouseEvent) => {\n    const target = _getEventTarget(event);\n    // In case of a click event, we want to check the origin of the click\n    // (e.g. in case where a user starts a click inside the overlay and\n    // releases the click outside of it).\n    // This is done by using the event target of the preceding pointerdown event.\n    // Every click event caused by a pointer device has a preceding pointerdown\n    // event, unless the click was programmatically triggered (e.g. in a unit test).\n    const origin =\n      event.type === 'click' && this._pointerDownEventTarget\n        ? this._pointerDownEventTarget\n        : target;\n    // Reset the stored pointerdown event target, to avoid having it interfere\n    // in subsequent events.\n    this._pointerDownEventTarget = null;\n\n    // We copy the array because the original may be modified asynchronously if the\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n    // the for loop.\n    const overlays = this._attachedOverlays.slice();\n\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n    // We want to target all overlays for which the click could be considered as outside click.\n    // As soon as we reach an overlay for which the click is not outside click we break off\n    // the loop.\n    for (let i = overlays.length - 1; i > -1; i--) {\n      const overlayRef = overlays[i];\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n        continue;\n      }\n\n      // If it's a click inside the overlay, just break - we should do nothing\n      // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n      // and proceed with the next overlay\n      if (\n        overlayRef.overlayElement.contains(target as Node) ||\n        overlayRef.overlayElement.contains(origin as Node)\n      ) {\n        break;\n      }\n\n      const outsidePointerEvents = overlayRef._outsidePointerEvents;\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.run(() => outsidePointerEvents.next(event));\n      } else {\n        outsidePointerEvents.next(event);\n      }\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {Platform, _isTestEnvironment} from '@angular/cdk/platform';\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n  protected _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any, protected _platform: Platform) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._containerElement?.remove();\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n\n    // TODO(crisbeto): remove the testing check once we have an overlay testing\n    // module or Angular starts tearing down the testing `NgModule`. See:\n    // https://github.com/angular/angular/issues/18831\n    if (this._platform.isBrowser || _isTestEnvironment()) {\n      const oppositePlatformContainers = this._document.querySelectorAll(\n        `.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`,\n      );\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].remove();\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (_isTestEnvironment()) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropTimeout: number | undefined;\n  private readonly _backdropClick = new Subject<MouseEvent>();\n  private readonly _attachments = new Subject<void>();\n  private readonly _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\n  private _backdropTransitionendHandler = (event: TransitionEvent) => {\n    this._disposeBackdrop(event.target as HTMLElement | null);\n  };\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  /** Stream of keydown events dispatched to this overlay. */\n  readonly _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Stream of mouse outside events dispatched to this overlay. */\n  readonly _outsidePointerEvents = new Subject<MouseEvent>();\n\n  constructor(\n    private _portalOutlet: PortalOutlet,\n    private _host: HTMLElement,\n    private _pane: HTMLElement,\n    private _config: ImmutableObject<OverlayConfig>,\n    private _ngZone: NgZone,\n    private _keyboardDispatcher: OverlayKeyboardDispatcher,\n    private _document: Document,\n    private _location: Location,\n    private _outsideClickDispatcher: OverlayOutsideClickDispatcher,\n    private _animationsDisabled = false,\n  ) {\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    // Insert the host into the DOM before attaching the portal, otherwise\n    // the animations module will skip animations on repeat attachments.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    const attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n\n    // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n    if (typeof attachResult?.onDestroy === 'function') {\n      // In most cases we control the portal and we know when it is being detached so that\n      // we can finish the disposal process. The exception is if the user passes in a custom\n      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n      // `detach` here instead of `dispose`, because we don't know if the user intends to\n      // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n      attachResult.onDestroy(() => {\n        if (this.hasAttached()) {\n          // We have to delay the `detach` call, because detaching immediately prevents\n          // other destroy hooks from running. This is likely a framework bug similar to\n          // https://github.com/angular/angular/issues/46119\n          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n        }\n      });\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this._disposeBackdrop(this._backdropElement);\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n    this._host?.remove();\n\n    this._previousHostParent = this._pane = this._host = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents(): Observable<MouseEvent> {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._animationsDisabled) {\n      this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n    }\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    const backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    if (this._animationsDisabled) {\n      this._disposeBackdrop(backdropToDetach);\n      return;\n    }\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', this._backdropTransitionendHandler);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    this._backdropTimeout = this._ngZone.runOutsideAngular(() =>\n      setTimeout(() => {\n        this._disposeBackdrop(backdropToDetach);\n      }, 500),\n    );\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classes = coerceArray(cssClasses || []).filter(c => !!c);\n\n    if (classes.length) {\n      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n    }\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._host.remove();\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n\n  /** Removes a backdrop element from the DOM. */\n  private _disposeBackdrop(backdrop: HTMLElement | null) {\n    if (backdrop) {\n      backdrop.removeEventListener('click', this._backdropClickHandler);\n      backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n      backdrop.remove();\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement === backdrop) {\n        this._backdropElement = null;\n      }\n    }\n\n    if (this._backdropTimeout) {\n      clearTimeout(this._backdropTimeout);\n      this._backdropTimeout = undefined;\n    }\n  }\n}\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayRef} from '../overlay-ref';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin =\n  | ElementRef\n  | Element\n  | (Point & {\n      width?: number;\n      height?: number;\n    });\n\n/** Equivalent of `ClientRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<ClientRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: Dimensions;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: Dimensions;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: Dimensions;\n\n  /** Cached container dimensions */\n  private _containerRect: Dimensions;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private readonly _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number; y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: FlexibleConnectedPositionStrategyOrigin,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    private _platform: Platform,\n    private _overlayContainer: OverlayContainer,\n  ) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    if (\n      this._overlayRef &&\n      overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin, the overlay and the container to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n    const containerRect = this._containerRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n          fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    const lastPosition = this._lastPosition;\n\n    if (lastPosition) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n      this._applyPosition(lastPosition, originPoint);\n    } else {\n      this.apply();\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(\n    originRect: Dimensions,\n    containerRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    // When zooming in Safari the container rectangle contains negative values for the position\n    // and we need to re-add them to the calculated coordinates.\n    if (containerRect.left < 0) {\n      x -= containerRect.left;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    // Additionally, when zooming in Safari this fixes the vertical position.\n    if (containerRect.top < 0) {\n      y -= containerRect.top;\n    }\n\n    return {x, y};\n  }\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n    originPoint: Point,\n    overlayRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(\n    point: Point,\n    rawOverlayRect: Dimensions,\n    viewport: Dimensions,\n    position: ConnectedPosition,\n  ): OverlayFit {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlay at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: Dimensions) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit =\n        fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit =\n        fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param rawOverlayRect Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(\n    start: Point,\n    rawOverlayRect: Dimensions,\n    scrollPosition: ViewportScrollPosition,\n  ): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y,\n      };\n    }\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> = this._boundingBox!.querySelectorAll(\n      this._transformOriginSelector,\n    );\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.bottom - origin.y + viewport.top,\n        origin.y,\n      );\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n      (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n      (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.right - origin.x + viewport.left,\n        origin.x,\n      );\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stretches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds = this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): Dimensions {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin,\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breaking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  private _getOriginRect(): Dimensions {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width,\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurements determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: Dimensions;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: Dimensions;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(\n  destination: CSSStyleDeclaration,\n  source: CSSStyleDeclaration,\n): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number | string | null | undefined): number | null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect: Dimensions): Dimensions {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height),\n  };\n}\n\nexport const STANDARD_DROPDOWN_BELOW_POSITIONS: ConnectedPosition[] = [\n  {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n  {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top'},\n  {originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom'},\n];\n\nexport const STANDARD_DROPDOWN_ADJACENT_POSITIONS: ConnectedPosition[] = [\n  {originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top'},\n  {originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top'},\n  {originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom'},\n];\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '../overlay-ref';\nimport {PositionStrategy} from './position-strategy';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n  private _cssPosition = 'static';\n  private _topOffset = '';\n  private _bottomOffset = '';\n  private _alignItems = '';\n  private _xPosition = '';\n  private _xOffset = '';\n  private _width = '';\n  private _height = '';\n  private _isDisposed = false;\n\n  attach(overlayRef: OverlayRef): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'left';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'right';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the start of the viewport, depending on the overlay direction.\n   * This will be to the left in LTR layouts and to the right in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  start(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'start';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the end of the viewport, depending on the overlay direction.\n   * This will be to the right in LTR layouts and to the left in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  end(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._xPosition = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally =\n      (width === '100%' || width === '100vw') &&\n      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically =\n      (height === '100%' || height === '100vh') &&\n      (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    const xPosition = this._xPosition;\n    const xOffset = this._xOffset;\n    const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n    let marginLeft = '';\n    let marginRight = '';\n    let justifyContent = '';\n\n    if (shouldBeFlushHorizontally) {\n      justifyContent = 'flex-start';\n    } else if (xPosition === 'center') {\n      justifyContent = 'center';\n\n      if (isRtl) {\n        marginRight = xOffset;\n      } else {\n        marginLeft = xOffset;\n      }\n    } else if (isRtl) {\n      if (xPosition === 'left' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginRight = xOffset;\n      }\n    } else if (xPosition === 'left' || xPosition === 'start') {\n      justifyContent = 'flex-start';\n      marginLeft = xOffset;\n    } else if (xPosition === 'right' || xPosition === 'end') {\n      justifyContent = 'flex-end';\n      marginRight = xOffset;\n    }\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n    parentStyles.justifyContent = justifyContent;\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent =\n      parentStyles.alignItems =\n      styles.marginTop =\n      styles.marginBottom =\n      styles.marginLeft =\n      styles.marginRight =\n      styles.position =\n        '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayContainer} from '../overlay-container';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    private _platform: Platform,\n    private _overlayContainer: OverlayContainer,\n  ) {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(\n    origin: FlexibleConnectedPositionStrategyOrigin,\n  ): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(\n      origin,\n      this._viewportRuler,\n      this._document,\n      this._platform,\n      this._overlayContainer,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  ANIMATION_MODULE_TYPE,\n  Optional,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable({providedIn: 'root'})\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    public scrollStrategies: ScrollStrategyOptions,\n    private _overlayContainer: OverlayContainer,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _positionBuilder: OverlayPositionBuilder,\n    private _keyboardDispatcher: OverlayKeyboardDispatcher,\n    private _injector: Injector,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) private _document: any,\n    private _directionality: Directionality,\n    private _location: Location,\n    private _outsideClickDispatcher: OverlayOutsideClickDispatcher,\n    @Inject(ANIMATION_MODULE_TYPE) @Optional() private _animationsModuleType?: string,\n  ) {}\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(\n      portalOutlet,\n      host,\n      pane,\n      overlayConfig,\n      this._ngZone,\n      this._keyboardDispatcher,\n      this._document,\n      this._location,\n      this._outsideClickDispatcher,\n      this._animationsModuleType === 'NoopAnimations',\n    );\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(\n      pane,\n      this._componentFactoryResolver,\n      this._appRef,\n      this._injector,\n      this._document,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './position/flexible-connected-position-strategy';\nimport {RepositionScrollStrategy, ScrollStrategy} from './scroll/index';\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n  },\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'cdk-connected-overlay-scroll-strategy',\n);\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n  standalone: true,\n})\nexport class CdkOverlayOrigin {\n  constructor(\n    /** Reference to the element on which the directive is applied. */\n    public elementRef: ElementRef,\n  ) {}\n}\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay',\n  standalone: true,\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _attachSubscription = Subscription.EMPTY;\n  private _detachSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n  private _disposeOnNavigation = false;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin')\n  origin: CdkOverlayOrigin | FlexibleConnectedPositionStrategyOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number {\n    return this._offsetX;\n  }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() {\n    return this._offsetY;\n  }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string | string[];\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether the overlay can be closed by user interaction. */\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input({alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute})\n  hasBackdrop: boolean = false;\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input({alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute})\n  lockPosition: boolean = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input({alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute})\n  flexibleDimensions: boolean = false;\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input({alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute})\n  growAfterOpen: boolean = false;\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input({alias: 'cdkConnectedOverlayPush', transform: booleanAttribute}) push: boolean = false;\n\n  /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */\n  @Input({alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute})\n  get disposeOnNavigation(): boolean {\n    return this._disposeOnNavigation;\n  }\n  set disposeOnNavigation(value: boolean) {\n    this._disposeOnNavigation = value;\n  }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() readonly positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() readonly attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() readonly detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() readonly overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\n  @Output() readonly overlayOutsideClick = new EventEmitter<MouseEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n    private _overlay: Overlay,\n    templateRef: TemplateRef<any>,\n    viewContainerRef: ViewContainerRef,\n    @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    @Optional() private _dir: Directionality,\n  ) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = (this._position =\n      this.positionStrategy || this._createPositionStrategy());\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop,\n      disposeOnNavigation: this.disposeOnNavigation,\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay\n      .position()\n      .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  private _getFlexibleConnectedPositionStrategyOrigin(): FlexibleConnectedPositionStrategyOrigin {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef;\n    } else {\n      return this.origin;\n    }\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe();\n\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this.positionChange.emit(position);\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n}\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(\n  overlay: Overlay,\n): () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {NgModule} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n})\nexport class OverlayModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any, platform: Platform) {\n    super(_document, platform);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected override _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      const _document = this._document as any;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    const _document = this._document as any;\n\n    return (\n      _document.fullscreenElement ||\n      _document.webkitFullscreenElement ||\n      _document.mozFullScreenElement ||\n      _document.msFullscreenElement ||\n      null\n    );\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  readonly close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  overlayPanelClass?: string | string[];\n  hasBackdrop?: boolean;\n  readonly panelId?: string;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  AfterViewInit,\n  ChangeDetectorRef,\n  booleanAttribute,\n} from '@angular/core';\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MatMenuPanel, MAT_MENU_PANEL} from './menu-panel';\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n@Component({\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n    '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n    '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem implements FocusableOption, AfterViewInit, OnDestroy {\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  /** Whether the menu item is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Whether ripples are disabled on the menu item. */\n  @Input({transform: booleanAttribute}) disableRipple: boolean = false;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Stream that emits when the menu item is focused. */\n  readonly _focused = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    document: any,\n    focusMonitor: FocusMonitor,\n    parentMenu: MatMenuPanel<MatMenuItem> | undefined,\n    changeDetectorRef: ChangeDetectorRef,\n  );\n\n  /**\n   * @deprecated `document`, `changeDetectorRef` and `focusMonitor` to become required.\n   * @breaking-change 12.0.0\n   */\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    document?: any,\n    focusMonitor?: FocusMonitor,\n    parentMenu?: MatMenuPanel<MatMenuItem>,\n    changeDetectorRef?: ChangeDetectorRef,\n  );\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) private _document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>,\n    private _changeDetectorRef?: ChangeDetectorRef,\n  ) {\n    _parentMenu?.addItem?.(this);\n  }\n\n  /** Focuses the menu item. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n\n    this._focused.next(this);\n  }\n\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element, so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n    this._focused.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const clone = this._elementRef.nativeElement.cloneNode(true) as HTMLElement;\n    const icons = clone.querySelectorAll('mat-icon, .material-icons');\n\n    // Strip away icons, so they don't show up in the text.\n    for (let i = 0; i < icons.length; i++) {\n      icons[i].remove();\n    }\n\n    return clone.textContent?.trim() || '';\n  }\n\n  _setHighlighted(isHighlighted: boolean) {\n    // We need to mark this for check for the case where the content is coming from a\n    // `matMenuContent` whose change detection tree is at the declaration position,\n    // not the insertion position. See #23175.\n    // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n    this._highlighted = isHighlighted;\n    this._changeDetectorRef?.markForCheck();\n  }\n\n  _setTriggersSubmenu(triggersSubmenu: boolean) {\n    // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n    this._triggersSubmenu = triggersSubmenu;\n    this._changeDetectorRef?.markForCheck();\n  }\n\n  _hasFocus(): boolean {\n    return this._document && this._document.activeElement === this._getHostElement();\n  }\n}\n", "<ng-content select=\"mat-icon, [matMenuItemIcon]\"></ng-content>\n<span class=\"mat-mdc-menu-item-text\"><ng-content></ng-content></span>\n<div class=\"mat-mdc-menu-ripple\" matRipple\n     [matRippleDisabled]=\"disableRipple || disabled\"\n     [matRippleTrigger]=\"_getHostElement()\">\n</div>\n\n@if (_triggersSubmenu) {\n     <svg\n       class=\"mat-mdc-menu-submenu-icon\"\n       viewBox=\"0 0 5 10\"\n       focusable=\"false\"\n       aria-hidden=\"true\"><polygon points=\"0,0 5,5 0,10\"/></svg>\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nexport function throwMatMenuRecursiveError() {\n  throw Error(\n    `matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n      `not a parent of the trigger or move the trigger outside of the menu.`,\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_MENU_CONTENT = new InjectionToken<MatMenuContent>('MatMenuContent');\n\n/** Menu content that will be rendered lazily once the menu is opened. */\n@Directive({\n  selector: 'ng-template[matMenuContent]',\n  providers: [{provide: MAT_MENU_CONTENT, useExisting: MatMenuContent}],\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  readonly _attached = new Subject<void>();\n\n  constructor(\n    template: TemplateRef<any>,\n    componentFactoryResolver: ComponentFactoryResolver,\n    appRef: ApplicationRef,\n    injector: Injector,\n    viewContainerRef: ViewContainerRef,\n    document: any,\n    changeDetectorRef: ChangeDetectorRef,\n  );\n\n  /**\n   * @deprecated `changeDetectorRef` is now a required parameter.\n   * @breaking-change 9.0.0\n   */\n  constructor(\n    template: TemplateRef<any>,\n    componentFactoryResolver: ComponentFactoryResolver,\n    appRef: ApplicationRef,\n    injector: Injector,\n    viewContainerRef: ViewContainerRef,\n    document: any,\n    changeDetectorRef?: ChangeDetectorRef,\n  );\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef,\n  ) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(\n        this._document.createElement('div'),\n        this._componentFactoryResolver,\n        this._appRef,\n        this._injector,\n      );\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    this._changeDetectorRef?.markForCheck();\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)',\n      }),\n    ),\n    transition(\n      'void => enter',\n      animate(\n        '120ms cubic-bezier(0, 0, 0.2, 1)',\n        style({\n          opacity: 1,\n          transform: 'scale(1)',\n        }),\n      ),\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0}))),\n  ]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ]),\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n  ChangeDetectorRef,\n  booleanAttribute,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel, MAT_MENU_PANEL} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuContent, MAT_MENU_CONTENT} from './menu-content';\nimport {matMenuAnimations} from './menu-animations';\n\nlet menuPanelUid = 0;\n\n/** Reason why the menu was closed. */\nexport type MenuCloseReason = void | 'click' | 'keydown' | 'tab';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Class or list of classes to be applied to the menu's overlay panel. */\n  overlayPanelClass?: string | string[];\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS = new InjectionToken<MatMenuDefaultOptions>(\n  'mat-menu-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n\n@Component({\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  host: {\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    'ngSkipHydration': '',\n  },\n  animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n  providers: [{provide: MAT_MENU_PANEL, useExisting: MatMenu}],\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX;\n  private _yPosition: MenuPositionY;\n  private _firstItemFocusSubscription?: Subscription;\n  private _previousElevation: string;\n  private _elevationPrefix = 'mat-elevation-z';\n  private _baseElevation = 8;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  readonly _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class or list of classes to be added to the overlay panel. */\n  overlayPanelClass: string | string[];\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string;\n\n  /** aria-label for the menu panel. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** aria-labelledby for the menu panel. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** aria-describedby for the menu panel. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX {\n    return this._xPosition;\n  }\n  set xPosition(value: MenuPositionX) {\n    if (\n      value !== 'before' &&\n      value !== 'after' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY {\n    return this._yPosition;\n  }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem, {descendants: false}) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MAT_MENU_CONTENT) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input({transform: booleanAttribute}) overlapTrigger: boolean;\n\n  /** Whether the menu has a backdrop. */\n  @Input({transform: (value: any) => (value == null ? null : booleanAttribute(value))})\n  hasBackdrop?: boolean;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string {\n    return this.panelClass;\n  }\n  set classList(classes: string) {\n    this.panelClass = classes;\n  }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<MenuCloseReason> = new EventEmitter<MenuCloseReason>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() readonly close: EventEmitter<MenuCloseReason> = this.closed;\n\n  readonly panelId = `mat-menu-panel-${menuPanelUid++}`;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    ngZone: NgZone,\n    defaultOptions: MatMenuDefaultOptions,\n    changeDetectorRef: ChangeDetectorRef,\n  );\n\n  /**\n   * @deprecated `_changeDetectorRef` to become a required parameter.\n   * @breaking-change 15.0.0\n   */\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    ngZone: NgZone,\n    defaultOptions: MatMenuDefaultOptions,\n    changeDetectorRef?: ChangeDetectorRef,\n  );\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions,\n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    private _changeDetectorRef?: ChangeDetectorRef,\n  ) {\n    this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n    this._xPosition = defaultOptions.xPosition;\n    this._yPosition = defaultOptions.yPosition;\n    this.backdropClass = defaultOptions.backdropClass;\n    this.overlapTrigger = defaultOptions.overlapTrigger;\n    this.hasBackdrop = defaultOptions.hasBackdrop;\n  }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems)\n      .withWrap()\n      .withTypeAhead()\n      .withHomeAndEnd();\n    this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n\n    // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes\n      .pipe(\n        startWith(this._directDescendantItems),\n        switchMap(items => merge(...items.map((item: MatMenuItem) => item._focused))),\n      )\n      .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem as MatMenuItem));\n\n    this._directDescendantItems.changes.subscribe((itemsList: QueryList<MatMenuItem>) => {\n      // Move focus to another item, if the active item is removed from the list.\n      // We need to debounce the callback, because multiple items might be removed\n      // in quick succession.\n      const manager = this._keyManager;\n\n      if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n        const items = itemsList.toArray();\n        const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n\n        if (items[index] && !items[index].disabled) {\n          manager.setActiveItem(index);\n        } else {\n          manager.setNextItemActive();\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._directDescendantItems.destroy();\n    this.closed.complete();\n    this._firstItemFocusSubscription?.unsubscribe();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered))),\n    ) as Observable<MatMenuItem>;\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n        break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n        return;\n    }\n\n    // Don't allow the event to propagate if we've already handled it, or it may\n    // end up reaching other overlays that were opened earlier (see #22694).\n    event.stopPropagation();\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n    this._firstItemFocusSubscription?.unsubscribe();\n    this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      let menuPanel: HTMLElement | null = null;\n\n      if (this._directDescendantItems.length) {\n        // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n        // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n        // because the panel is inside an `ng-template`. We work around it by starting from one of\n        // the items and walking up the DOM.\n        menuPanel = this._directDescendantItems.first!._getHostElement().closest('[role=\"menu\"]');\n      }\n\n      // If an item in the menuPanel is already focused, avoid overriding the focus.\n      if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && menuPanel) {\n          menuPanel.focus();\n        }\n      }\n    });\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(this._baseElevation + depth, 24);\n    const newElevation = `${this._elevationPrefix}${elevation}`;\n    const customElevation = Object.keys(this._classList).find(className => {\n      return className.startsWith(this._elevationPrefix);\n    });\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n\n    // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n    this._changeDetectorRef?.markForCheck();\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n", "<ng-template>\n  <div\n    class=\"mat-mdc-menu-panel mat-mdc-elevation-specific\"\n    [id]=\"panelId\"\n    [ngClass]=\"_classList\"\n    (keydown)=\"_handleKeydown($event)\"\n    (click)=\"closed.emit('click')\"\n    [@transformMenu]=\"_panelAnimationState\"\n    (@transformMenu.start)=\"_onAnimationStart($event)\"\n    (@transformMenu.done)=\"_onAnimationDone($event)\"\n    tabindex=\"-1\"\n    role=\"menu\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"ariaLabelledby || null\"\n    [attr.aria-describedby]=\"ariaDescribedby || null\">\n    <div class=\"mat-mdc-menu-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  FocusMonitor,\n  FocusOrigin,\n  isFakeMousedownFromScreenReader,\n  isFakeTouchstartFromScreenReader,\n} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  inject,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, Observable, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu, MenuCloseReason} from './menu';\nimport {throwMatMenuRecursiveError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'mat-menu-scroll-strategy',\n);\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Directive applied to an element that should trigger a `mat-menu`. */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-mdc-menu-trigger',\n    '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n    '[attr.aria-expanded]': 'menuOpen',\n    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n    '(click)': '_handleClick($event)',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matMenuTrigger',\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n\n  /**\n   * We're specifically looking for a `MatMenu` here since the generic `MatMenuPanel`\n   * interface lacks some functionality around nested menus and animations.\n   */\n  private _parentMaterialMenu: MatMenu | undefined;\n\n  /**\n   * Cached value of the padding of the parent menu panel.\n   * Used to offset sub-menus to compensate for the padding.\n   */\n  private _parentInnerPadding: number | undefined;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = (event: TouchEvent) => {\n    if (!isFakeTouchstartFromScreenReader(event)) {\n      this._openedBy = 'touch';\n    }\n  };\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: Exclude<FocusOrigin, 'program' | null> | undefined = undefined;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel | null {\n    return this.menu;\n  }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel | null) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu(): MatMenuPanel | null {\n    return this._menu;\n  }\n  set menu(menu: MatMenuPanel | null) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n\n      this._menuCloseSubscription = menu.close.subscribe((reason: MenuCloseReason) => {\n        this._destroyMenu(reason);\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n\n    this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n  }\n  private _menu: MatMenuPanel | null;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(\n    overlay: Overlay,\n    element: ElementRef<HTMLElement>,\n    viewContainerRef: ViewContainerRef,\n    scrollStrategy: any,\n    parentMenu: MatMenuPanel,\n    menuItemInstance: MatMenuItem,\n    dir: Directionality,\n    focusMonitor: FocusMonitor,\n    ngZone: NgZone,\n  );\n\n  /**\n   * @deprecated `focusMonitor` will become a required parameter.\n   * @breaking-change 8.0.0\n   */\n  constructor(\n    overlay: Overlay,\n    element: ElementRef<HTMLElement>,\n    viewContainerRef: ViewContainerRef,\n    scrollStrategy: any,\n    parentMenu: MatMenuPanel,\n    menuItemInstance: MatMenuItem,\n    dir: Directionality,\n    focusMonitor?: FocusMonitor | null,\n  );\n\n  /**\n   * @deprecated `ngZone` will become a required parameter.\n   * @breaking-change 15.0.0\n   */\n  constructor(\n    overlay: Overlay,\n    element: ElementRef<HTMLElement>,\n    viewContainerRef: ViewContainerRef,\n    scrollStrategy: any,\n    parentMenu: MatMenuPanel,\n    menuItemInstance: MatMenuItem,\n    dir: Directionality,\n    focusMonitor: FocusMonitor,\n  );\n\n  constructor(\n    private _overlay: Overlay,\n    private _element: ElementRef<HTMLElement>,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n    @Inject(MAT_MENU_PANEL) @Optional() parentMenu: MatMenuPanel,\n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() @Self() private _menuItemInstance: MatMenuItem,\n    @Optional() private _dir: Directionality,\n    private _focusMonitor: FocusMonitor | null,\n    private _ngZone?: NgZone,\n  ) {\n    this._scrollStrategy = scrollStrategy;\n    this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n\n    _element.nativeElement.addEventListener(\n      'touchstart',\n      this._handleTouchStart,\n      passiveEventListenerOptions,\n    );\n  }\n\n  ngAfterContentInit() {\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener(\n      'touchstart',\n      this._handleTouchStart,\n      passiveEventListenerOptions,\n    );\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    const menu = this.menu;\n\n    if (this._menuOpen || !menu) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay(menu);\n    const overlayConfig = overlayRef.getConfig();\n    const positionStrategy = overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy;\n\n    this._setPosition(menu, positionStrategy);\n    overlayConfig.hasBackdrop =\n      menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n    overlayRef.attach(this._getPortal(menu));\n\n    if (menu.lazyContent) {\n      menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu(menu);\n\n    if (menu instanceof MatMenu) {\n      menu._startAnimation();\n      menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n        // Re-adjust the position without locking when the amount of items\n        // changes so that the overlay is allowed to pick a new optimal position.\n        positionStrategy.withLockedPosition(false).reapplyLastPosition();\n        positionStrategy.withLockedPosition(true);\n      });\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu?.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /**\n   * Updates the position of the menu to ensure that it fits all options within the viewport.\n   */\n  updatePosition(): void {\n    this._overlayRef?.updatePosition();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu(reason: MenuCloseReason) {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = undefined;\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached),\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false),\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n      menu?.lazyContent?.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(menu: MatMenuPanel): void {\n    menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    menu.direction = this.dir;\n    this._setMenuElevation(menu);\n    menu.focusFirstItem(this._openedBy || 'program');\n    this._setIsMenuOpen(true);\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(menu: MatMenuPanel): void {\n    if (menu.setElevation) {\n      let depth = 0;\n      let parentMenu = menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      menu.setElevation(depth);\n    }\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    if (isOpen !== this._menuOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._setHighlighted(isOpen);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(menu: MatMenuPanel): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig(menu);\n      this._subscribeToPositions(\n        menu,\n        config.positionStrategy as FlexibleConnectedPositionStrategy,\n      );\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(menu: MatMenuPanel): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay\n        .position()\n        .flexibleConnectedTo(this._element)\n        .withLockedPosition()\n        .withGrowAfterOpen()\n        .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir,\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(menu: MatMenuPanel, position: FlexibleConnectedPositionStrategy) {\n    if (menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        // @breaking-change 15.0.0 Remove null check for `ngZone`.\n        // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n        // updating something in the view so we need to bring it back in.\n        if (this._ngZone) {\n          this._ngZone.run(() => menu.setPositionClasses!(posX, posY));\n        } else {\n          menu.setPositionClasses!(posX, posY);\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(menu: MatMenuPanel, positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n      menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n      menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      if (this._parentMaterialMenu) {\n        if (this._parentInnerPadding == null) {\n          const firstItem = this._parentMaterialMenu.items.first;\n          this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n        }\n\n        offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n      }\n    } else if (!menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY,\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY,\n      },\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : observableOf();\n    const hover = this._parentMaterialMenu\n      ? this._parentMaterialMenu._hovered().pipe(\n          filter(active => active !== this._menuItemInstance),\n          filter(() => this._menuOpen),\n        )\n      : observableOf();\n\n    return merge(backdrop, parentClose as Observable<MenuCloseReason>, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Pressing enter on the trigger will trigger the click handler later.\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n\n    if (\n      this.triggersSubmenu() &&\n      ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n        (keyCode === LEFT_ARROW && this.dir === 'rtl'))\n    ) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMaterialMenu\n      ._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler),\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu!._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(menu: MatMenuPanel): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n      this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuContent} from './menu-content';\nimport {MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule],\n  exports: [\n    CdkScrollableModule,\n    MatMenu,\n    MatCommonModule,\n    MatMenuItem,\n    MatMenuContent,\n    MatMenuTrigger,\n  ],\n  declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatMenuModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["throwNullPortalError", "Error", "throwPortalAlreadyAttachedError", "throwPortalOutletAlreadyDisposedError", "throwUnknownPortalTypeError", "throwNullPortalOutletError", "throwNoPortalAttachedError", "Portal", "attach", "host", "ngDevMode", "hasAttached", "_attachedHost", "detach", "isAttached", "setAttachedHost", "ComponentPortal", "constructor", "component", "viewContainerRef", "injector", "componentFactoryResolver", "projectableNodes", "TemplatePortal", "templateRef", "context", "origin", "elementRef", "undefined", "DomPortal", "element", "ElementRef", "nativeElement", "BasePortalOutlet", "_isDisposed", "attachDomPortal", "_attachedPortal", "portal", "attachComponentPortal", "attachTemplatePortal", "_invokeDisposeFn", "dispose", "setDisposeFn", "fn", "_disposeFn", "DomPortalOutlet", "BasePortalOutlet", "constructor", "outletElement", "_componentFactoryResolver", "_appRef", "_defaultInjector", "_document", "attachDomPortal", "portal", "ngDevMode", "Error", "element", "parentNode", "anchorNode", "createComment", "insertBefore", "appendChild", "_attachedPortal", "setDisposeFn", "replaceChild", "attachComponentPortal", "resolver", "componentFactoryResolver", "componentFactory", "resolveComponentFactory", "component", "componentRef", "viewContainerRef", "createComponent", "length", "injector", "projectableNodes", "undefined", "destroy", "create", "Injector", "NULL", "attachView", "hostView", "viewCount", "detachView", "_getComponentRootNode", "attachTemplatePortal", "viewContainer", "viewRef", "createEmbeddedView", "templateRef", "context", "rootNodes", "forEach", "rootNode", "detectChanges", "index", "indexOf", "remove", "dispose", "CdkPortal", "TemplatePortal", "constructor", "templateRef", "viewContainerRef", "TemplateRef", "ViewContainerRef", "selectors", "exportAs", "features", "Directive", "args", "selector", "TemplatePortalDirective", "t", "ɵdir", "provide", "useExisting", "providers", "CdkPortalOutlet", "BasePortalOutlet", "_componentFactoryResolver", "_viewContainerRef", "_document", "_isInitialized", "attached", "EventEmitter", "attachDomPortal", "portal", "ngDevMode", "Error", "element", "parentNode", "anchorNode", "createComment", "setAttachedHost", "insertBefore", "_getRootNode", "appendChild", "_attachedPortal", "setDisposeFn", "replaceChild", "hasAttached", "detach", "attach", "attachedRef", "_attachedRef", "ngOnInit", "ngOnDestroy", "dispose", "attachComponentPortal", "resolver", "componentFactoryResolver", "componentFactory", "resolveComponentFactory", "component", "ref", "createComponent", "length", "injector", "projectableNodes", "undefined", "hostView", "rootNodes", "destroy", "emit", "attachTemplatePortal", "viewRef", "createEmbeddedView", "context", "clear", "nativeElement", "nodeType", "ELEMENT_NODE", "ɵfac", "CdkPortalOutlet_Factory", "ComponentFactoryResolver", "DOCUMENT", "inputs", "outputs", "Inject", "Output", "PortalHostDirective", "PortalModule", "ɵmod", "declarations", "exports", "NgModule", "scrollBehaviorSupported", "supportsScrollBehavior", "BlockScrollStrategy", "constructor", "_viewportRuler", "document", "_previousHTMLStyles", "top", "left", "_isEnabled", "_document", "attach", "enable", "_canBeEnabled", "root", "documentElement", "_previousScrollPosition", "getViewportScrollPosition", "style", "coerceCssPixelValue", "classList", "add", "disable", "html", "body", "htmlStyle", "bodyStyle", "previousHtmlScrollBehavior", "scrollBehavior", "previousBodyScrollBehavior", "remove", "window", "scroll", "contains", "viewport", "getViewportSize", "scrollHeight", "height", "scrollWidth", "width", "getMatScrollStrategyAlreadyAttachedError", "Error", "CloseScrollStrategy", "_scrollDispatcher", "_ngZone", "_config", "_scrollSubscription", "_detach", "_overlayRef", "hasAttached", "run", "detach", "overlayRef", "ngDevMode", "stream", "scrolled", "pipe", "filter", "scrollable", "overlayElement", "getElementRef", "nativeElement", "threshold", "_initialScrollPosition", "subscribe", "scrollPosition", "Math", "abs", "updatePosition", "unsubscribe", "NoopScrollStrategy", "isElementScrolledOutsideView", "element", "scrollContainers", "some", "containerBounds", "outsideAbove", "bottom", "outsideBelow", "outsideLeft", "right", "outsideRight", "isElementClippedByScrolling", "scrollContainerRect", "clippedAbove", "clippedBelow", "clippedLeft", "clippedRight", "RepositionScrollStrategy", "throttle", "scrollThrottle", "autoClose", "overlayRect", "getBoundingClientRect", "parentRects", "ScrollStrategyOptions", "noop", "close", "config", "block", "reposition", "ɵfac", "ScrollStrategyOptions_Factory", "t", "ɵɵinject", "ScrollDispatcher", "ViewportRuler", "NgZone", "DOCUMENT", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "OverlayConfig", "scrollStrategy", "panelClass", "hasBackdrop", "backdropClass", "disposeOnNavigation", "configKeys", "Object", "keys", "key", "undefined", "ConnectedOverlayPositionChange", "constructor", "connectionPair", "scrollableViewProperties", "validateVerticalPosition", "property", "value", "Error", "validateHorizontalPosition", "BaseOverlayDispatcher", "document", "_attachedOverlays", "_document", "ngOnDestroy", "detach", "add", "overlayRef", "remove", "push", "index", "indexOf", "splice", "length", "ɵfac", "BaseOverlayDispatcher_Factory", "t", "ɵɵinject", "DOCUMENT", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "OverlayKeyboardDispatcher", "_ngZone", "_keydownListener", "event", "overlays", "i", "_keydownEvents", "observers", "keydownEvents", "run", "next", "_isAttached", "runOutsideAngular", "body", "addEventListener", "removeEventListener", "OverlayKeyboardDispatcher_Factory", "NgZone", "Optional", "OverlayOutsideClickDispatcher", "_platform", "_cursorStyleIsSet", "_pointerDownListener", "_pointerDownEventTarget", "_getEventTarget", "_clickListener", "target", "origin", "type", "slice", "_outsidePointerEvents", "hasAttached", "overlayElement", "contains", "outsidePointerEvents", "_addEventListeners", "IOS", "_cursorOriginalValue", "style", "cursor", "OverlayOutsideClickDispatcher_Factory", "Platform", "OverlayContainer", "_containerElement", "getContainerElement", "_createContainer", "containerClass", "isBrowser", "_isTestEnvironment", "oppositePlatformContainers", "querySelectorAll", "container", "createElement", "classList", "setAttribute", "appendChild", "OverlayContainer_Factory", "OverlayRef", "_portalOutlet", "_host", "_pane", "_config", "_keyboardDispatcher", "_location", "_outsideClickDispatcher", "_animationsDisabled", "_backdropElement", "_backdropClick", "Subject", "_attachments", "_detachments", "_locationChanges", "Subscription", "EMPTY", "_backdropClickHandler", "_backdropTransitionendHandler", "_disposeBackdrop", "scrollStrategy", "_scrollStrategy", "attach", "_positionStrategy", "positionStrategy", "backdropElement", "hostElement", "portal", "parentElement", "_previousHostParent", "attachResult", "_updateStackingOrder", "_updateElementSize", "_updateElementDirection", "enable", "onStable", "pipe", "take", "subscribe", "updatePosition", "_togglePointerEvents", "hasBackdrop", "_attachBackdrop", "panelClass", "_toggleClasses", "disposeOnNavigation", "dispose", "onDestroy", "Promise", "resolve", "then", "detachBackdrop", "disable", "detachmentResult", "_detachContentWhenStable", "unsubscribe", "isAttached", "_disposeScrollStrategy", "complete", "backdropClick", "attachments", "detachments", "getConfig", "apply", "updatePositionStrategy", "strategy", "updateSize", "sizeConfig", "setDirection", "dir", "direction", "addPanelClass", "classes", "removePanelClass", "getDirection", "updateScrollStrategy", "width", "coerceCssPixelValue", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "enablePointer", "pointerEvents", "showingClass", "backdropClass", "insertBefore", "requestAnimationFrame", "nextSibling", "parentNode", "backdropToDetach", "_backdropTimeout", "setTimeout", "element", "cssClasses", "isAdd", "coerceArray", "filter", "c", "subscription", "takeUntil", "merge", "children", "backdrop", "clearTimeout", "undefined", "boundingBoxClass", "cssUnitPattern", "FlexibleConnectedPositionStrategy", "positions", "_preferredPositions", "connectedTo", "_viewportRuler", "_overlayContainer", "_lastBoundingBoxSize", "_isPushed", "_canPush", "_growAfterOpen", "_hasFlexibleDimensions", "_positionLocked", "_viewportMargin", "_scrollables", "_positionChanges", "_resizeSubscription", "_offsetX", "_offsetY", "_appliedPanelClasses", "positionChanges", "setOrigin", "_overlayRef", "ngDevMode", "_validatePositions", "_boundingBox", "_isDisposed", "_isInitialRender", "_lastPosition", "change", "reapplyLastPosition", "_clearPanelClasses", "_resetOverlayElementStyles", "_resetBoundingBoxStyles", "_viewportRect", "_getNarrowedViewportRect", "_originRect", "_getOriginRect", "_overlayRect", "getBoundingClientRect", "_containerRect", "originRect", "overlayRect", "viewportRect", "containerRect", "flexibleFits", "fallback", "pos", "originPoint", "_getOriginPoint", "overlayPoint", "_getOverlayPoint", "overlayFit", "_getOverlayFit", "isCompletelyWithinViewport", "_applyPosition", "_canFitWithFlexibleDimensions", "position", "boundingBoxRect", "_calculateBoundingBoxRect", "visibleArea", "bestFit", "bestScore", "fit", "score", "weight", "_previousPushAmount", "extendStyles", "top", "left", "right", "bottom", "alignItems", "justifyContent", "lastPosition", "withScrollableContainers", "scrollables", "withPositions", "withViewportMargin", "margin", "withFlexibleDimensions", "flexibleDimensions", "withGrowAfterOpen", "growAfterOpen", "withPush", "canPush", "withLockedPosition", "isLocked", "_origin", "withDefaultOffsetX", "offset", "withDefaultOffsetY", "withTransformOriginOn", "selector", "_transformOriginSelector", "x", "originX", "startX", "_isRtl", "endX", "y", "originY", "overlayStartX", "overlayX", "overlayStartY", "overlayY", "point", "rawOverlayRect", "viewport", "overlay", "getRoundedBoundingClientRect", "offsetX", "_getOffset", "offsetY", "leftOverflow", "rightOverflow", "topOverflow", "bottomOverflow", "visibleWidth", "_subtractOverflows", "visibleHeight", "fitsInViewportVertically", "fitsInViewportHorizontally", "availableHeight", "availableWidth", "getPixelValue", "verticalFit", "horizontalFit", "_pushOverlayOnScreen", "start", "scrollPosition", "overflowRight", "Math", "max", "overflowBottom", "overflowTop", "overflowLeft", "pushX", "pushY", "_setTransformOrigin", "_setOverlayElementStyles", "_setBoundingBoxStyles", "_addPanelClasses", "_getScrollVisibility", "changeEvent", "elements", "xOrigin", "yOrigin", "transformOrigin", "isRtl", "smallestDistanceToViewportEdge", "min", "previousHeight", "isBoundedByRightViewportEdge", "isBoundedByLeftViewportEdge", "previousWidth", "styles", "_hasExactPosition", "transform", "hasExactPosition", "hasFlexibleDimensions", "config", "getViewportScrollPosition", "_getExactOverlayY", "_getExactOverlayX", "transformString", "trim", "documentHeight", "documentElement", "clientHeight", "horizontalStyleProperty", "documentWidth", "clientWidth", "originBounds", "overlayBounds", "scrollContainerBounds", "map", "scrollable", "getElementRef", "nativeElement", "isOriginClipped", "isElementClippedByScrolling", "isOriginOutsideView", "isElementScrolledOutsideView", "isOverlayClipped", "isOverlayOutsideView", "overflows", "reduce", "currentValue", "currentOverflow", "axis", "forEach", "pair", "cssClass", "ElementRef", "Element", "destination", "source", "key", "hasOwnProperty", "input", "units", "split", "parseFloat", "clientRect", "floor", "wrapperClass", "GlobalPositionStrategy", "constructor", "_cssPosition", "_topOffset", "_bottomOffset", "_alignItems", "_xPosition", "_xOffset", "_width", "_height", "_isDisposed", "attach", "overlayRef", "config", "getConfig", "_overlayRef", "width", "updateSize", "height", "hostElement", "classList", "add", "top", "value", "left", "bottom", "right", "start", "end", "centerHorizontally", "offset", "centerVertically", "apply", "hasAttached", "styles", "overlayElement", "style", "parentStyles", "maxWidth", "maxHeight", "shouldBeFlushHorizontally", "shouldBeFlushVertically", "xPosition", "xOffset", "isRtl", "direction", "marginLeft", "marginRight", "justifyContent", "position", "marginTop", "marginBottom", "alignItems", "dispose", "parent", "remove", "OverlayPositionBuilder", "_viewportRuler", "_document", "_platform", "_overlayContainer", "global", "flexibleConnectedTo", "origin", "FlexibleConnectedPositionStrategy", "ɵfac", "OverlayPositionBuilder_Factory", "t", "ɵɵinject", "ViewportRuler", "DOCUMENT", "Platform", "OverlayContainer", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "nextUniqueId", "Overlay", "scrollStrategies", "_componentFactoryResolver", "_positionBuilder", "_keyboardDispatcher", "_injector", "_ngZone", "_directionality", "_location", "_outsideClickDispatcher", "_animationsModuleType", "create", "host", "_createHostElement", "pane", "_createPaneElement", "portalOutlet", "_createPortalOutlet", "overlayConfig", "OverlayConfig", "OverlayRef", "createElement", "id", "appendChild", "getContainerElement", "_appRef", "get", "ApplicationRef", "DomPortalOutlet", "ScrollStrategyOptions", "ComponentFactoryResolver", "OverlayKeyboardDispatcher", "Injector", "NgZone", "Directionality", "Location", "OverlayOutsideClickDispatcher", "ANIMATION_MODULE_TYPE", "Optional", "defaultPositionList", "originX", "originY", "overlayX", "overlayY", "CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY", "InjectionToken", "CdkOverlayOrigin", "elementRef", "ɵɵdirectiveInject", "ElementRef", "ɵɵdefineDirective", "type", "selectors", "exportAs", "standalone", "Directive", "args", "selector", "CdkConnectedOverlay", "offsetX", "_offsetX", "_position", "_updatePositionStrategy", "offsetY", "_offsetY", "disposeOnNavigation", "_disposeOnNavigation", "_overlay", "templateRef", "viewContainerRef", "scrollStrategyFactory", "_dir", "_backdropSubscription", "Subscription", "EMPTY", "_attachSubscription", "_detachSubscription", "_positionSubscription", "viewportMargin", "open", "disableClose", "hasBackdrop", "lockPosition", "flexibleDimensions", "growAfterOpen", "push", "backdropClick", "EventEmitter", "positionChange", "detach", "overlayKeydown", "overlayOutsideClick", "_templatePortal", "TemplatePortal", "_scrollStrategyFactory", "scrollStrategy", "dir", "ngOnDestroy", "unsubscribe", "ngOnChanges", "changes", "minWidth", "minHeight", "_attachOverlay", "_detachOverlay", "_createOverlay", "positions", "length", "_buildConfig", "attachments", "subscribe", "emit", "detachments", "keydownEvents", "event", "next", "keyCode", "ESCAPE", "hasModifierKey", "preventDefault", "outsidePointerEvents", "positionStrategy", "_createPositionStrategy", "backdropClass", "panelClass", "map", "currentPosition", "undefined", "setOrigin", "_getFlexibleConnectedPositionStrategyOrigin", "withPositions", "withFlexibleDimensions", "withPush", "withGrowAfterOpen", "withViewportMargin", "withLockedPosition", "withTransformOriginOn", "transformOriginSelector", "strategy", "observers", "positionChanges", "pipe", "takeWhile", "CdkConnectedOverlay_Factory", "TemplateRef", "ViewContainerRef", "inputs", "booleanAttribute", "outputs", "features", "ɵɵInputTransformsFeature", "ɵɵNgOnChangesFeature", "Input", "alias", "transform", "Output", "CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY", "overlay", "reposition", "CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER", "provide", "deps", "useFactory", "OverlayModule", "ɵmod", "ɵɵdefineNgModule", "imports", "BidiModule", "PortalModule", "ScrollingModule", "exports", "ɵinj", "ɵɵdefineInjector", "providers", "NgModule", "FullscreenOverlayContainer", "platform", "_fullScreenEventName", "_fullScreenListener", "removeEventListener", "_createContainer", "_adjustParentForFullscreenChange", "_addFullscreenChangeListener", "_containerElement", "fullscreenElement", "getFullscreenElement", "body", "fn", "eventName", "_getEventName", "addEventListener", "fullscreenEnabled", "webkitFullscreenEnabled", "mozFullScreenEnabled", "msFullscreenEnabled", "webkitFullscreenElement", "mozFullScreenElement", "msFullscreenElement", "FullscreenOverlayContainer_Factory", "_c0", "MatMenuItem_Conditional_4_Template", "rf", "ctx", "_c1", "_c2", "MatMenu_ng_template_0_Template", "_r2", "ctx_r1", "_handleKeydown", "$event", "MatMenu_ng_template_0_Template_div_click_0_listener", "ctx_r3", "closed", "emit", "MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener", "ctx_r4", "_onAnimationStart", "MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener", "ctx_r5", "_onAnimationDone", "ctx_r0", "_classList", "_panelAnimationState", "ariaLabelledby", "ariaDescribedby", "_c3", "MAT_MENU_PANEL", "InjectionToken", "MatMenuItem", "constructor", "_elementRef", "_document", "_focusMonitor", "_parentMenu", "_changeDetectorRef", "role", "disabled", "disableRipple", "_hovered", "Subject", "_focused", "_highlighted", "_triggersSubmenu", "addItem", "focus", "origin", "options", "focusVia", "_getHostElement", "next", "ngAfterViewInit", "monitor", "ngOnDestroy", "stopMonitoring", "removeItem", "complete", "_getTabIndex", "nativeElement", "_checkDisabled", "event", "preventDefault", "stopPropagation", "_handleMouseEnter", "getLabel", "clone", "cloneNode", "icons", "querySelectorAll", "i", "length", "remove", "textContent", "trim", "_setHighlighted", "isHighlighted", "markForCheck", "_setTriggersSubmenu", "triggersSubmenu", "_hasFocus", "activeElement", "ElementRef", "DOCUMENT", "FocusMonitor", "ChangeDetectorRef", "ɵcmp", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatMenuItem_HostBindings", "MatMenuItem_mouseenter_HostBindingHandler", "booleanAttribute", "exportAs", "features", "dependencies", "MatRipple", "encapsulation", "changeDetection", "Component", "host", "ChangeDetectionStrategy", "OnPush", "ViewEncapsulation", "None", "template", "Inject", "Optional", "Input", "transform", "throwMatMenuInvalidPositionX", "Error", "throwMatMenuInvalidPositionY", "throwMatMenuRecursiveError", "MAT_MENU_CONTENT", "MatMenuContent", "_template", "_componentFactoryResolver", "_appRef", "_injector", "_viewContainerRef", "_attached", "attach", "context", "_portal", "TemplatePortal", "detach", "_outlet", "DomPortalOutlet", "createElement", "element", "elementRef", "parentNode", "insertBefore", "outletElement", "isAttached", "dispose", "ɵfac", "MatMenuContent_Factory", "t", "TemplateRef", "ComponentFactoryResolver", "ApplicationRef", "Injector", "ViewContainerRef", "provide", "useExisting", "Directive", "args", "selector", "providers", "matMenuAnimations", "transformMenu", "trigger", "state", "style", "opacity", "transition", "animate", "fadeInItems", "menuPanelUid", "MAT_MENU_DEFAULT_OPTIONS", "providedIn", "factory", "MAT_MENU_DEFAULT_OPTIONS_FACTORY", "overlapTrigger", "xPosition", "yPosition", "backdropClass", "MatMenu", "_xPosition", "value", "ngDevMode", "setPositionClasses", "_yPosition", "panelClass", "classes", "previousPanelClass", "_previousPanelClass", "split", "forEach", "className", "classList", "_ngZone", "defaultOptions", "_elevationPrefix", "_baseElevation", "_directDescendantItems", "QueryList", "_animationDone", "EventEmitter", "close", "panelId", "overlayPanelClass", "hasBackdrop", "ngOnInit", "ngAfterContentInit", "_updateDirectDescendants", "_keyManager", "FocusKeyManager", "withWrap", "withTypeAhead", "withHomeAndEnd", "tabOut", "subscribe", "changes", "pipe", "startWith", "switchMap", "items", "merge", "map", "item", "focusedItem", "updateActiveItem", "itemsList", "manager", "activeItem", "toArray", "index", "Math", "max", "min", "activeItemIndex", "setActiveItem", "setNextItemActive", "destroy", "_firstItemFocusSubscription", "unsubscribe", "itemChanges", "_item", "keyCode", "ESCAPE", "hasModifierKey", "LEFT_ARROW", "parentMenu", "direction", "RIGHT_ARROW", "UP_ARROW", "DOWN_ARROW", "setFocusOrigin", "onKeydown", "focusFirstItem", "onStable", "take", "menuPanel", "first", "closest", "contains", "document", "setFirstItemActive", "resetActiveItem", "setElevation", "depth", "elevation", "newElevation", "customElevation", "Object", "keys", "find", "startsWith", "_previousElevation", "posX", "posY", "_startAnimation", "_resetAnimation", "_isAnimating", "toState", "scrollTop", "_allItems", "reset", "filter", "notifyOnChanges", "MatMenu_Factory", "NgZone", "contentQueries", "MatMenu_ContentQueries", "dirIndex", "_t", "MatMenu_HostBindings", "outputs", "NgClass", "styles", "data", "animation", "animations", "ContentChildren", "descendants", "ariaLabel", "templateRef", "ViewChild", "lazyContent", "ContentChild", "Output", "MAT_MENU_SCROLL_STRATEGY", "MAT_MENU_SCROLL_STRATEGY_FACTORY", "overlay", "scrollStrategies", "reposition", "MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER", "deps", "Overlay", "useFactory", "passiveEventListenerOptions", "normalizePassiveListenerOptions", "passive", "MENU_PANEL_TOP_PADDING", "MatMenuTrigger", "_deprecatedMatMenuTriggerFor", "menu", "v", "_menu", "_menuCloseSubscription", "_parentMaterialMenu", "reason", "_destroyMenu", "_menuItemInstance", "_overlay", "_element", "scrollStrategy", "_dir", "_overlayRef", "_menuOpen", "_closingActionsSubscription", "Subscription", "EMPTY", "_hoverSubscription", "inject", "_handleTouchStart", "isFakeTouchstartFromScreenReader", "_openedBy", "undefined", "restoreFocus", "menuOpened", "onMenuOpen", "menuClosed", "onMenuClose", "_scrollStrategy", "addEventListener", "_handleHover", "removeEventListener", "menuOpen", "dir", "toggleMenu", "closeMenu", "openMenu", "overlayRef", "_createOverlay", "overlayConfig", "getConfig", "positionStrategy", "_setPosition", "_getPortal", "menuData", "_menuClosingActions", "_initMenu", "takeUntil", "withLockedPosition", "reapplyLastPosition", "updatePosition", "_setIsMenuOpen", "_setMenuElevation", "isOpen", "config", "_getOverlayConfig", "_subscribeToPositions", "create", "keydownEvents", "OverlayConfig", "position", "flexibleConnectedTo", "withGrowAfterOpen", "withTransformOriginOn", "positionChanges", "change", "connectionPair", "overlayX", "overlayY", "run", "originX", "originFallbackX", "overlayFallbackY", "originY", "originFallbackY", "overlayFallbackX", "offsetY", "_parentInnerPadding", "firstItem", "offsetTop", "withPositions", "backdrop", "backdropClick", "detachments", "parentClose", "of", "hover", "active", "_handleMousedown", "isFakeMousedownFromScreenReader", "button", "ENTER", "SPACE", "_handleClick", "delay", "asapScheduler", "Directionality", "MatMenuTrigger_HostBindings", "MatMenuTrigger_mousedown_HostBindingHandler", "MatMenuTrigger_keydown_HostBindingHandler", "Self", "MatMenuModule", "ɵmod", "declarations", "imports", "CommonModule", "MatRippleModule", "MatCommonModule", "OverlayModule", "exports", "CdkScrollableModule", "ɵinj", "NgModule"]
}
