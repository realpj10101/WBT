{
  "version": 3,
  "sources": ["../../../../../../../src/material/divider/divider.ts", "../../../../../../../src/material/divider/divider-module.ts", "../../../../../../../src/material/divider/divider_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider',\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n  set vertical(value: BooleanInput) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean {\n    return this._inset;\n  }\n  set inset(value: BooleanInput) {\n    this._inset = coerceBooleanProperty(value);\n  }\n  private _inset: boolean = false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;IA0BaA,oBAAAA,YAAU;EAfvBC,cAAA;AAwBU,SAASC,YAAY;AAUrB,SAAMC,SAAY;EAC3B;;EAlBC,IACIC,WAAQ;AACV,WAAO,KAAKF;;EAEd,IAAIE,SAASC,OAAmB;AAC9B,SAAKH,YAAYI,sBAAsBD,KAAK;;;EAK9C,IACIE,QAAK;AACP,WAAO,KAAKJ;;EAEd,IAAII,MAAMF,OAAmB;AAC3B,SAAKF,SAASG,sBAAsBD,KAAK;;;;mBAjBhCL,aAAU;AAAA;AAAV,YAAAQ,OAAA,kBAAA;QAAAR;EAAUS,WAAA,CAAA,CAAA,aAAA,CAAA;EAAAC,WAAA,CAAA,QAAA,aAAA,GAAA,aAAA;EAAAC,UAAA;EAAAC,cAAA,SAAAC,wBAAAC,IAAAC,KAAA;AAAA,QAAAD,KAAA,GAAA;;;;;;;;;;;;;;;;;IAAVd;;sEAAAA,YAAU,CAAA;UAftBgB;IACWC,MAAA,CAAA;MAAAC,UAAA;MACJC,MAAA;QACJ,QAAQ;QACR,2BAA2B;QAC3B,gCAAgC;QAChC,kCAAkC;QAClC,6BAA6B;QAC7B,SAAS;;MAEDC,UAAA;MAAEC,eAEGC,oBAAkBC;MAChBC,iBAAAC,wBAAwBC;MAAMC,QAAA,CAAA,6aAAA;IAAA,CAAA;;IAK3CvB,UAAQ,CAAA;YADXwB;;IAWGrB,OAAK,CAAA;YADRqB;;;;ICrBUC,0BAAAA,kBAAgB;;;mBAAhBA,mBAAgB;AAAA;AAAhB,kBAAAC,OAAA,iBAAA;QAAAD;EAAgBE,cAAA,CAFZ/B,UAAU;EAAAgC,SAAA,CAFfC,eAAe;EAAAC,SAAA,CACflC,YAAYiC,eAAe;AAAA,CAAA;;YAD3BA,iBACYA,eAAe;AAAA,CAAA;IAG1BJ;;sEAAAA,kBAAgB,CAAA;UAL5BM;IAASlB,MAAA,CAAA;MACRe,SAAS,CAACC,eAAe;MACzBC,SAAS,CAAClC,YAAYiC,eAAe;MACrCF,cAAc,CAAC/B,UAAU;IAC1B,CAAA;;;",
  "names": ["MatDivider", "constructor", "_vertical", "_inset", "vertical", "value", "coerceBooleanProperty", "inset", "ɵcmp", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatDivider_HostBindings", "rf", "ctx", "Component", "args", "selector", "host", "template", "encapsulation", "ViewEncapsulation", "None", "changeDetection", "ChangeDetectionStrategy", "OnPush", "styles", "Input", "MatDividerModule", "ɵmod", "declarations", "imports", "MatCommonModule", "exports", "NgModule"]
}
