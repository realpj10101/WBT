{
  "version": 3,
  "sources": ["../../../../../../../src/material/icon/trusted-types.ts", "../../../../../../../src/material/icon/icon-registry.ts", "../../../../../../../src/material/icon/icon.ts", "../../../../../../../src/material/icon/icon-module.ts", "../../../../../../../src/material/icon/icon_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular Material. It lazily constructs the Trusted Types policy, providing\n * helper utilities for promoting strings to Trusted Types. When Trusted Types\n * are not available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nexport declare interface TrustedHTML {\n  __brand__: 'TrustedHTML';\n}\n\nexport declare interface TrustedTypePolicyFactory {\n  createPolicy(\n    policyName: string,\n    policyOptions: {\n      createHTML?: (input: string) => string;\n    },\n  ): TrustedTypePolicy;\n}\n\nexport declare interface TrustedTypePolicy {\n  createHTML(input: string): TrustedHTML;\n}\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy | null | undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy | null {\n  if (policy === undefined) {\n    policy = null;\n    if (typeof window !== 'undefined') {\n      const ttWindow = window as unknown as {trustedTypes?: TrustedTypePolicyFactory};\n      if (ttWindow.trustedTypes !== undefined) {\n        policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n          createHTML: (s: string) => s,\n        });\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nexport function trustedHTMLFromString(html: string): TrustedHTML {\n  return getPolicy()?.createHTML(html) || (html as unknown as TrustedHTML);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeHtml, SafeResourceUrl} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\nimport {TrustedHTML, trustedHTMLFromString} from './trusted-types';\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error(\n    'Could not find HttpClient provider for use with Angular Material icons. ' +\n      'Please include the HttpClientModule from @angular/common/http in your ' +\n      'app imports.',\n  );\n}\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(\n    `The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n      `via Angular's DomSanitizer. Attempted URL was \"${url}\".`,\n  );\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(\n    `The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n      `Angular's DomSanitizer. Attempted literal was \"${literal}\".`,\n  );\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n\n  /** Whether or not to fetch the icon or icon set using HTTP credentials. */\n  withCredentials?: boolean;\n}\n\n/**\n * Function that will be invoked by the icon registry when trying to resolve the\n * URL from which to fetch an icon. The returned URL will be used to make a request for the icon.\n */\nexport type IconResolver = (\n  name: string,\n  namespace: string,\n) => SafeResourceUrl | SafeResourceUrlWithIconOptions | null;\n\n/** Object that specifies a URL from which to fetch an icon and the options to use for it. */\nexport interface SafeResourceUrlWithIconOptions {\n  url: SafeResourceUrl;\n  options: IconOptions;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null;\n\n  constructor(\n    public url: SafeResourceUrl,\n    public svgText: TrustedHTML | null,\n    public options?: IconOptions,\n  ) {}\n}\n\n/** Icon configuration whose content has already been loaded. */\ntype LoadedSvgIconConfig = SvgIconConfig & {svgText: TrustedHTML};\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<TrustedHTML>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /** Registered icon resolver functions. */\n  private _resolvers: IconResolver[] = [];\n\n  /**\n   * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n   * specified. The default 'material-icons' value assumes that the material icon font has been\n   * loaded as described at https://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    private readonly _errorHandler: ErrorHandler,\n  ) {\n    this._document = document;\n  }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(\n    namespace: string,\n    iconName: string,\n    url: SafeResourceUrl,\n    options?: IconOptions,\n  ): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n  }\n\n  /**\n   * Registers an icon resolver function with the registry. The function will be invoked with the\n   * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n   * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n   * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n   * will be invoked in the order in which they have been registered.\n   * @param resolver Resolver function to be registered.\n   */\n  addSvgIconResolver(resolver: IconResolver): this {\n    this._resolvers.push(resolver);\n    return this;\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(\n    namespace: string,\n    iconName: string,\n    literal: SafeHtml,\n    options?: IconOptions,\n  ): this {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    // TODO: add an ngDevMode check\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    // Security: The literal is passed in as SafeHtml, and is thus trusted.\n    const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n    return this._addSvgIconConfig(\n      namespace,\n      iconName,\n      new SvgIconConfig('', trustedLiteral, options),\n    );\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(\n    namespace: string,\n    literal: SafeHtml,\n    options?: IconOptions,\n  ): this {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    // Security: The literal is passed in as SafeHtml, and is thus trusted.\n    const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n  }\n\n  /**\n   * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * If the registered font is a ligature font, then don't forget to also include the special\n   * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n   *\n   * ```ts\n   * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n   * ```\n   *\n   * And use like this:\n   *\n   * ```html\n   * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n   * ```\n   *\n   * @param alias Alias for the font.\n   * @param classNames Class names override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, classNames: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, classNames);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  setDefaultFontSetClass(...classNames: string[]): this {\n    this._defaultFontSetClass = classNames;\n    return this;\n  }\n\n  /**\n   * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string[] {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    const key = iconKey(namespace, name);\n    let config = this._svgIconConfigs.get(key);\n\n    // Return (copy of) cached icon if possible.\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // Otherwise try to resolve the config from one of the resolver functions.\n    config = this._getIconConfigFromResolvers(namespace, name);\n\n    if (config) {\n      this._svgIconConfigs.set(key, config);\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n    this._resolvers = [];\n    this._svgIconConfigs.clear();\n    this._iconSetConfigs.clear();\n    this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgText) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(this._svgElementFromConfig(config as LoadedSvgIconConfig)));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(\n    name: string,\n    iconSetConfigs: SvgIconConfig[],\n  ): Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<TrustedHTML | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgText)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse) => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            this._errorHandler.handleError(new Error(errorMessage));\n            return observableOf(null);\n          }),\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(\n      map(() => {\n        const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n        // TODO: add an ngDevMode check\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n\n        return foundIcon;\n      }),\n    );\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(\n    iconName: string,\n    iconSetConfigs: SvgIconConfig[],\n  ): SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n\n      // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n      // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n      // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n      // some of the parsing.\n      if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n        const svg = this._svgElementFromConfig(config as LoadedSvgIconConfig);\n        const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchIcon(config).pipe(\n      tap(svgText => (config.svgText = svgText)),\n      map(() => this._svgElementFromConfig(config as LoadedSvgIconConfig)),\n    );\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the\n   * SvgIconConfig and attaches it to the config.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<TrustedHTML | null> {\n    if (config.svgText) {\n      return observableOf(null);\n    }\n\n    return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(\n    iconSet: SVGElement,\n    iconName: string,\n    options?: IconOptions,\n  ): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: TrustedHTML): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str as unknown as string;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    // TODO: add an ngDevMode check\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given icon. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchIcon(iconConfig: SvgIconConfig): Observable<TrustedHTML> {\n    const {url: safeUrl, options} = iconConfig;\n    const withCredentials = options?.withCredentials ?? false;\n\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    // TODO: add an ngDevMode check\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // TODO: add an ngDevMode check\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    const req = this._httpClient.get(url, {responseType: 'text', withCredentials}).pipe(\n      map(svg => {\n        // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n        // trusted HTML.\n        return trustedHTMLFromString(svg);\n      }),\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n\n  /** Parses a config's text into an SVG element. */\n  private _svgElementFromConfig(config: LoadedSvgIconConfig): SVGElement {\n    if (!config.svgElement) {\n      const svg = this._svgElementFromString(config.svgText);\n      this._setSvgAttributes(svg, config.options);\n      config.svgElement = svg;\n    }\n\n    return config.svgElement;\n  }\n\n  /** Tries to create an icon config through the registered resolver functions. */\n  private _getIconConfigFromResolvers(namespace: string, name: string): SvgIconConfig | undefined {\n    for (let i = 0; i < this._resolvers.length; i++) {\n      const result = this._resolvers[i](name, namespace);\n\n      if (result) {\n        return isSafeUrlWithOptions(result)\n          ? new SvgIconConfig(result.url, null, result.options)\n          : new SvgIconConfig(result, null);\n      }\n    }\n\n    return undefined;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  errorHandler: ErrorHandler,\n  document?: any,\n) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    ErrorHandler,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\nfunction isSafeUrlWithOptions(value: any): value is SafeResourceUrlWithIconOptions {\n  return !!(value.url && value.options);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ErrorHandler,\n  inject,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, ThemePalette, mixinColor} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {MatIconRegistry} from './icon-registry';\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(\n  class {\n    constructor(public _elementRef: ElementRef) {}\n  },\n);\n\n/** Default options for `mat-icon`.  */\nexport interface MatIconDefaultOptions {\n  /** Default color of the icon. */\n  color?: ThemePalette;\n  /** Font set that the icon is a part of. */\n  fontSet?: string;\n}\n\n/** Injection token to be used to override the default options for `mat-icon`. */\nexport const MAT_ICON_DEFAULT_OPTIONS = new InjectionToken<MatIconDefaultOptions>(\n  'MAT_ICON_DEFAULT_OPTIONS',\n);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY,\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_location ? _location.pathname + _location.search : ''),\n  };\n}\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke',\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n    '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconBase implements OnInit, AfterViewChecked, CanColor, OnDestroy {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: BooleanInput) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input()\n  get svgIcon(): string {\n    return this._svgIcon;\n  }\n  set svgIcon(value: string) {\n    if (value !== this._svgIcon) {\n      if (value) {\n        this._updateSvgIcon(value);\n      } else if (this._svgIcon) {\n        this._clearSvgElement();\n      }\n      this._svgIcon = value;\n    }\n  }\n  private _svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string {\n    return this._fontSet;\n  }\n  set fontSet(value: string) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontSet) {\n      this._fontSet = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string {\n    return this._fontIcon;\n  }\n  set fontIcon(value: string) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontIcon) {\n      this._fontIcon = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string[] = [];\n  private _previousFontIconClass: string;\n\n  _svgName: string | null;\n  _svgNamespace: string | null;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string; value: string}[]>;\n\n  /** Subscription to the current in-progress SVG icon request. */\n  private _currentIconFetch = Subscription.EMPTY;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    private _iconRegistry: MatIconRegistry,\n    @Attribute('aria-hidden') ariaHidden: string,\n    @Inject(MAT_ICON_LOCATION) private _location: MatIconLocation,\n    private readonly _errorHandler: ErrorHandler,\n    @Optional()\n    @Inject(MAT_ICON_DEFAULT_OPTIONS)\n    defaults?: MatIconDefaultOptions,\n  ) {\n    super(elementRef);\n\n    if (defaults) {\n      if (defaults.color) {\n        this.color = this.defaultColor = defaults.color;\n      }\n\n      if (defaults.fontSet) {\n        this.fontSet = defaults.fontSet;\n      }\n    }\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]]; // Use default namespace.\n      case 2:\n        return <[string, string]>parts;\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    this._updateFontIconClasses();\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    const path = this._location.getPathname();\n    this._previousPath = path;\n    this._cacheChildrenWithExternalReferences(svg);\n    this._prependPathToReferences(path);\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        child.remove();\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClasses = (\n      this.fontSet\n        ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n        : this._iconRegistry.getDefaultFontSetClass()\n    ).filter(className => className.length > 0);\n\n    this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n    fontSetClasses.forEach(className => elem.classList.add(className));\n    this._previousFontSetClass = fontSetClasses;\n\n    if (\n      this.fontIcon !== this._previousFontIconClass &&\n      !fontSetClasses.includes('mat-ligature-font')\n    ) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = (this._elementsWithExternalReferences =\n      this._elementsWithExternalReferences || new Map());\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n\n  /** Sets a new SVG icon with a particular name. */\n  private _updateSvgIcon(rawName: string | undefined) {\n    this._svgNamespace = null;\n    this._svgName = null;\n    this._currentIconFetch.unsubscribe();\n\n    if (rawName) {\n      const [namespace, iconName] = this._splitIconName(rawName);\n\n      if (namespace) {\n        this._svgNamespace = namespace;\n      }\n\n      if (iconName) {\n        this._svgName = iconName;\n      }\n\n      this._currentIconFetch = this._iconRegistry\n        .getNamedSvgIcon(iconName, namespace)\n        .pipe(take(1))\n        .subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => {\n            const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n            this._errorHandler.handleError(new Error(errorMessage));\n          },\n        );\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "policy", "getPolicy", "undefined", "window", "ttWindow", "trustedTypes", "createPolicy", "createHTML", "s", "trustedHTMLFromString", "html", "getMatIconNameNotFoundError", "iconName", "Error", "getMatIconNoHttpProviderError", "getMatIconFailedToSanitizeUrlError", "url", "getMatIconFailedToSanitizeLiteralError", "literal", "SvgIconConfig", "constructor", "svgText", "options", "MatIconRegistry", "_httpClient", "_sanitizer", "document", "_errorHandler", "_svgIconConfigs", "Map", "_iconSetConfigs", "_cachedIconsByUrl", "_inProgressUrlFetches", "_fontCssClassesByAlias", "_resolvers", "_defaultFontSetClass", "_document", "addSvgIcon", "addSvgIconInNamespace", "addSvgIconLiteral", "addSvgIconLiteralInNamespace", "namespace", "_addSvgIconConfig", "addSvgIconResolver", "resolver", "push", "cleanLiteral", "sanitize", "SecurityContext", "HTML", "trustedLiteral", "addSvgIconSet", "addSvgIconSetInNamespace", "addSvgIconSetLiteral", "addSvgIconSetLiteralInNamespace", "_addSvgIconSetConfig", "registerFontClassAlias", "alias", "classNames", "set", "classNameForFontAlias", "get", "setDefaultFontSetClass", "getDefaultFontSetClass", "getSvgIconFromUrl", "safeUrl", "RESOURCE_URL", "cachedIcon", "of", "cloneSvg", "_loadSvgIconFromConfig", "pipe", "tap", "svg", "map", "getNamedSvgIcon", "name", "key", "iconKey", "config", "_getSvgFromConfig", "_getIconConfigFromResolvers", "iconSetConfigs", "_getSvgFromIconSetConfigs", "throwError", "ngOnDestroy", "clear", "_svgElementFromConfig", "namedIcon", "_extractIconWithNameFromAnySet", "iconSetFetchRequests", "filter", "iconSetConfig", "_loadSvgIconSetFromConfig", "catchError", "err", "errorMessage", "message", "handleError", "forkJoin", "foundIcon", "i", "length", "toString", "indexOf", "_extractSvgIconFromSet", "_fetchIcon", "iconSet", "iconSource", "querySelector", "iconElement", "cloneNode", "removeAttribute", "nodeName", "toLowerCase", "_setSvgAttributes", "_toSvgElement", "_svgElementFromString", "appendChild", "str", "div", "createElement", "innerHTML", "element", "attributes", "value", "setAttribute", "childNodes", "nodeType", "ELEMENT_NODE", "viewBox", "iconConfig", "withCredentials", "inProgressFetch", "req", "responseType", "finalize", "delete", "share", "configNamespace", "svgElement", "result", "isSafeUrlWithOptions", "ɵfac", "MatIconRegistry_Factory", "t", "ɵɵinject", "HttpClient", "DomSanitizer", "DOCUMENT", "ErrorHandler", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Optional", "Inject", "ICON_REGISTRY_PROVIDER_FACTORY", "parentRegistry", "httpClient", "sanitizer", "errorHandler", "ICON_REGISTRY_PROVIDER", "provide", "deps", "SkipSelf", "useFactory", "_MatIconBase", "mixinColor", "_elementRef", "MAT_ICON_DEFAULT_OPTIONS", "InjectionToken", "MAT_ICON_LOCATION", "MAT_ICON_LOCATION_FACTORY", "inject", "_location", "location", "getPathname", "pathname", "search", "funcIriAttributes", "funcIriAttributeSelector", "attr", "join", "funcIriPattern", "MatIcon", "inline", "_inline", "coerceBooleanProperty", "svgIcon", "_svgIcon", "_updateSvgIcon", "_clearSvgElement", "fontSet", "_fontSet", "newValue", "_cleanupFontValue", "_updateFontIconClasses", "fontIcon", "_fontIcon", "elementRef", "_iconRegistry", "ariaHidden", "defaults", "_previousFontSetClass", "_currentIconFetch", "Subscription", "EMPTY", "color", "defaultColor", "nativeElement", "_splitIconName", "parts", "split", "ngOnInit", "ngAfterViewChecked", "cachedElements", "_elementsWithExternalReferences", "size", "newPath", "_previousPath", "_prependPathToReferences", "unsubscribe", "_usingFontIcon", "_setSvgElement", "path", "_cacheChildrenWithExternalReferences", "layoutElement", "childCount", "child", "remove", "elem", "fontSetClasses", "className", "forEach", "classList", "add", "_previousFontIconClass", "includes", "trim", "elements", "attrs", "elementsWithFuncIri", "querySelectorAll", "elementWithReference", "getAttribute", "match", "rawName", "_svgNamespace", "_svgName", "take", "subscribe", "MatIcon_Factory", "ɵɵdirectiveInject", "ElementRef", "ɵɵinjectAttribute", "ɵcmp", "ɵɵdefineComponent", "type", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatIcon_HostBindings", "rf", "ctx", "i0", "ɵɵattribute", "ɵɵclassProp", "inputs", "exportAs", "features", "ɵɵInheritDefinitionFeature", "ngContentSelectors", "decls", "vars", "template", "MatIcon_Template", "ɵɵprojectionDef", "ɵɵprojection", "styles", "encapsulation", "changeDetection", "Component", "selector", "host", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "Attribute", "Input", "MatIconModule", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "MatCommonModule", "exports", "ɵɵdefineInjector", "NgModule", "args"]
}
