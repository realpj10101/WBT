{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/bidi/dir-document-token.ts", "../../../../../../../src/cdk/bidi/directionality.ts", "../../../../../../../src/cdk/bidi/dir.ts", "../../../../../../../src/cdk/bidi/bidi-module.ts", "../../../../../../../src/cdk/bidi/bidi_public_index.ts", "../../../../../../../src/cdk/platform/platform.ts", "../../../../../../../src/cdk/platform/platform-module.ts", "../../../../../../../src/cdk/platform/features/input-types.ts", "../../../../../../../src/cdk/platform/features/passive-listeners.ts", "../../../../../../../src/cdk/platform/features/scrolling.ts", "../../../../../../../src/cdk/platform/features/shadow-dom.ts", "../../../../../../../src/cdk/platform/features/test-environment.ts", "../../../../../../../src/cdk/platform/platform_public_index.ts", "../../../../../../../src/cdk/coercion/boolean-property.ts", "../../../../../../../src/cdk/coercion/number-property.ts", "../../../../../../../src/cdk/coercion/array.ts", "../../../../../../../src/cdk/coercion/css-pixel-value.ts", "../../../../../../../src/cdk/coercion/element.ts", "../../../../../../../src/cdk/coercion/string-array.ts", "../../../../../../../src/cdk/keycodes/keycodes.ts", "../../../../../../../src/cdk/keycodes/modifiers.ts", "../../../../../../../src/cdk/keycodes/keycodes_public_index.ts", "../../../../../../../src/cdk/observers/observe-content.ts", "../../../../../../../src/cdk/observers/observers_public_index.ts", "../../../../../../../src/cdk/layout/layout-module.ts", "../../../../../../../src/cdk/layout/media-matcher.ts", "../../../../../../../src/cdk/layout/breakpoints-observer.ts", "../../../../../../../src/cdk/layout/breakpoints.ts", "../../../../../../../src/cdk/layout/layout_public_index.ts", "../../../../../../../src/cdk/a11y/aria-describer/aria-reference.ts", "../../../../../../../src/cdk/a11y/aria-describer/aria-describer.ts", "../../../../../../../src/cdk/a11y/key-manager/list-key-manager.ts", "../../../../../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts", "../../../../../../../src/cdk/a11y/key-manager/focus-key-manager.ts", "../../../../../../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap.ts", "../../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap-inert-strategy.ts", "../../../../../../../src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap-manager.ts", "../../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts", "../../../../../../../src/cdk/a11y/fake-event-detection.ts", "../../../../../../../src/cdk/a11y/input-modality/input-modality-detector.ts", "../../../../../../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts", "../../../../../../../src/cdk/a11y/live-announcer/live-announcer.ts", "../../../../../../../src/cdk/a11y/focus-monitor/focus-monitor.ts", "../../../../../../../src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts", "../../../../../../../src/cdk/a11y/a11y-module.ts", "../../../../../../../src/cdk/a11y/a11y_public_index.ts", "../../../../../../../src/cdk/version.ts", "../../../../../../../src/material/core/version.ts", "../../../../../../../src/material/core/animation/animation.ts", "../../../../../../../src/material/core/common-behaviors/common-module.ts", "../../../../../../../src/material/core/common-behaviors/disabled.ts", "../../../../../../../src/material/core/common-behaviors/color.ts", "../../../../../../../src/material/core/common-behaviors/disable-ripple.ts", "../../../../../../../src/material/core/common-behaviors/tabindex.ts", "../../../../../../../src/material/core/common-behaviors/error-state.ts", "../../../../../../../src/material/core/common-behaviors/initialized.ts", "../../../../../../../src/material/core/datetime/date-adapter.ts", "../../../../../../../src/material/core/datetime/date-formats.ts", "../../../../../../../src/material/core/datetime/native-date-adapter.ts", "../../../../../../../src/material/core/datetime/native-date-formats.ts", "../../../../../../../src/material/core/datetime/index.ts", "../../../../../../../src/material/core/error/error-options.ts", "../../../../../../../src/material/core/line/line.ts", "../../../../../../../src/material/core/ripple/ripple-ref.ts", "../../../../../../../src/material/core/ripple/ripple-event-manager.ts", "../../../../../../../src/material/core/ripple/ripple-renderer.ts", "../../../../../../../src/material/core/ripple/ripple.ts", "../../../../../../../src/material/core/ripple/index.ts", "../../../../../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts", "../../../../../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox-module.ts", "../../../../../../../src/material/core/option/option-parent.ts", "../../../../../../../src/material/core/option/optgroup.ts", "../../../../../../../src/material/core/option/optgroup.html", "../../../../../../../src/material/core/option/option.ts", "../../../../../../../src/material/core/option/option.html", "../../../../../../../src/material/core/option/index.ts", "../../../../../../../src/material/core/private/ripple-loader.ts", "../../../../../../../src/material/core/core_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\nexport type Direction = 'ltr' | 'rtl';\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN =\n  /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n\n/** Resolves a string value to a specific direction. */\nexport function _resolveDirectionality(rawValue: string): Direction {\n  const value = rawValue?.toLowerCase() || '';\n\n  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Output, Input, EventEmitter, AfterContentInit, OnDestroy} from '@angular/core';\n\nimport {Direction, Directionality, _resolveDirectionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[attr.dir]': '_rawDir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  /** Normalized direction that accounts for invalid/unsupported values. */\n  private _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Direction as passed in by the consumer. */\n  _rawDir: string;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') readonly change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction {\n    return this._dir;\n  }\n  set dir(value: Direction | 'auto') {\n    const previousValue = this._dir;\n\n    // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n    // whereas the browser does it based on the content of the element. Since doing so based\n    // on the content can be expensive, for now we're doing the simpler matching.\n    this._dir = _resolveDirectionality(value);\n    this._rawDir = value;\n\n    if (previousValue !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction {\n    return this.dir;\n  }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir],\n})\nexport class BidiModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId\n    ? isPlatformBrowser(this._platformId)\n    : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean =\n    this.isBrowser &&\n    !!((window as any).chrome || hasV8BreakIterator) &&\n    typeof CSS !== 'undefined' &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean =\n    this.isBrowser &&\n    /AppleWebKit/i.test(navigator.userAgent) &&\n    !this.BLINK &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean =\n    this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  constructor(@Inject(PLATFORM_ID) private _platformId: Object) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class PlatformModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(\n    candidateInputTypes.filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }),\n  );\n\n  return supportedInputTypes;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener(\n        'test',\n        null!,\n        Object.defineProperty({}, 'passive', {\n          get: () => (supportsPassiveEvents = true),\n        }),\n      );\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nexport function normalizePassiveListenerOptions(\n  options: AddEventListenerOptions,\n): AddEventListenerOptions | boolean {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport const enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED,\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType | undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean | undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function | undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n        scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nexport function _getFocusedElementPierceShadowDom(): HTMLElement | null {\n  let activeElement =\n    typeof document !== 'undefined' && document\n      ? (document.activeElement as HTMLElement | null)\n      : null;\n\n  while (activeElement && activeElement.shadowRoot) {\n    const newActiveElement = activeElement.shadowRoot.activeElement as HTMLElement | null;\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n\n  return activeElement;\n}\n\n/** Gets the target of an event while accounting for Shadow DOM. */\nexport function _getEventTarget<T extends EventTarget>(event: Event): T | null {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return (event.composedPath ? event.composedPath()[0] : event.target) as T | null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether the code is currently running in a test environment. */\nexport function _isTestEnvironment(): boolean {\n  // We can't use `declare const` because it causes conflicts inside Google with the real typings\n  // for these symbols and we can't read them off the global object, because they don't appear to\n  // be attached there for some runners like Jest.\n  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n  return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n    // @ts-ignore\n    (typeof jasmine !== 'undefined' && !!jasmine) ||\n    // @ts-ignore\n    (typeof jest !== 'undefined' && !!jest) ||\n    // @ts-ignore\n    (typeof Mocha !== 'undefined' && !!Mocha)\n  );\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a number input\n * @docs-private\n */\nexport type NumberInput = string | number | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a number. */\nexport function coerceNumberProperty(value: any): number;\nexport function coerceNumberProperty<D>(value: any, fallback: D): number | D;\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nexport function _isNumberValue(value: any): boolean {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[];\nexport function coerceArray<T>(value: T | readonly T[]): readonly T[];\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a value to a CSS pixel value. */\nexport function coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : `${value}px`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nexport function coerceElement<T>(elementOrRef: ElementRef<T> | T): T {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nexport function coerceStringArray(value: any, separator: string | RegExp = /\\s+/): string[] {\n  const result = [];\n\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n\n  return result;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const MAC_ENTER = 3;\nexport const BACKSPACE = 8;\nexport const TAB = 9;\nexport const NUM_CENTER = 12;\nexport const ENTER = 13;\nexport const SHIFT = 16;\nexport const CONTROL = 17;\nexport const ALT = 18;\nexport const PAUSE = 19;\nexport const CAPS_LOCK = 20;\nexport const ESCAPE = 27;\nexport const SPACE = 32;\nexport const PAGE_UP = 33;\nexport const PAGE_DOWN = 34;\nexport const END = 35;\nexport const HOME = 36;\nexport const LEFT_ARROW = 37;\nexport const UP_ARROW = 38;\nexport const RIGHT_ARROW = 39;\nexport const DOWN_ARROW = 40;\nexport const PLUS_SIGN = 43;\nexport const PRINT_SCREEN = 44;\nexport const INSERT = 45;\nexport const DELETE = 46;\nexport const ZERO = 48;\nexport const ONE = 49;\nexport const TWO = 50;\nexport const THREE = 51;\nexport const FOUR = 52;\nexport const FIVE = 53;\nexport const SIX = 54;\nexport const SEVEN = 55;\nexport const EIGHT = 56;\nexport const NINE = 57;\nexport const FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186\nexport const FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187\nexport const QUESTION_MARK = 63;\nexport const AT_SIGN = 64;\nexport const A = 65;\nexport const B = 66;\nexport const C = 67;\nexport const D = 68;\nexport const E = 69;\nexport const F = 70;\nexport const G = 71;\nexport const H = 72;\nexport const I = 73;\nexport const J = 74;\nexport const K = 75;\nexport const L = 76;\nexport const M = 77;\nexport const N = 78;\nexport const O = 79;\nexport const P = 80;\nexport const Q = 81;\nexport const R = 82;\nexport const S = 83;\nexport const T = 84;\nexport const U = 85;\nexport const V = 86;\nexport const W = 87;\nexport const X = 88;\nexport const Y = 89;\nexport const Z = 90;\nexport const META = 91; // WIN_KEY_LEFT\nexport const MAC_WK_CMD_LEFT = 91;\nexport const MAC_WK_CMD_RIGHT = 93;\nexport const CONTEXT_MENU = 93;\nexport const NUMPAD_ZERO = 96;\nexport const NUMPAD_ONE = 97;\nexport const NUMPAD_TWO = 98;\nexport const NUMPAD_THREE = 99;\nexport const NUMPAD_FOUR = 100;\nexport const NUMPAD_FIVE = 101;\nexport const NUMPAD_SIX = 102;\nexport const NUMPAD_SEVEN = 103;\nexport const NUMPAD_EIGHT = 104;\nexport const NUMPAD_NINE = 105;\nexport const NUMPAD_MULTIPLY = 106;\nexport const NUMPAD_PLUS = 107;\nexport const NUMPAD_MINUS = 109;\nexport const NUMPAD_PERIOD = 110;\nexport const NUMPAD_DIVIDE = 111;\nexport const F1 = 112;\nexport const F2 = 113;\nexport const F3 = 114;\nexport const F4 = 115;\nexport const F5 = 116;\nexport const F6 = 117;\nexport const F7 = 118;\nexport const F8 = 119;\nexport const F9 = 120;\nexport const F10 = 121;\nexport const F11 = 122;\nexport const F12 = 123;\nexport const NUM_LOCK = 144;\nexport const SCROLL_LOCK = 145;\nexport const FIRST_MEDIA = 166;\nexport const FF_MINUS = 173;\nexport const MUTE = 173; // Firefox (Gecko) fires 181 for MUTE\nexport const VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN\nexport const VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP\nexport const FF_MUTE = 181;\nexport const FF_VOLUME_DOWN = 182;\nexport const LAST_MEDIA = 183;\nexport const FF_VOLUME_UP = 183;\nexport const SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON\nexport const EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS\nexport const COMMA = 188;\nexport const DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS\nexport const PERIOD = 190;\nexport const SLASH = 191;\nexport const APOSTROPHE = 192;\nexport const TILDE = 192;\nexport const OPEN_SQUARE_BRACKET = 219;\nexport const BACKSLASH = 220;\nexport const CLOSE_SQUARE_BRACKET = 221;\nexport const SINGLE_QUOTE = 222;\nexport const MAC_META = 224;\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type ModifierKey = 'altKey' | 'shiftKey' | 'ctrlKey' | 'metaKey';\n\n/**\n * Checks whether a modifier key is pressed.\n * @param event Event to be checked.\n */\nexport function hasModifierKey(event: KeyboardEvent, ...modifiers: ModifierKey[]): boolean {\n  if (modifiers.length) {\n    return modifiers.some(modifier => event[modifier]);\n  }\n\n  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceElement, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n  booleanAttribute,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<\n    Element,\n    {\n      observer: MutationObserver | null;\n      readonly stream: Subject<MutationRecord[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true,\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') readonly event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input({alias: 'cdkObserveContentDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number {\n    return this._debounce;\n  }\n  set debounce(value: NumberInput) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(\n    private _contentObserver: ContentObserver,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n  ) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (\n        this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream\n      ).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n}\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory],\n})\nexport class ObserversModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class LayoutModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, CSP_NONCE, Optional, Inject} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(\n    private _platform: Platform,\n    @Optional() @Inject(CSP_NONCE) private _nonce?: string | null,\n  ) {\n    this._matchMedia =\n      this._platform.isBrowser && window.matchMedia\n        ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n          // call it from a different scope.\n          window.matchMedia.bind(window)\n        : noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query, this._nonce);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query: string, nonce: string | undefined | null) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n\n      if (nonce) {\n        mediaQueryStyleNode.nonce = nonce;\n      }\n\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {},\n  } as any;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {MediaMatcher} from './media-matcher';\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private readonly _destroySubject = new Subject<void>();\n\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | readonly string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)),\n    );\n    return stateObservable.pipe(\n      map(breakpointStates => {\n        const response: BreakpointState = {\n          matches: false,\n          breakpoints: {},\n        };\n        breakpointStates.forEach(({matches, query}) => {\n          response.matches = response.matches || matches;\n          response.breakpoints[query] = matches;\n        });\n        return response;\n      }),\n    );\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer: Observer<MediaQueryListEvent>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: MediaQueryListEvent): void => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map(({matches}) => ({query, matches})),\n      takeUntil(this._destroySubject),\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: readonly string[]): readonly string[] {\n  return queries\n    .map(query => query.split(','))\n    .reduce((a1, a2) => a1.concat(a2))\n    .map(query => query.trim());\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset:\n    '(max-width: 599.98px) and (orientation: portrait), ' +\n    '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet:\n    '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n    '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web:\n    '(min-width: 840px) and (orientation: portrait), ' +\n    '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy, APP_ID, inject} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _document: Document;\n\n  /** Map of all registered message elements that have been placed into the document. */\n  private _messageRegistry = new Map<string | Element, RegisteredMessage>();\n\n  /** Container for all registered messages. */\n  private _messagesContainer: HTMLElement | null = null;\n\n  /** Unique ID for the service. */\n  private readonly _id = `${nextId++}`;\n\n  constructor(\n    @Inject(DOCUMENT) _document: any,\n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    private _platform?: Platform,\n  ) {\n    this._document = _document;\n    this._id = inject(APP_ID) + '-' + nextId++;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string, role?: string): void;\n\n  /**\n   * Adds to the host element an aria-describedby reference to an already-existing message element.\n   */\n  describe(hostElement: Element, message: HTMLElement): void;\n\n  describe(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message, this._id);\n      this._messageRegistry.set(key, {messageElement: message, referenceCount: 0});\n    } else if (!this._messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message. */\n  removeDescription(hostElement: Element, message: string, role?: string): void;\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: HTMLElement): void;\n\n  removeDescription(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = this._messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n\n    if (this._messagesContainer?.childNodes.length === 0) {\n      this._messagesContainer.remove();\n      this._messagesContainer = null;\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(\n      `[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`,\n    );\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    this._messagesContainer?.remove();\n    this._messagesContainer = null;\n    this._messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string, role?: string) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement, this._id);\n    messageElement.textContent = message;\n\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n\n    this._createMessagesContainer();\n    this._messagesContainer!.appendChild(messageElement);\n    this._messageRegistry.set(getKey(message, role), {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(key: string | Element) {\n    this._messageRegistry.get(key)?.messageElement?.remove();\n    this._messageRegistry.delete(key);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (this._messagesContainer) {\n      return;\n    }\n\n    const containerClassName = 'cdk-describedby-message-container';\n    const serverContainers = this._document.querySelectorAll(\n      `.${containerClassName}[platform=\"server\"]`,\n    );\n\n    for (let i = 0; i < serverContainers.length; i++) {\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      serverContainers[i].remove();\n    }\n\n    const messagesContainer = this._document.createElement('div');\n\n    // We add `visibility: hidden` in order to prevent text in this container from\n    // being searchable by the browser's Ctrl + F functionality.\n    // Screen-readers will still read the description for elements with aria-describedby even\n    // when the description element is not visible.\n    messagesContainer.style.visibility = 'hidden';\n    // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n    // the description element doesn't impact page layout.\n    messagesContainer.classList.add(containerClassName);\n    messagesContainer.classList.add('cdk-visually-hidden');\n\n    // @breaking-change 14.0.0 Remove null check for `_platform`.\n    if (this._platform && !this._platform.isBrowser) {\n      messagesContainer.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(messagesContainer);\n    this._messagesContainer = messagesContainer;\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(\n      id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0,\n    );\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, key: string | Element): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = this._messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string | HTMLElement | void): boolean {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n\n  /** Checks whether a node is an Element node. */\n  private _isElementNode(element: Node): element is Element {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\n\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message: string | Element, role?: string): string | Element {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element: HTMLElement, serviceId: string) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n  PAGE_UP,\n  PAGE_DOWN,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _itemChangesSubscription?: Subscription;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n  private _pageUpAndDown = {enabled: false, delta: 10};\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead(): this {\n    this._pressedLetters = [];\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled: boolean = true, delta: number = 10): this {\n    this._pageUpAndDown = {enabled, delta};\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._letterKeyStream.complete();\n    this.tabOut.complete();\n    this.change.complete();\n    this._pressedLetters = [];\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable} from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return (\n      isPotentiallyFocusable(element) &&\n      !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element))\n    );\n  }\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(\n    element.offsetWidth ||\n    element.offsetHeight ||\n    (typeof element.getClientRects === 'function' && element.getClientRects().length)\n  );\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return (\n    nodeName === 'input' ||\n    nodeName === 'select' ||\n    nodeName === 'button' ||\n    nodeName === 'textarea'\n  );\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return (\n    inputType === 'text' ||\n    inputType === 'password' ||\n    nodeName === 'select' ||\n    nodeName === 'textarea'\n  );\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return (\n    isNativeFormElement(element) ||\n    isAnchorWithHref(element) ||\n    element.hasAttribute('contenteditable') ||\n    hasValidTabIndex(element)\n  );\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_getFocusedElementPierceShadowDom} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  DoCheck,\n  SimpleChanges,\n  OnChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n  protected startAnchorListener = () => this.focusLastTabbableElement();\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  protected _enabled: boolean = true;\n\n  constructor(\n    readonly _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    readonly _ngZone: NgZone,\n    readonly _document: Document,\n    deferAnchors = false,\n  ) {\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(\n      `[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`,\n    ) as NodeListOf<HTMLElement>;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n              `attribute will be removed in 8.0.0.`,\n            markers[i],\n          );\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n              `will be removed in 8.0.0.`,\n            markers[i],\n          );\n        }\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length\n      ? markers[markers.length - 1]\n      : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options?: FocusOptions): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(\n      `[cdk-focus-initial], ` + `[cdkFocusInitial]`,\n    ) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        redirectToElement.hasAttribute(`cdk-focus-initial`)\n      ) {\n        console.warn(\n          `Found use of deprecated attribute 'cdk-focus-initial', ` +\n            `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n            `will be removed in 8.0.0`,\n          redirectToElement,\n        );\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        !this._checker.isFocusable(redirectToElement)\n      ) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus(options);\n      return true;\n    }\n\n    return this.focusFirstTabbableElement(options);\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    const children = root.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getFirstTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    const children = root.children;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getLastTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  protected toggleAnchors(enabled: boolean) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      deferCaptureElements,\n    );\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input({alias: 'cdkTrapFocus', transform: booleanAttribute})\n  get enabled(): boolean {\n    return this.focusTrap.enabled;\n  }\n  set enabled(value: boolean) {\n    this.focusTrap.enabled = value;\n  }\n\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input({alias: 'cdkTrapFocusAutoCapture', transform: booleanAttribute}) autoCapture: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (\n      autoCaptureChange &&\n      !autoCaptureChange.firstChange &&\n      this.autoCapture &&\n      this.focusTrap.hasAttached()\n    ) {\n      this._captureFocus();\n    }\n  }\n\n  private _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {FocusTrap} from './focus-trap';\nimport {FocusTrapManager, ManagedFocusTrap} from './focus-trap-manager';\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nexport class ConfigurableFocusTrap extends FocusTrap implements ManagedFocusTrap {\n  /** Whether the FocusTrap is enabled. */\n  override get enabled(): boolean {\n    return this._enabled;\n  }\n  override set enabled(value: boolean) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n\n  constructor(\n    _element: HTMLElement,\n    _checker: InteractivityChecker,\n    _ngZone: NgZone,\n    _document: Document,\n    private _focusTrapManager: FocusTrapManager,\n    private _inertStrategy: FocusTrapInertStrategy,\n    config: ConfigurableFocusTrapConfig,\n  ) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager.register(this);\n  }\n\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  override destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {FocusTrap} from './focus-trap';\n\n/** The injection token used to specify the inert strategy. */\nexport const FOCUS_TRAP_INERT_STRATEGY = new InjectionToken<FocusTrapInertStrategy>(\n  'FOCUS_TRAP_INERT_STRATEGY',\n);\n\n/**\n * A strategy that dictates how FocusTrap should prevent elements\n * outside of the FocusTrap from being focused.\n */\nexport interface FocusTrapInertStrategy {\n  /** Makes all elements outside focusTrap unfocusable. */\n  preventFocus(focusTrap: FocusTrap): void;\n  /** Reverts elements made unfocusable by preventFocus to their previous state. */\n  allowFocus(focusTrap: FocusTrap): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nexport class EventListenerFocusTrapInertStrategy implements FocusTrapInertStrategy {\n  /** Focus event handler. */\n  private _listener: ((e: FocusEvent) => void) | null = null;\n\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap: ConfigurableFocusTrap): void {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener!, true);\n    }\n\n    this._listener = (e: FocusEvent) => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener!, true);\n    });\n  }\n\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap: ConfigurableFocusTrap): void {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener!, true);\n    this._listener = null;\n  }\n\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  private _trapFocus(focusTrap: ConfigurableFocusTrap, event: FocusEvent) {\n    const target = event.target as HTMLElement;\n    const focusTrapRoot = focusTrap._element;\n\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A FocusTrap managed by FocusTrapManager.\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\n */\nexport interface ManagedFocusTrap {\n  _enable(): void;\n  _disable(): void;\n  focusInitialElementWhenReady(): Promise<boolean>;\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapManager {\n  // A stack of the FocusTraps on the page. Only the FocusTrap at the\n  // top of the stack is active.\n  private _focusTrapStack: ManagedFocusTrap[] = [];\n\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n  register(focusTrap: ManagedFocusTrap): void {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n  deregister(focusTrap: ManagedFocusTrap): void {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, Optional, NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\nimport {FOCUS_TRAP_INERT_STRATEGY, FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {EventListenerFocusTrapInertStrategy} from './event-listener-inert-strategy';\nimport {FocusTrapManager} from './focus-trap-manager';\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n@Injectable({providedIn: 'root'})\nexport class ConfigurableFocusTrapFactory {\n  private _document: Document;\n  private _inertStrategy: FocusTrapInertStrategy;\n\n  constructor(\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    private _focusTrapManager: FocusTrapManager,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(FOCUS_TRAP_INERT_STRATEGY) _inertStrategy?: FocusTrapInertStrategy,\n  ) {\n    this._document = _document;\n    // TODO split up the strategies into different modules, similar to DateAdapter.\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param config The focus trap configuration.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, config?: ConfigurableFocusTrapConfig): ConfigurableFocusTrap;\n\n  /**\n   * @deprecated Pass a config object instead of the `deferCaptureElements` flag.\n   * @breaking-change 11.0.0\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean): ConfigurableFocusTrap;\n\n  create(\n    element: HTMLElement,\n    config: ConfigurableFocusTrapConfig | boolean = {defer: false},\n  ): ConfigurableFocusTrap {\n    let configObject: ConfigurableFocusTrapConfig;\n    if (typeof config === 'boolean') {\n      configObject = {defer: config};\n    } else {\n      configObject = config;\n    }\n    return new ConfigurableFocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      this._focusTrapManager,\n      this._inertStrategy,\n      configObject,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n  // `event.detail` is zero depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `detail` works on Chrome, but fails on Firefox.\n  return event.buttons === 0 || event.detail === 0;\n}\n\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nexport function isFakeTouchstartFromScreenReader(event: TouchEvent): boolean {\n  const touch: Touch | undefined =\n    (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return (\n    !!touch &&\n    touch.identifier === -1 &&\n    (touch.radiusX == null || touch.radiusX === 1) &&\n    (touch.radiusY == null || touch.radiusY === 1)\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ALT, CONTROL, MAC_META, META, SHIFT} from '@angular/cdk/keycodes';\nimport {Inject, Injectable, InjectionToken, OnDestroy, Optional, NgZone} from '@angular/core';\nimport {normalizePassiveListenerOptions, Platform, _getEventTarget} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {distinctUntilChanged, skip} from 'rxjs/operators';\nimport {\n  isFakeMousedownFromScreenReader,\n  isFakeTouchstartFromScreenReader,\n} from '../fake-event-detection';\n\n/**\n * The input modalities detected by this service. Null is used if the input modality is unknown.\n */\nexport type InputModality = 'keyboard' | 'mouse' | 'touch' | null;\n\n/** Options to configure the behavior of the InputModalityDetector. */\nexport interface InputModalityDetectorOptions {\n  /** Keys to ignore when detecting keyboard input modality. */\n  ignoreKeys?: number[];\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nexport const INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken<InputModalityDetectorOptions>(\n  'cdk-input-modality-detector-options',\n);\n\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nexport const INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS: InputModalityDetectorOptions = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nexport const TOUCH_BUFFER_MS = 650;\n\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\n@Injectable({providedIn: 'root'})\nexport class InputModalityDetector implements OnDestroy {\n  /** Emits whenever an input modality is detected. */\n  readonly modalityDetected: Observable<InputModality>;\n\n  /** Emits when the input modality changes. */\n  readonly modalityChanged: Observable<InputModality>;\n\n  /** The most recently detected input modality. */\n  get mostRecentModality(): InputModality {\n    return this._modality.value;\n  }\n\n  /**\n   * The most recently detected input modality event target. Is null if no input modality has been\n   * detected or if the associated event target is null for some unknown reason.\n   */\n  _mostRecentTarget: HTMLElement | null = null;\n\n  /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n  private readonly _modality = new BehaviorSubject<InputModality>(null);\n\n  /** Options for this InputModalityDetector. */\n  private readonly _options: InputModalityDetectorOptions;\n\n  /**\n   * The timestamp of the last touch input modality. Used to determine whether mousedown events\n   * should be attributed to mouse or touch.\n   */\n  private _lastTouchMs = 0;\n\n  /**\n   * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n   * bound.\n   */\n  private _onKeydown = (event: KeyboardEvent) => {\n    // If this is one of the keys we should ignore, then ignore it and don't update the input\n    // modality to keyboard.\n    if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n      return;\n    }\n\n    this._modality.next('keyboard');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onMousedown = (event: MouseEvent) => {\n    // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n    // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n    // after the previous touch event.\n    if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n      return;\n    }\n\n    // Fake mousedown events are fired by some screen readers when controls are activated by the\n    // screen reader. Attribute them to keyboard input modality.\n    this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onTouchstart = (event: TouchEvent) => {\n    // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n    // events are fired. Again, attribute to keyboard input modality.\n    if (isFakeTouchstartFromScreenReader(event)) {\n      this._modality.next('keyboard');\n      return;\n    }\n\n    // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n    // triggered via mouse vs touch.\n    this._lastTouchMs = Date.now();\n\n    this._modality.next('touch');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  constructor(\n    private readonly _platform: Platform,\n    ngZone: NgZone,\n    @Inject(DOCUMENT) document: Document,\n    @Optional()\n    @Inject(INPUT_MODALITY_DETECTOR_OPTIONS)\n    options?: InputModalityDetectorOptions,\n  ) {\n    this._options = {\n      ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    // Skip the first emission as it's null.\n    this.modalityDetected = this._modality.pipe(skip(1));\n    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n\n    // If we're not in a browser, this service should do nothing, as there's no relevant input\n    // modality to detect.\n    if (_platform.isBrowser) {\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._modality.complete();\n\n    if (this._platform.isBrowser) {\n      document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n      document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n      document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement | null>(\n  'liveAnnouncerElement',\n  {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\nexport interface LiveAnnouncerDefaultOptions {\n  /** Default politeness for the announcements. */\n  politeness?: AriaLivePoliteness;\n\n  /** Default duration for the announcement messages. */\n  duration?: number;\n}\n\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken<LiveAnnouncerDefaultOptions>(\n  'LIVE_ANNOUNCER_DEFAULT_OPTIONS',\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentObserver} from '@angular/cdk/observers';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AriaLivePoliteness,\n  LiveAnnouncerDefaultOptions,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\n} from './live-announcer-tokens';\n\nlet uniqueIds = 0;\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _liveElement: HTMLElement;\n  private _document: Document;\n  private _previousTimeout: number;\n  private _currentPromise: Promise<void> | undefined;\n  private _currentResolve: (() => void) | undefined;\n\n  constructor(\n    @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n    @Optional()\n    @Inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS)\n    private _defaultOptions?: LiveAnnouncerDefaultOptions,\n  ) {\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    const defaultOptions = this._defaultOptions;\n    let politeness: AriaLivePoliteness | undefined;\n    let duration: number | undefined;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness =\n        defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    if (this._liveElement.id) {\n      this._exposeAnnouncerToModals(this._liveElement.id);\n    }\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._currentPromise) {\n        this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n      }\n\n      clearTimeout(this._previousTimeout);\n      this._previousTimeout = setTimeout(() => {\n        this._liveElement.textContent = message;\n\n        if (typeof duration === 'number') {\n          this._previousTimeout = setTimeout(() => this.clear(), duration);\n        }\n\n        this._currentResolve!();\n        this._currentPromise = this._currentResolve = undefined;\n      }, 100);\n\n      return this._currentPromise;\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    this._liveElement?.remove();\n    this._liveElement = null!;\n    this._currentResolve?.();\n    this._currentPromise = this._currentResolve = undefined;\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].remove();\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live announcer element if there is an\n   * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live announcer element.\n   */\n  private _exposeAnnouncerToModals(id: string) {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `SnakBarContainer` and other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n}\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness {\n    return this._politeness;\n  }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'polite';\n\n  /** Time in milliseconds after which to clear out the announcer element. */\n  @Input('cdkAriaLiveDuration') duration: number;\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _liveAnnouncer: LiveAnnouncer,\n    private _contentObserver: ContentObserver,\n    private _ngZone: NgZone,\n  ) {}\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Platform,\n  normalizePassiveListenerOptions,\n  _getShadowRoot,\n  _getEventTarget,\n} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {InputModalityDetector, TOUCH_BUFFER_MS} from '../input-modality/input-modality-detector';\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n/** Detection mode used for attributing the origin of a focus event. */\nexport const enum FocusMonitorDetectionMode {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  IMMEDIATE,\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occurred.\n   */\n  EVENTUAL,\n}\n\n/** Injectable service-level options for FocusMonitor. */\nexport interface FocusMonitorOptions {\n  detectionMode?: FocusMonitorDetectionMode;\n}\n\n/** InjectionToken for FocusMonitorOptions. */\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken<FocusMonitorOptions>(\n  'cdk-focus-monitor-default-options',\n);\n\ntype MonitoredElementInfo = {\n  checkChildren: boolean;\n  readonly subject: Subject<FocusOrigin>;\n  rootNode: HTMLElement | ShadowRoot | Document;\n};\n\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /**\n   * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n   * focus events to touch interactions requires special logic.\n   */\n  private _originFromTouchInteraction = false;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  /**\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\n   * handlers differently from the rest of the events, because the browser won't emit events\n   * to the document when focus moves inside of a shadow root.\n   */\n  private _rootNodeFocusListenerCount = new Map<HTMLElement | Document | ShadowRoot, number>();\n\n  /**\n   * The specified detection mode, used for attributing the origin of a focus\n   * event.\n   */\n  private readonly _detectionMode: FocusMonitorDetectionMode;\n\n  /**\n   * Event listener for `focus` events on the window.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _windowFocusListener = () => {\n    // Make a note of when the window regains focus, so we can\n    // restore the origin info for the focused element.\n    this._windowFocused = true;\n    this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n  };\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  /** Subject for stopping our InputModalityDetector subscription. */\n  private readonly _stopInputModalityDetector = new Subject<void>();\n\n  constructor(\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private readonly _inputModalityDetector: InputModalityDetector,\n    /** @breaking-change 11.0.0 make document required */\n    @Optional() @Inject(DOCUMENT) document: any | null,\n    @Optional() @Inject(FOCUS_MONITOR_DEFAULT_OPTIONS) options: FocusMonitorOptions | null,\n  ) {\n    this._document = document;\n    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n  }\n  /**\n   * Event listener for `focus` and 'blur' events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _rootNodeFocusAndBlurListener = (event: Event) => {\n    const target = _getEventTarget<HTMLElement>(event);\n\n    // We need to walk up the ancestor chain in order to support `checkChildren`.\n    for (let element = target; element; element = element.parentElement) {\n      if (event.type === 'focus') {\n        this._onFocus(event as FocusEvent, element);\n      } else {\n        this._onBlur(event as FocusEvent, element);\n      }\n    }\n  };\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    checkChildren: boolean = false,\n  ): Observable<FocusOrigin> {\n    const nativeElement = coerceElement(element);\n\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      // Note: we don't want the observable to emit at all so we don't pass any parameters.\n      return observableOf();\n    }\n\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    }\n\n    // Create monitored element info.\n    const info: MonitoredElementInfo = {\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>(),\n      rootNode,\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    origin: FocusOrigin,\n    options?: FocusOptions,\n  ): void {\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) =>\n        this._originChanged(currentElement, origin, info),\n      );\n    } else {\n      this._setOrigin(origin);\n\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  private _getFocusOrigin(focusEventTarget: HTMLElement | null): FocusOrigin {\n    if (this._origin) {\n      // If the origin was realized via a touch interaction, we need to perform additional checks\n      // to determine whether the focus origin should be attributed to touch or program.\n      if (this._originFromTouchInteraction) {\n        return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n      } else {\n        return this._origin;\n      }\n    }\n\n    // If the window has just regained focus, we can restore the most recent origin from before the\n    // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n    // focus. This typically means one of two things happened:\n    //\n    // 1) The element was programmatically focused, or\n    // 2) The element was focused via screen reader navigation (which generally doesn't fire\n    //    events).\n    //\n    // Because we can't distinguish between these two cases, we default to setting `program`.\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    }\n\n    // If the interaction is coming from an input label, we consider it a mouse interactions.\n    // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n    // our detection, because all our assumptions are for `mousedown`. We need to handle this\n    // special case, because it's very common for checkboxes and radio buttons.\n    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n      return 'mouse';\n    }\n\n    return 'program';\n  }\n\n  /**\n   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n   * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n   * event was directly caused by the touch interaction or (2) the focus event was caused by a\n   * subsequent programmatic focus call triggered by the touch interaction.\n   * @param focusEventTarget The target of the focus event under examination.\n   */\n  private _shouldBeAttributedToTouch(focusEventTarget: HTMLElement | null): boolean {\n    // Please note that this check is not perfect. Consider the following edge case:\n    //\n    // <div #parent tabindex=\"0\">\n    //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n    // #child, #parent is programmatically focused. This code will attribute the focus to touch\n    // instead of program. This is a relatively minor edge-case that can be worked around by using\n    // focusVia(parent, 'program') to focus #parent.\n    return (\n      this._detectionMode === FocusMonitorDetectionMode.EVENTUAL ||\n      !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget)\n    );\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    element.classList.toggle('cdk-focused', !!origin);\n    element.classList.toggle('cdk-touch-focused', origin === 'touch');\n    element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n    element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n    element.classList.toggle('cdk-program-focused', origin === 'program');\n  }\n\n  /**\n   * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n   * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n   * the origin being set.\n   * @param origin The origin to set.\n   * @param isFromInteraction Whether we are setting the origin from an interaction event.\n   */\n  private _setOrigin(origin: FocusOrigin, isFromInteraction = false): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n\n      // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n      // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n      // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n      // a touch event because when a touch event is fired, the associated focus event isn't yet in\n      // the event queue. Before doing so, clear any pending timeouts.\n      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n        clearTimeout(this._originTimeoutId);\n        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n        this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n      }\n    });\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    const focusEventTarget = _getEventTarget<HTMLElement>(event);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (\n      !elementInfo ||\n      (elementInfo.checkChildren &&\n        event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))\n    ) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo, null);\n  }\n\n  private _emitOrigin(info: MonitoredElementInfo, origin: FocusOrigin) {\n    if (info.subject.observers.length) {\n      this._ngZone.run(() => info.subject.next(origin));\n    }\n  }\n\n  private _registerGlobalListeners(elementInfo: MonitoredElementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.addEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n\n      // The InputModalityDetector is also just a collection of global listeners.\n      this._inputModalityDetector.modalityDetected\n        .pipe(takeUntil(this._stopInputModalityDetector))\n        .subscribe(modality => {\n          this._setOrigin(modality, true /* isFromInteraction */);\n        });\n    }\n  }\n\n  private _removeGlobalListeners(elementInfo: MonitoredElementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode)!;\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.removeEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      const window = this._getWindow();\n      window.removeEventListener('focus', this._windowFocusListener);\n\n      // Equivalently, stop our InputModalityDetector subscription.\n      this._stopInputModalityDetector.next();\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n\n  /** Updates all the state on an element once its focus origin has changed. */\n  private _originChanged(\n    element: HTMLElement,\n    origin: FocusOrigin,\n    elementInfo: MonitoredElementInfo,\n  ) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo, origin);\n    this._lastFocusOrigin = origin;\n  }\n\n  /**\n   * Collects the `MonitoredElementInfo` of a particular element and\n   * all of its ancestors that have enabled `checkChildren`.\n   * @param element Element from which to start the search.\n   */\n  private _getClosestElementsInfo(element: HTMLElement): [HTMLElement, MonitoredElementInfo][] {\n    const results: [HTMLElement, MonitoredElementInfo][] = [];\n\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n        results.push([currentElement, info]);\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * Returns whether an interaction is likely to have come from the user clicking the `label` of\n   * an `input` or `textarea` in order to focus it.\n   * @param focusEventTarget Target currently receiving focus.\n   */\n  private _isLastInteractionFromInputLabel(focusEventTarget: HTMLElement): boolean {\n    const {_mostRecentTarget: mostRecentTarget, mostRecentModality} = this._inputModalityDetector;\n\n    // If the last interaction used the mouse on an element contained by one of the labels\n    // of an `input`/`textarea` that is currently focused, it is very likely that the\n    // user redirected focus using the label.\n    if (\n      mostRecentModality !== 'mouse' ||\n      !mostRecentTarget ||\n      mostRecentTarget === focusEventTarget ||\n      (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n      (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).disabled\n    ) {\n      return false;\n    }\n\n    const labels = (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).labels;\n\n    if (labels) {\n      for (let i = 0; i < labels.length; i++) {\n        if (labels[i].contains(mostRecentTarget)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n  exportAs: 'cdkMonitorFocus',\n})\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\n  private _monitorSubscription: Subscription;\n  private _focusOrigin: FocusOrigin = null;\n\n  @Output() readonly cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {}\n\n  get focusOrigin(): FocusOrigin {\n    return this._focusOrigin;\n  }\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor\n      .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n      .subscribe(origin => {\n        this._focusOrigin = origin;\n        this.cdkFocusChange.emit(origin);\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Inject, Injectable, OnDestroy} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription} from 'rxjs';\n\n/** Set of possible high-contrast mode backgrounds. */\nexport const enum HighContrastMode {\n  NONE,\n  BLACK_ON_WHITE,\n  WHITE_ON_BLACK,\n}\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n\n/** CSS class applied to the document body when in high-contrast mode. */\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n@Injectable({providedIn: 'root'})\nexport class HighContrastModeDetector implements OnDestroy {\n  /**\n   * Figuring out the high contrast mode and adding the body classes can cause\n   * some expensive layouts. This flag is used to ensure that we only do it once.\n   */\n  private _hasCheckedHighContrastMode: boolean;\n  private _document: Document;\n  private _breakpointSubscription: Subscription;\n\n  constructor(private _platform: Platform, @Inject(DOCUMENT) document: any) {\n    this._document = document;\n\n    this._breakpointSubscription = inject(BreakpointObserver)\n      .observe('(forced-colors: active)')\n      .subscribe(() => {\n        if (this._hasCheckedHighContrastMode) {\n          this._hasCheckedHighContrastMode = false;\n          this._applyBodyHighContrastModeCssClasses();\n        }\n      });\n  }\n\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode(): HighContrastMode {\n    if (!this._platform.isBrowser) {\n      return HighContrastMode.NONE;\n    }\n\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle =\n      documentWindow && documentWindow.getComputedStyle\n        ? documentWindow.getComputedStyle(testElement)\n        : null;\n    const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(\n      / /g,\n      '',\n    );\n    testElement.remove();\n\n    switch (computedColor) {\n      // Pre Windows 11 dark theme.\n      case 'rgb(0,0,0)':\n      // Windows 11 dark themes.\n      case 'rgb(45,50,54)':\n      case 'rgb(32,32,32)':\n        return HighContrastMode.WHITE_ON_BLACK;\n      // Pre Windows 11 light theme.\n      case 'rgb(255,255,255)':\n      // Windows 11 light theme.\n      case 'rgb(255,250,239)':\n        return HighContrastMode.BLACK_ON_WHITE;\n    }\n    return HighContrastMode.NONE;\n  }\n\n  ngOnDestroy(): void {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses(): void {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      bodyClasses.remove(\n        HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS,\n        BLACK_ON_WHITE_CSS_CLASS,\n        WHITE_ON_BLACK_CSS_CLASS,\n      );\n      this._hasCheckedHighContrastMode = true;\n\n      const mode = this.getHighContrastMode();\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n@NgModule({\n  imports: [ObserversModule],\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {\n  constructor(highContrastModeDetector: HighContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of the Angular Component Development Kit. */\nexport const VERSION = new Version('17.0.1');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('17.0.1');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HighContrastModeDetector} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {inject, Inject, InjectionToken, NgModule, Optional} from '@angular/core';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform, _isTestEnvironment} from '@angular/cdk/platform';\nimport {VERSION} from '../version';\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): SanityChecks {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<SanityChecks>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Possible sanity checks that can be enabled. If set to\n * true/false, all checks will be enabled/disabled.\n */\nexport type SanityChecks = boolean | GranularSanityChecks;\n\n/** Object that can be used to configure the sanity checks granularly. */\nexport interface GranularSanityChecks {\n  doctype: boolean;\n  theme: boolean;\n  version: boolean;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  constructor(\n    highContrastModeDetector: HighContrastModeDetector,\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecks: SanityChecks,\n    @Inject(DOCUMENT) private _document: Document,\n  ) {\n    // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n    // in MatCommonModule.\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n\n    if (!this._hasDoneGlobalChecks) {\n      this._hasDoneGlobalChecks = true;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Inject in here so the reference to `Platform` can be removed in production mode.\n        const platform = inject(Platform, {optional: true});\n\n        if (this._checkIsEnabled('doctype')) {\n          _checkDoctypeIsDefined(this._document);\n        }\n\n        if (this._checkIsEnabled('theme')) {\n          _checkThemeIsPresent(this._document, !!platform?.isBrowser);\n        }\n\n        if (this._checkIsEnabled('version')) {\n          _checkCdkVersionMatch();\n        }\n      }\n    }\n  }\n\n  /** Gets whether a specific sanity check is enabled. */\n  private _checkIsEnabled(name: keyof GranularSanityChecks): boolean {\n    if (_isTestEnvironment()) {\n      return false;\n    }\n\n    if (typeof this._sanityChecks === 'boolean') {\n      return this._sanityChecks;\n    }\n\n    return !!this._sanityChecks[name];\n  }\n}\n\n/** Checks that the page has a doctype. */\nfunction _checkDoctypeIsDefined(doc: Document): void {\n  if (!doc.doctype) {\n    console.warn(\n      'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.',\n    );\n  }\n}\n\n/** Checks that a theme has been included. */\nfunction _checkThemeIsPresent(doc: Document, isBrowser: boolean): void {\n  // We need to assert that the `body` is defined, because these checks run very early\n  // and the `body` won't be defined if the consumer put their scripts in the `head`.\n  if (!doc.body || !isBrowser) {\n    return;\n  }\n\n  const testElement = doc.createElement('div');\n  testElement.classList.add('mat-theme-loaded-marker');\n  doc.body.appendChild(testElement);\n\n  const computedStyle = getComputedStyle(testElement);\n\n  // In some situations the computed style of the test element can be null. For example in\n  // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  if (computedStyle && computedStyle.display !== 'none') {\n    console.warn(\n      'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming',\n    );\n  }\n\n  testElement.remove();\n}\n\n/** Checks whether the Material version matches the CDK version. */\nfunction _checkCdkVersionMatch(): void {\n  if (VERSION.full !== CDK_VERSION.full) {\n    console.warn(\n      'The Angular Material version (' +\n        VERSION.full +\n        ') does not match ' +\n        'the Angular CDK version (' +\n        CDK_VERSION.full +\n        ').\\n' +\n        'Please ensure the versions of these two packages exactly match.',\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\ntype CanDisableCtor = Constructor<CanDisable> & AbstractConstructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends AbstractConstructor<{}>>(base: T): CanDisableCtor & T;\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled(): boolean {\n      return this._disabled;\n    }\n    set disabled(value: any) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractConstructor, Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n\n  /** Default color to fall back to if no value is set. */\n  defaultColor: ThemePalette | undefined;\n}\n\ntype CanColorCtor = Constructor<CanColor> & AbstractConstructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends AbstractConstructor<HasElementRef>>(\n  base: T,\n  defaultColor?: ThemePalette,\n): CanColorCtor & T;\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n  base: T,\n  defaultColor?: ThemePalette,\n): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n    defaultColor = defaultColor;\n\n    get color(): ThemePalette {\n      return this._color;\n    }\n    set color(value: ThemePalette) {\n      const colorPalette = value || this.defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\ntype CanDisableRippleCtor = Constructor<CanDisableRipple> & AbstractConstructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends AbstractConstructor<{}>>(\n  base: T,\n): CanDisableRippleCtor & T;\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple(): boolean {\n      return this._disableRipple;\n    }\n    set disableRipple(value: any) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Constructor, AbstractConstructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n\n  /** Tabindex to which to fall back to if no value is set. */\n  defaultTabIndex: number;\n}\n\ntype HasTabIndexCtor = Constructor<HasTabIndex> & AbstractConstructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends AbstractConstructor<CanDisable>>(\n  base: T,\n  defaultTabIndex?: number,\n): HasTabIndexCtor & T;\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(\n  base: T,\n  defaultTabIndex = 0,\n): HasTabIndexCtor & T {\n  return class extends base implements HasTabIndex {\n    private _tabIndex: number = defaultTabIndex;\n    defaultTabIndex = defaultTabIndex;\n\n    get tabIndex(): number {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState(): void;\n  /** Whether the component is in an error state. */\n  errorState: boolean;\n  /** An object used to control the error state of the component. */\n  errorStateMatcher: ErrorStateMatcher;\n}\n\ntype CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState> &\n  AbstractConstructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n\n  // These properties are defined as per the `MatFormFieldControl` interface. Since\n  // this mixin is commonly used with custom form-field controls, we respect the\n  // properties (also with the public name they need according to `MatFormFieldControl`).\n  ngControl: NgControl;\n  stateChanges: Subject<void>;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends AbstractConstructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T;\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /** An object used to control the error state of the component. */\n    errorStateMatcher: ErrorStateMatcher;\n\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? (this.ngControl.control as AbstractControl) : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\ntype HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T): HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\n          'This directive has already been marked as initialized and ' +\n            'should not be called twice.',\n        );\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<{}>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): {} {\n  return inject(LOCALE_ID);\n}\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D, L = any> {\n  /** The locale to use for all dates. */\n  protected locale: L;\n  protected readonly _localeChanges = new Subject<void>();\n\n  /** A stream that emits when the locale changes. */\n  readonly localeChanges: Observable<void> = this._localeChanges;\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj: unknown): D | null {\n    return this.isDateInstance(obj) && this.isValid(obj as D) ? (obj as D) : null;\n  }\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: L) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return (\n      this.getYear(first) - this.getYear(second) ||\n      this.getMonth(first) - this.getMonth(second) ||\n      this.getDate(first) - this.getDate(second)\n    );\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any;\n  };\n  display: {\n    dateInput: any;\n    monthLabel?: any;\n    monthYearLabel: any;\n    dateA11yLabel: any;\n    monthYearA11yLabel: any;\n  };\n};\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  useUtcForDisplay: boolean = false;\n\n  /** The injected locale. */\n  private readonly _matDateLocale = inject(MAT_DATE_LOCALE, {optional: true});\n\n  constructor(\n    /**\n     * @deprecated Now injected via inject(), param to be removed.\n     * @breaking-change 18.0.0\n     */\n    @Optional() @Inject(MAT_DATE_LOCALE) matDateLocale?: string,\n  ) {\n    super();\n    if (matDateLocale !== undefined) {\n      this._matDateLocale = matDateLocale;\n    }\n    super.setLocale(this._matDateLocale);\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n    return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n  }\n\n  getDateNames(): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n    return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n    return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getYearName(date: Date): string {\n    const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(\n      this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0),\n    );\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any, parseFormat?: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    const dtf = new Intl.DateTimeFormat(this.locale, {...displayFormat, timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date) + months,\n      this.getDate(date),\n    );\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date) + days,\n    );\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate()),\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  override deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  },\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, AbstractControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Directive, ElementRef, QueryList} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'},\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(\n  lines: QueryList<unknown>,\n  element: ElementRef<HTMLElement>,\n  prefix = 'mat',\n) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  element.nativeElement.classList.toggle(className, isAdd);\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Possible states for a ripple element. */\nexport const enum RippleState {\n  FADING_IN,\n  VISIBLE,\n  FADING_OUT,\n  HIDDEN,\n}\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: {fadeOutRipple(ref: RippleRef): void},\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig,\n    /* Whether animations are forcibly disabled for ripples through CSS. */\n    public _animationForciblyDisabledThroughCss = false,\n  ) {}\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {NgZone} from '@angular/core';\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nexport class RippleEventManager {\n  private _events = new Map<string, Map<HTMLElement, Set<EventListenerObject>>>();\n\n  /** Adds an event handler. */\n  addHandler(ngZone: NgZone, name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (handlersForEvent) {\n      const handlersForElement = handlersForEvent.get(element);\n\n      if (handlersForElement) {\n        handlersForElement.add(handler);\n      } else {\n        handlersForEvent.set(element, new Set([handler]));\n      }\n    } else {\n      this._events.set(name, new Map([[element, new Set([handler])]]));\n\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes an event handler. */\n  removeHandler(name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (!handlersForEvent) {\n      return;\n    }\n\n    const handlersForElement = handlersForEvent.get(element);\n\n    if (!handlersForElement) {\n      return;\n    }\n\n    handlersForElement.delete(handler);\n\n    if (handlersForElement.size === 0) {\n      handlersForEvent.delete(element);\n    }\n\n    if (handlersForEvent.size === 0) {\n      this._events.delete(name);\n      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n    }\n  }\n\n  /** Event handler that is bound and which dispatches the events to the different targets. */\n  private _delegateEventHandler = (event: Event) => {\n    const target = _getEventTarget(event);\n\n    if (target) {\n      this._events.get(event.type)?.forEach((handlers, element) => {\n        if (element === target || element.contains(target as Node)) {\n          handlers.forEach(handler => handler.handleEvent(event));\n        }\n      });\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {RippleRef, RippleState, RippleConfig} from './ripple-ref';\nimport {RippleEventManager} from './ripple-event-manager';\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/** Interfaces the defines ripple element transition event listeners. */\ninterface RippleEventListeners {\n  onTransitionEnd: EventListener;\n  onTransitionCancel: EventListener;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 225,\n  exitDuration: 150,\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer implements EventListenerObject {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /**\n   * Map of currently active ripple references.\n   * The ripple reference is mapped to its element event listeners.\n   * The reason why `| null` is used is that event listeners are added only\n   * when the condition is truthy (see the `_startFadeOutTransition` method).\n   */\n  private _activeRipples = new Map<RippleRef, RippleEventListeners | null>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Whether pointer-up event listeners have been registered. */\n  private _pointerUpEventsRegistered = false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  private static _eventManager = new RippleEventManager();\n\n  constructor(\n    private _target: RippleTarget,\n    private _ngZone: NgZone,\n    elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n    private _platform: Platform,\n  ) {\n    // Only do anything if we're on the browser.\n    if (_platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = (this._containerRect =\n      this._containerRect || this._containerElement.getBoundingClientRect());\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const enterDuration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n\n    ripple.style.transitionDuration = `${enterDuration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical to ensure that the `scale` animates properly.\n    // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    const computedStyles = window.getComputedStyle(ripple);\n    const userTransitionProperty = computedStyles.transitionProperty;\n    const userTransitionDuration = computedStyles.transitionDuration;\n\n    // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n    // `transition: none` or `display: none`). This is technically unexpected since animations are\n    // controlled through the animation config, but this exists for backwards compatibility. This\n    // logic does not need to be super accurate since it covers some edge cases which can be easily\n    // avoided by users.\n    const animationForciblyDisabledThroughCss =\n      userTransitionProperty === 'none' ||\n      // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n      // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n      userTransitionDuration === '0s' ||\n      userTransitionDuration === '0s, 0s' ||\n      // If the container is 0x0, it's likely `display: none`.\n      (containerRect.width === 0 && containerRect.height === 0);\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n\n    // Start the enter animation by setting the transform/scale to 100%. The animation will\n    // execute as part of this statement because we forced a style recalculation before.\n    // Note: We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    ripple.style.transform = 'scale3d(1, 1, 1)';\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    let eventListeners: RippleEventListeners | null = null;\n\n    // Do not register the `transition` event listener if fade-in and fade-out duration\n    // are set to zero. The events won't fire anyway and we can save resources here.\n    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n      this._ngZone.runOutsideAngular(() => {\n        const onTransitionEnd = () => this._finishRippleTransition(rippleRef);\n        const onTransitionCancel = () => this._destroyRipple(rippleRef);\n        ripple.addEventListener('transitionend', onTransitionEnd);\n        // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n        // directly as otherwise we would keep it part of the ripple container forever.\n        // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n        ripple.addEventListener('transitioncancel', onTransitionCancel);\n        eventListeners = {onTransitionEnd, onTransitionCancel};\n      });\n    }\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.set(rippleRef, eventListeners);\n\n    // In case there is no fade-in transition duration, we need to manually call the transition\n    // end listener because `transitionend` doesn't fire if there is no transition.\n    if (animationForciblyDisabledThroughCss || !enterDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples already fading out or hidden, this should be a noop.\n    if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    // This starts the fade-out transition and will fire the transition end listener that\n    // removes the ripple element from the DOM.\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // In case there is no fade-out transition duration, we need to manually call the\n    // transition end listener because `transitionend` doesn't fire if there is no transition.\n    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Fades out all currently active non-persistent ripples. */\n  fadeOutAllNonPersistent() {\n    this._getActiveRipples().forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n    this._triggerElement = element;\n\n    // Use event delegation for the trigger events since they're\n    // set up during creation and are performance-sensitive.\n    pointerDownEvents.forEach(type => {\n      RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n    });\n  }\n\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event: Event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event as MouseEvent);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event as TouchEvent);\n    } else {\n      this._onPointerUp();\n    }\n\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      // The events for hiding the ripple are bound directly on the trigger, because:\n      // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n      // delegation will be diminished by having to look through all the data structures often.\n      // 2. They aren't as performance-sensitive, because they're bound only after the user\n      // has interacted with an element.\n      this._ngZone.runOutsideAngular(() => {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement!.addEventListener(type, this, passiveCapturingEventOptions);\n        });\n      });\n\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n\n  /** Method that will be called if the fade-in or fade-in transition completed. */\n  private _finishRippleTransition(rippleRef: RippleRef) {\n    if (rippleRef.state === RippleState.FADING_IN) {\n      this._startFadeOutTransition(rippleRef);\n    } else if (rippleRef.state === RippleState.FADING_OUT) {\n      this._destroyRipple(rippleRef);\n    }\n  }\n\n  /**\n   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n   * is not held down anymore.\n   */\n  private _startFadeOutTransition(rippleRef: RippleRef) {\n    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n    const {persistent} = rippleRef.config;\n\n    rippleRef.state = RippleState.VISIBLE;\n\n    // When the timer runs out while the user has kept their pointer down, we want to\n    // keep only the persistent ripples and the latest transient ripple. We do this,\n    // because we don't want stacked transient ripples to appear after their enter\n    // animation has finished.\n    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n      rippleRef.fadeOut();\n    }\n  }\n\n  /** Destroys the given ripple by removing it from the DOM and updating its state. */\n  private _destroyRipple(rippleRef: RippleRef) {\n    const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n    this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // If the current ref is the most recent transient ripple, unset it\n    // avoid memory leaks.\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    rippleRef.state = RippleState.HIDDEN;\n    if (eventListeners !== null) {\n      rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n      rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n    }\n    rippleRef.element.remove();\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown(event: MouseEvent) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent =\n      this._lastTouchStartEvent &&\n      Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart(event: TouchEvent) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches as TouchList | undefined;\n\n      // According to the typings the touches should always be defined, but in some cases\n      // the browser appears to not assign them in tests which leads to flakes.\n      if (touches) {\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._getActiveRipples().forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible =\n        ripple.state === RippleState.VISIBLE ||\n        (ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN);\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  private _getActiveRipples(): RippleRef[] {\n    return Array.from(this._activeRipples.keys());\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    const trigger = this._triggerElement;\n\n    if (trigger) {\n      pointerDownEvents.forEach(type =>\n        RippleRenderer._eventManager.removeHandler(type, trigger, this),\n      );\n\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type =>\n          trigger.removeEventListener(type, this, passiveCapturingEventOptions),\n        );\n      }\n    }\n  }\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleAnimationConfig, RippleConfig, RippleRef} from './ripple-ref';\nimport {RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Default configuration for the animation duration of the ripples. There are two phases with\n   * different durations for the ripples: `enter` and `leave`. The durations will be overwritten\n   * by the value of `matRippleAnimation` or if the `NoopAnimationsModule` is included.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken<RippleGlobalOptions>(\n  'mat-ripple-global-options',\n);\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded',\n  },\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value) {\n      this.fadeOutAllNonPersistent();\n    }\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() {\n    return this._trigger || this._elementRef.nativeElement;\n  }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n  _isInitialized: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n  ) {\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Fades out all currently showing non-persistent ripple elements. */\n  fadeOutAllNonPersistent() {\n    this._rippleRenderer.fadeOutAllNonPersistent();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {\n        ...this._globalOptions.animation,\n        ...(this._animationMode === 'NoopAnimations' ? {enterDuration: 0, exitDuration: 0} : {}),\n        ...this.animation,\n      },\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates relative to the viewport.\n   * @param x Coordinate along the X axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param y Coordinate along the Y axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n    '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n   * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n   */\n  @Input() appearance: 'minimal' | 'full' = 'full';\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox';\nimport {MatCommonModule} from '../../common-behaviors/common-module';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox],\n})\nexport class MatPseudoCheckboxModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n  inertGroups?: boolean;\n  hideSingleSelectionIndicator?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT = new InjectionToken<MatOptionParentComponent>(\n  'MAT_OPTION_PARENT_COMPONENT',\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Inject,\n  Optional,\n  InjectionToken,\n  booleanAttribute,\n} from '@angular/core';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_OPTGROUP = new InjectionToken<MatOptgroup>('MatOptgroup');\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-mdc-optgroup',\n    '[attr.role]': '_inert ? null : \"group\"',\n    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n    '[attr.aria-labelledby]': '_inert ? null : _labelId',\n  },\n  providers: [{provide: MAT_OPTGROUP, useExisting: MatOptgroup}],\n})\nexport class MatOptgroup {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** whether the option group is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n\n  /** Whether the group is in inert a11y mode. */\n  _inert: boolean;\n\n  constructor(@Inject(MAT_OPTION_PARENT_COMPONENT) @Optional() parent?: MatOptionParentComponent) {\n    this._inert = parent?.inertGroups ?? false;\n  }\n}\n", "<span\n  class=\"mat-mdc-optgroup-label\"\n  role=\"presentation\"\n  [class.mdc-list-item--disabled]=\"disabled\"\n  [id]=\"_labelId\">\n  <span class=\"mdc-list-item__primary-text\">{{ label }} <ng-content></ng-content></span>\n</span>\n\n<ng-content select=\"mat-option, ng-container\"></ng-content>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ChangeDetectorRef,\n  Optional,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ViewChild,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MAT_OPTGROUP, MatOptgroup} from './optgroup';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange<T = any> {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption<T>,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false,\n  ) {}\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[class.mdc-list-item--selected]': 'selected',\n    '[class.mat-mdc-option-multiple]': 'multiple',\n    '[class.mat-mdc-option-active]': 'active',\n    '[class.mdc-list-item--disabled]': 'disabled',\n    '[id]': 'id',\n    // Set aria-selected to false for non-selected items and true for selected items. Conform to\n    // [WAI ARIA Listbox authoring practices guide](\n    //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n    // selected option has either aria-selected or aria-checked  set to true. All options that are\n    // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n    // aria-selected implementation of Chips and List components.\n    //\n    // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n    // every option as \"selected\" (#21491).\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-mdc-option mdc-list-item',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() {\n    return this._parent && this._parent.multiple;\n  }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** The form value of the option. */\n  @Input() value: T;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return (this.group && this.group.disabled) || this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple(): boolean {\n    return !!(this._parent && this._parent.disableRipple);\n  }\n\n  /** Whether to display checkmark for single-selection. */\n  get hideSingleSelectionIndicator(): boolean {\n    return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n  }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange<T>>();\n\n  /** Element containing the option's text. */\n  @ViewChild('text', {static: true}) _text: ElementRef<HTMLElement> | undefined;\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    public _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() @Inject(MAT_OPTGROUP) public group: MatOptgroup,\n  ) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._text?.nativeElement.textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(emitEvent = true): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(emitEvent = true): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n  // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n  // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        if (this._mostRecentViewValue) {\n          this._stateChanges.next();\n        }\n\n        this._mostRecentViewValue = viewValue;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange<T>(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n  optionIndex: number,\n  options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>,\n): number {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n  optionOffset: number,\n  optionHeight: number,\n  currentScrollPosition: number,\n  panelHeight: number,\n): number {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n", "<!-- Set aria-hidden=\"true\" to this DOM node and other decorative nodes in this file. This might\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\n@if (multiple) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        [state]=\"selected ? 'checked' : 'unchecked'\"\n        aria-hidden=\"true\"></mat-pseudo-checkbox>\n}\n\n<ng-content select=\"mat-icon\"></ng-content>\n\n<span class=\"mdc-list-item__primary-text\" #text><ng-content></ng-content></span>\n\n<!-- Render checkmark at the end for single-selection. -->\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        state=\"checked\"\n        aria-hidden=\"true\"\n        appearance=\"minimal\"></mat-pseudo-checkbox>\n}\n\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n@if (group && group._inert) {\n    <span class=\"cdk-visually-hidden\">({{ group.label }})</span>\n}\n\n<div class=\"mat-mdc-option-ripple mat-mdc-focus-indicator\" aria-hidden=\"true\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup],\n})\nexport class MatOptionModule {}\n\nexport * from './option';\nexport * from './optgroup';\nexport * from './option-parent';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ANIMATION_MODULE_TYPE,\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  inject,\n} from '@angular/core';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple} from '../ripple';\nimport {Platform} from '@angular/cdk/platform';\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {capture: true};\n\n/** The events that should trigger the initialization of the ripple. */\nconst rippleInteractionEvents = ['focus', 'click', 'mouseenter', 'touchstart'];\n\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n */\n@Injectable({providedIn: 'root'})\nexport class MatRippleLoader implements OnDestroy {\n  private _document = inject(DOCUMENT, {optional: true});\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {optional: true});\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n\n  constructor() {\n    this._ngZone.runOutsideAngular(() => {\n      for (const event of rippleInteractionEvents) {\n        this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    for (const event of rippleInteractionEvents) {\n      this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n    }\n  }\n\n  /**\n   * Configures the ripple that will be rendered by the ripple loader.\n   *\n   * Stores the given information about how the ripple should be configured on the host\n   * element so that it can later be retrived & used when the ripple is actually created.\n   */\n  configureRipple(\n    host: HTMLElement,\n    config: {\n      className?: string;\n      centered?: boolean;\n      disabled?: boolean;\n    },\n  ): void {\n    // Indicates that the ripple has not yet been rendered for this component.\n    host.setAttribute(matRippleUninitialized, '');\n\n    // Store the additional class name(s) that should be added to the ripple element.\n    if (config.className || !host.hasAttribute(matRippleClassName)) {\n      host.setAttribute(matRippleClassName, config.className || '');\n    }\n\n    // Store whether the ripple should be centered.\n    if (config.centered) {\n      host.setAttribute(matRippleCentered, '');\n    }\n\n    if (config.disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    }\n  }\n\n  /** Returns the ripple instance for the given host element. */\n  getRipple(host: HTMLElement): MatRipple | undefined {\n    if ((host as any).matRipple) {\n      return (host as any).matRipple;\n    }\n    return this.createRipple(host);\n  }\n\n  /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n  setDisabled(host: HTMLElement, disabled: boolean): void {\n    const ripple = (host as any).matRipple as MatRipple | undefined;\n\n    // If the ripple has already been instantiated, just disable it.\n    if (ripple) {\n      ripple.disabled = disabled;\n      return;\n    }\n\n    // Otherwise, set an attribute so we know what the\n    // disabled state should be when the ripple is initialized.\n    if (disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    } else {\n      host.removeAttribute(matRippleDisabled);\n    }\n  }\n\n  /** Handles creating and attaching component internals when a component it is initially interacted with. */\n  private _onInteraction = (event: Event) => {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const eventTarget = event.target as HTMLElement;\n\n    // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n\n    const element = eventTarget.closest(`[${matRippleUninitialized}]`);\n    if (element) {\n      this.createRipple(element as HTMLElement);\n    }\n  };\n\n  /** Creates a MatRipple and appends it to the given element. */\n  createRipple(host: HTMLElement): MatRipple | undefined {\n    if (!this._document) {\n      return;\n    }\n\n    // Create the ripple element.\n    host.querySelector('.mat-ripple')?.remove();\n    const rippleEl = this._document!.createElement('span');\n    rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName)!);\n    host.append(rippleEl);\n\n    // Create the MatRipple.\n    const ripple = new MatRipple(\n      new ElementRef(rippleEl),\n      this._ngZone,\n      this._platform,\n      this._globalRippleOptions ? this._globalRippleOptions : undefined,\n      this._animationMode ? this._animationMode : undefined,\n    );\n    ripple._isInitialized = true;\n    ripple.trigger = host;\n    ripple.centered = host.hasAttribute(matRippleCentered);\n    ripple.disabled = host.hasAttribute(matRippleDisabled);\n    this.attachRipple(host, ripple);\n    return ripple;\n  }\n\n  attachRipple(host: Element, ripple: MatRipple): void {\n    host.removeAttribute(matRippleUninitialized);\n    (host as any).matRipple = ripple;\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["DIR_DOCUMENT", "InjectionToken", "providedIn", "factory", "DIR_DOCUMENT_FACTORY", "inject", "DOCUMENT", "RTL_LOCALE_PATTERN", "_resolveDirectionality", "rawValue", "value", "toLowerCase", "navigator", "language", "test", "Directionality", "constructor", "_document", "change", "EventEmitter", "bodyDir", "body", "dir", "htmlDir", "documentElement", "ngOnDestroy", "complete", "ɵfac", "Directionality_Factory", "t", "ɵɵinject", "ɵprov", "ɵɵdefineInjectable", "token", "ɵsetClassMetadata", "Injectable", "Optional", "Inject", "Dir", "_dir", "_isInitialized", "previousValue", "_rawDir", "emit", "ngAfterContentInit", "ɵɵdefineDirective", "type", "selectors", "hostVars", "hostBindings", "Dir_HostBindings", "rf", "ctx", "i0", "ɵɵattribute", "inputs", "outputs", "exportAs", "features", "ɵɵProvidersFeature", "provide", "useExisting", "Directive", "args", "selector", "providers", "host", "Output", "Input", "BidiModule", "ɵɵdefineNgModule", "declarations", "exports", "ɵɵdefineInjector", "NgModule", "hasV8BreakIterator", "Intl", "v8BreakIterator", "Platform", "constructor", "_platformId", "isBrowser", "isPlatformBrowser", "document", "EDGE", "test", "navigator", "userAgent", "TRIDENT", "BLINK", "window", "chrome", "CSS", "WEBKIT", "IOS", "FIREFOX", "ANDROID", "SAFARI", "ɵfac", "Platform_Factory", "t", "ɵɵinject", "PLATFORM_ID", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "PlatformModule", "ɵɵdefineNgModule", "type", "ɵɵdefineInjector", "NgModule", "supportedInputTypes", "candidateInputTypes", "getSupportedInputTypes", "Set", "featureTestInput", "createElement", "filter", "value", "setAttribute", "supportsPassiveEvents", "supportsPassiveEventListeners", "addEventListener", "Object", "defineProperty", "get", "normalizePassiveListenerOptions", "options", "capture", "rtlScrollAxisType", "scrollBehaviorSupported", "supportsScrollBehavior", "Element", "documentElement", "style", "scrollToFunction", "prototype", "scrollTo", "toString", "getRtlScrollAxisType", "scrollContainer", "containerStyle", "dir", "width", "overflow", "visibility", "pointerEvents", "position", "content", "contentStyle", "height", "appendChild", "body", "scrollLeft", "remove", "shadowDomIsSupported", "_supportsShadowDom", "head", "createShadowRoot", "attachShadow", "_getShadowRoot", "element", "rootNode", "getRootNode", "ShadowRoot", "_getFocusedElementPierceShadowDom", "activeElement", "shadowRoot", "newActiveElement", "_getEventTarget", "event", "composedPath", "target", "_isTestEnvironment", "__karma__", "jasmine", "jest", "Mocha", "MutationObserverFactory", "create", "callback", "MutationObserver", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "ContentObserver", "constructor", "_mutationObserverFactory", "_observedElements", "Map", "ngOnDestroy", "forEach", "_", "element", "_cleanupObserver", "observe", "elementOrRef", "coerceElement", "Observable", "observer", "stream", "_observeElement", "subscription", "subscribe", "unsubscribe", "_unobserveElement", "has", "Subject", "mutations", "next", "characterData", "childList", "subtree", "set", "count", "get", "disconnect", "complete", "delete", "CdkObserveContent", "disabled", "_disabled", "value", "_unsubscribe", "_subscribe", "debounce", "_debounce", "coerceNumberProperty", "_contentObserver", "_elementRef", "_ngZone", "event", "EventEmitter", "_currentSubscription", "ngAfterContentInit", "runOutsideAngular", "pipe", "debounceTime", "ElementRef", "NgZone", "ɵdir", "selectors", "inputs", "booleanAttribute", "outputs", "exportAs", "features", "Directive", "args", "selector", "Output", "Input", "alias", "transform", "ObserversModule", "declarations", "exports", "NgModule", "providers", "LayoutModule", "NgModule", "mediaQueriesForWebkitCompatibility", "Set", "mediaQueryStyleNode", "MediaMatcher", "constructor", "_platform", "_nonce", "_matchMedia", "isBrowser", "window", "matchMedia", "bind", "noopMatchMedia", "query", "WEBKIT", "BLINK", "createEmptyStyleRule", "ɵfac", "MediaMatcher_Factory", "t", "Platform", "CSP_NONCE", "ɵprov", "factory", "providedIn", "Injectable", "Optional", "Inject", "nonce", "has", "document", "createElement", "setAttribute", "head", "appendChild", "sheet", "insertRule", "add", "e", "console", "error", "matches", "media", "addListener", "removeListener", "BreakpointObserver", "_mediaMatcher", "_zone", "_queries", "Map", "_destroySubject", "Subject", "ngOnDestroy", "next", "complete", "isMatched", "value", "queries", "splitQueries", "coerceArray", "some", "mediaQuery", "_registerQuery", "mql", "observe", "observables", "map", "observable", "stateObservable", "combineLatest", "concat", "pipe", "take", "skip", "debounceTime", "breakpointStates", "response", "breakpoints", "forEach", "get", "queryObservable", "Observable", "observer", "handler", "run", "startWith", "takeUntil", "output", "set", "NgZone", "split", "reduce", "a1", "a2", "trim", "ID_DELIMITER", "addAriaReferencedId", "el", "attr", "id", "ids", "getAriaReferenceIds", "some", "existingId", "trim", "push", "setAttribute", "join", "removeAriaReferencedId", "filteredIds", "filter", "val", "length", "removeAttribute", "getAttribute", "match", "CDK_DESCRIBEDBY_ID_PREFIX", "CDK_DESCRIBEDBY_HOST_ATTRIBUTE", "nextId", "AriaDescriber", "constructor", "_document", "_platform", "_messageRegistry", "Map", "_messagesContainer", "_id", "inject", "APP_ID", "describe", "hostElement", "message", "role", "_canBeDescribed", "key", "getKey", "setMessageId", "set", "messageElement", "referenceCount", "has", "_createMessageElement", "_isElementDescribedByMessage", "_addMessageReference", "removeDescription", "_isElementNode", "_removeMessageReference", "registeredMessage", "get", "_deleteMessageElement", "childNodes", "length", "remove", "ngOnDestroy", "describedElements", "querySelectorAll", "i", "_removeCdkDescribedByReferenceIds", "removeAttribute", "clear", "createElement", "textContent", "setAttribute", "_createMessagesContainer", "appendChild", "delete", "containerClassName", "serverContainers", "messagesContainer", "style", "visibility", "classList", "add", "isBrowser", "body", "element", "originalReferenceIds", "getAriaReferenceIds", "filter", "id", "indexOf", "join", "addAriaReferencedId", "removeAriaReferencedId", "referenceIds", "messageId", "trimmedMessage", "trim", "ariaLabel", "getAttribute", "nodeType", "ELEMENT_NODE", "ɵfac", "AriaDescriber_Factory", "t", "ɵɵinject", "DOCUMENT", "Platform", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "serviceId", "ListKeyManager", "_items", "_activeItemIndex", "_activeItem", "_wrap", "_letterKeyStream", "Subject", "_typeaheadSubscription", "Subscription", "EMPTY", "_vertical", "_allowedModifierKeys", "_homeAndEnd", "_pageUpAndDown", "enabled", "delta", "_skipPredicateFn", "item", "disabled", "_pressedLetters", "tabOut", "change", "QueryList", "_itemChangesSubscription", "changes", "subscribe", "newItems", "itemArray", "toArray", "newIndex", "skipPredicate", "predicate", "withWrap", "shouldWrap", "withVerticalOrientation", "withHorizontalOrientation", "direction", "_horizontal", "withAllowedModifierKeys", "keys", "withTypeAhead", "debounceInterval", "ngDevMode", "some", "getLabel", "Error", "unsubscribe", "pipe", "tap", "letter", "push", "debounceTime", "map", "inputString", "items", "_getItemsArray", "index", "toUpperCase", "setActiveItem", "cancelTypeahead", "withHomeAndEnd", "withPageUpDown", "previousActiveItem", "updateActiveItem", "next", "onKeydown", "event", "keyCode", "modifiers", "isModifierAllowed", "every", "modifier", "TAB", "DOWN_ARROW", "setNextItemActive", "UP_ARROW", "setPreviousItemActive", "RIGHT_ARROW", "LEFT_ARROW", "HOME", "setFirstItemActive", "END", "setLastItemActive", "PAGE_UP", "targetIndex", "_setActiveItemByIndex", "PAGE_DOWN", "itemsLength", "hasModifierKey", "toLocaleUpperCase", "A", "Z", "ZERO", "NINE", "String", "fromCharCode", "preventDefault", "activeItemIndex", "activeItem", "isTyping", "_setActiveItemByDelta", "destroy", "complete", "_setActiveInWrapMode", "_setActiveInDefaultMode", "fallbackDelta", "FocusKeyManager", "ListKeyManager", "constructor", "_origin", "setFocusOrigin", "origin", "setActiveItem", "item", "activeItem", "focus", "InteractivityChecker", "constructor", "_platform", "isDisabled", "element", "hasAttribute", "isVisible", "hasGeometry", "getComputedStyle", "visibility", "isTabbable", "isBrowser", "frameElement", "getFrameElement", "getWindow", "getTabIndexValue", "nodeName", "toLowerCase", "tabIndexValue", "WEBKIT", "IOS", "isPotentiallyTabbableIOS", "FIREFOX", "tabIndex", "isFocusable", "config", "isPotentiallyFocusable", "ignoreVisibility", "ɵɵinject", "Platform", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "ɵfac", "providedIn", "ɵsetClassMetadata", "Injectable", "window", "offsetWidth", "offsetHeight", "getClientRects", "length", "isNativeFormElement", "isHiddenInput", "isInputElement", "type", "isAnchorWithHref", "isAnchorElement", "hasValidTabIndex", "undefined", "getAttribute", "isNaN", "parseInt", "inputType", "node", "ownerDocument", "defaultView", "FocusTrap", "enabled", "_enabled", "value", "_startAnchor", "_endAnchor", "_toggleAnchorTabIndex", "_element", "_checker", "_ngZone", "_document", "deferAnchors", "_hasAttached", "startAnchorListener", "focusLastTabbableElement", "endAnchorListener", "focusFirstTabbableElement", "attachAnchors", "destroy", "startAnchor", "endAnchor", "removeEventListener", "remove", "runOutsideAngular", "_createAnchor", "addEventListener", "parentNode", "insertBefore", "nextSibling", "focusInitialElementWhenReady", "options", "Promise", "resolve", "_executeOnStable", "focusInitialElement", "focusFirstTabbableElementWhenReady", "focusLastTabbableElementWhenReady", "_getRegionBoundary", "bound", "markers", "querySelectorAll", "ngDevMode", "i", "console", "warn", "_getFirstTabbableElement", "_getLastTabbableElement", "redirectToElement", "querySelector", "focusableChild", "focus", "hasAttached", "root", "children", "tabbableChild", "nodeType", "ELEMENT_NODE", "anchor", "createElement", "classList", "add", "setAttribute", "isEnabled", "removeAttribute", "toggleAnchors", "fn", "isStable", "onStable", "pipe", "take", "subscribe", "FocusTrapFactory", "create", "deferCaptureElements", "FocusTrapFactory_Factory", "t", "NgZone", "DOCUMENT", "Inject", "CdkTrapFocus", "focusTrap", "_elementRef", "_focusTrapFactory", "_previouslyFocusedElement", "nativeElement", "ngOnDestroy", "ngAfterContentInit", "autoCapture", "_captureFocus", "ngDoCheck", "ngOnChanges", "changes", "autoCaptureChange", "firstChange", "_getFocusedElementPierceShadowDom", "CdkTrapFocus_Factory", "ɵɵdirectiveInject", "ElementRef", "ɵɵdefineDirective", "selectors", "inputs", "booleanAttribute", "exportAs", "features", "ɵɵInputTransformsFeature", "ɵɵNgOnChangesFeature", "Directive", "args", "selector", "Input", "alias", "transform", "ConfigurableFocusTrap", "_focusTrapManager", "register", "deregister", "_inertStrategy", "defer", "_enable", "preventFocus", "_disable", "allowFocus", "FOCUS_TRAP_INERT_STRATEGY", "InjectionToken", "EventListenerFocusTrapInertStrategy", "_listener", "e", "_trapFocus", "event", "target", "focusTrapRoot", "contains", "closest", "setTimeout", "activeElement", "FocusTrapManager", "_focusTrapStack", "filter", "ft", "stack", "push", "indexOf", "splice", "ConfigurableFocusTrapFactory", "configObject", "Optional", "isFakeMousedownFromScreenReader", "buttons", "detail", "isFakeTouchstartFromScreenReader", "touch", "touches", "changedTouches", "identifier", "radiusX", "radiusY", "INPUT_MODALITY_DETECTOR_OPTIONS", "INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS", "ignoreKeys", "ALT", "CONTROL", "MAC_META", "META", "SHIFT", "TOUCH_BUFFER_MS", "modalityEventListenerOptions", "normalizePassiveListenerOptions", "passive", "capture", "InputModalityDetector", "mostRecentModality", "_modality", "ngZone", "document", "_mostRecentTarget", "BehaviorSubject", "_lastTouchMs", "_onKeydown", "_options", "some", "keyCode", "next", "_getEventTarget", "_onMousedown", "Date", "now", "_onTouchstart", "modalityDetected", "skip", "modalityChanged", "distinctUntilChanged", "complete", "LIVE_ANNOUNCER_ELEMENT_TOKEN", "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY", "LIVE_ANNOUNCER_DEFAULT_OPTIONS", "uniqueIds", "LiveAnnouncer", "elementToken", "_defaultOptions", "_liveElement", "_createLiveElement", "announce", "message", "defaultOptions", "politeness", "duration", "clear", "clearTimeout", "_previousTimeout", "id", "_exposeAnnouncerToModals", "_currentPromise", "_currentResolve", "textContent", "elementClass", "previousElements", "getElementsByClassName", "liveEl", "body", "appendChild", "modals", "modal", "ariaOwns", "LiveAnnouncer_Factory", "CdkAriaLive", "_politeness", "_subscription", "unsubscribe", "_contentObserver", "observe", "elementText", "_previousAnnouncedText", "_liveAnnouncer", "ContentObserver", "FOCUS_MONITOR_DEFAULT_OPTIONS", "captureEventListenerOptions", "FocusMonitor", "_inputModalityDetector", "_origin", "_windowFocused", "_originFromTouchInteraction", "_elementInfo", "Map", "_monitoredElementCount", "_rootNodeFocusListenerCount", "_windowFocusListener", "_windowFocusTimeoutId", "_stopInputModalityDetector", "Subject", "_rootNodeFocusAndBlurListener", "parentElement", "_onFocus", "_onBlur", "_detectionMode", "detectionMode", "monitor", "checkChildren", "coerceElement", "of", "rootNode", "_getShadowRoot", "_getDocument", "cachedInfo", "get", "subject", "info", "set", "_registerGlobalListeners", "stopMonitoring", "elementInfo", "_setClasses", "delete", "_removeGlobalListeners", "focusVia", "origin", "focusedElement", "_getClosestElementsInfo", "forEach", "currentElement", "_originChanged", "_setOrigin", "_info", "_getWindow", "doc", "_getFocusOrigin", "focusEventTarget", "_shouldBeAttributedToTouch", "_lastFocusOrigin", "_isLastInteractionFromInputLabel", "toggle", "isFromInteraction", "_originTimeoutId", "ms", "relatedTarget", "Node", "_emitOrigin", "observers", "run", "rootNodeFocusListeners", "takeUntil", "modality", "has", "results", "mostRecentTarget", "disabled", "labels", "CdkMonitorFocus", "_focusMonitor", "_focusOrigin", "cdkFocusChange", "EventEmitter", "focusOrigin", "ngAfterViewInit", "_monitorSubscription", "emit", "outputs", "Output", "BLACK_ON_WHITE_CSS_CLASS", "WHITE_ON_BLACK_CSS_CLASS", "HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS", "HighContrastModeDetector", "_breakpointSubscription", "inject", "BreakpointObserver", "_hasCheckedHighContrastMode", "_applyBodyHighContrastModeCssClasses", "getHighContrastMode", "testElement", "style", "backgroundColor", "position", "documentWindow", "computedStyle", "computedColor", "replace", "bodyClasses", "mode", "HighContrastModeDetector_Factory", "A11yModule", "highContrastModeDetector", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "ObserversModule", "exports", "ɵinj", "ɵɵdefineInjector", "NgModule", "_c0", "_c1", "_c2", "MatOption_Conditional_0_Template", "rf", "ctx", "ctx_r0", "selected", "MatOption_Conditional_5_Template", "ctx_r2", "MatOption_Conditional_6_Template", "ctx_r3", "_c3", "_c4", "VERSION", "Version", "AnimationCurves", "STANDARD_CURVE", "DECELERATION_CURVE", "ACCELERATION_CURVE", "SHARP_CURVE", "AnimationDurations", "COMPLEX", "ENTERING", "EXITING", "MATERIAL_SANITY_CHECKS_FACTORY", "MATERIAL_SANITY_CHECKS", "InjectionToken", "providedIn", "factory", "MatCommonModule", "constructor", "highContrastModeDetector", "_sanityChecks", "_document", "_hasDoneGlobalChecks", "_applyBodyHighContrastModeCssClasses", "ngDevMode", "platform", "inject", "Platform", "optional", "_checkIsEnabled", "_checkDoctypeIsDefined", "_checkThemeIsPresent", "isBrowser", "_checkCdkVersionMatch", "name", "_isTestEnvironment", "HighContrastModeDetector", "DOCUMENT", "imports", "BidiModule", "exports", "NgModule", "args", "Optional", "Inject", "doc", "doctype", "console", "warn", "body", "testElement", "createElement", "classList", "add", "appendChild", "computedStyle", "getComputedStyle", "display", "remove", "full", "VERSION$1", "mixinColor", "base", "defaultColor", "color", "_color", "value", "colorPalette", "_elementRef", "nativeElement", "classList", "remove", "add", "constructor", "args", "mixinErrorState", "base", "updateErrorState", "oldState", "errorState", "parent", "_parentFormGroup", "_parentForm", "matcher", "errorStateMatcher", "_defaultErrorStateMatcher", "control", "ngControl", "newState", "isErrorState", "stateChanges", "next", "constructor", "args", "MAT_DATE_LOCALE", "InjectionToken", "providedIn", "factory", "MAT_DATE_LOCALE_FACTORY", "inject", "LOCALE_ID", "DateAdapter", "constructor", "_localeChanges", "Subject", "localeChanges", "getValidDateOrNull", "obj", "isDateInstance", "isValid", "deserialize", "value", "invalid", "setLocale", "locale", "next", "compareDate", "first", "second", "getYear", "getMonth", "getDate", "sameDate", "firstValid", "secondValid", "clampDate", "date", "min", "max", "MAT_DATE_FORMATS", "ISO_8601_REGEX", "range", "length", "valueFunction", "valuesArray", "Array", "i", "NativeDateAdapter", "matDateLocale", "useUtcForDisplay", "_matDateLocale", "optional", "undefined", "getFullYear", "getDayOfWeek", "getDay", "getMonthNames", "style", "dtf", "Intl", "DateTimeFormat", "month", "timeZone", "_format", "Date", "getDateNames", "day", "getDayOfWeekNames", "weekday", "getYearName", "year", "getFirstDayOfWeek", "getNumDaysInMonth", "_createDateWithOverflow", "clone", "getTime", "createDate", "ngDevMode", "Error", "result", "today", "parse", "parseFormat", "format", "displayFormat", "addCalendarYears", "years", "addCalendarMonths", "months", "newDate", "addCalendarDays", "days", "toIso8601", "getUTCFullYear", "_2digit", "getUTCMonth", "getUTCDate", "join", "test", "isNaN", "NaN", "d", "setFullYear", "setHours", "n", "slice", "setUTCFullYear", "setUTCHours", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "ɵfac", "NativeDateAdapter_Factory", "t", "Injectable", "Optional", "Inject", "MAT_NATIVE_DATE_FORMATS", "dateInput", "display", "monthYearLabel", "dateA11yLabel", "monthYearA11yLabel", "NativeDateModule", "provide", "useClass", "NgModule", "args", "providers", "MatNativeDateModule", "ɵmod", "imports", "ɵinj", "useValue", "ShowOnDirtyErrorStateMatcher", "isErrorState", "control", "form", "dirty", "submitted", "ErrorStateMatcher", "touched", "ɵprov", "MatLine", "selectors", "hostAttrs", "Directive", "selector", "host", "MatLineModule", "ɵmod", "declarations", "MatLine", "imports", "MatCommonModule", "exports", "NgModule", "args", "RippleRef", "constructor", "_renderer", "element", "config", "_animationForciblyDisabledThroughCss", "state", "fadeOut", "fadeOutRipple", "passiveCapturingEventOptions$1", "normalizePassiveListenerOptions", "passive", "capture", "RippleEventManager", "_events", "Map", "_delegateEventHandler", "event", "target", "_getEventTarget", "get", "type", "forEach", "handlers", "contains", "handler", "handleEvent", "addHandler", "ngZone", "name", "handlersForEvent", "handlersForElement", "add", "set", "Set", "runOutsideAngular", "document", "addEventListener", "removeHandler", "delete", "size", "removeEventListener", "defaultRippleAnimationConfig", "enterDuration", "exitDuration", "ignoreMouseEventsTimeout", "passiveCapturingEventOptions", "pointerDownEvents", "pointerUpEvents", "RippleRenderer", "_target", "_ngZone", "elementOrElementRef", "_platform", "_isPointerDown", "_activeRipples", "_pointerUpEventsRegistered", "isBrowser", "_containerElement", "coerceElement", "fadeInRipple", "x", "y", "containerRect", "_containerRect", "getBoundingClientRect", "animationConfig", "animation", "centered", "left", "width", "top", "height", "radius", "distanceToFurthestCorner", "offsetX", "offsetY", "ripple", "createElement", "classList", "style", "color", "backgroundColor", "transitionDuration", "appendChild", "computedStyles", "window", "getComputedStyle", "userTransitionProperty", "transitionProperty", "userTransitionDuration", "animationForciblyDisabledThroughCss", "rippleRef", "transform", "persistent", "_mostRecentTransientRipple", "eventListeners", "onTransitionEnd", "_finishRippleTransition", "onTransitionCancel", "_destroyRipple", "rippleEl", "opacity", "fadeOutAll", "_getActiveRipples", "fadeOutAllNonPersistent", "setupTriggerEvents", "_triggerElement", "_removeTriggerEvents", "_eventManager", "_onMousedown", "_onTouchStart", "_onPointerUp", "_startFadeOutTransition", "isMostRecentTransientRipple", "remove", "isFakeMousedown", "isFakeMousedownFromScreenReader", "isSyntheticEvent", "_lastTouchStartEvent", "Date", "now", "rippleDisabled", "clientX", "clientY", "rippleConfig", "isFakeTouchstartFromScreenReader", "touches", "changedTouches", "i", "length", "isVisible", "terminateOnPointerUp", "Array", "from", "keys", "trigger", "rect", "distX", "Math", "max", "abs", "right", "distY", "bottom", "sqrt", "MAT_RIPPLE_GLOBAL_OPTIONS", "InjectionToken", "MatRipple", "disabled", "_disabled", "value", "_setupTriggerEventsIfEnabled", "_trigger", "_elementRef", "nativeElement", "platform", "globalOptions", "_animationMode", "_isInitialized", "_globalOptions", "_rippleRenderer", "ngOnInit", "ngOnDestroy", "launch", "configOrX", "ElementRef", "NgZone", "Platform", "ANIMATION_MODULE_TYPE", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatRipple_HostBindings", "rf", "ctx", "Directive", "selector", "exportAs", "host", "Optional", "Inject", "Input", "unbounded", "MatRippleModule", "MatPseudoCheckbox", "appearance", "ɵfac", "MatPseudoCheckbox_Factory", "t", "ɵcmp", "MatPseudoCheckbox_HostBindings", "Component", "ViewEncapsulation", "None", "changeDetection", "ChangeDetectionStrategy", "OnPush", "template", "styles", "MatPseudoCheckboxModule", "ɵinj", "MAT_OPTION_PARENT_COMPONENT", "_uniqueOptgroupIdCounter", "MAT_OPTGROUP", "MatOptgroup", "parent", "_labelId", "_inert", "inertGroups", "MatOptgroup_Factory", "MatOptgroup_HostBindings", "booleanAttribute", "features", "provide", "useExisting", "encapsulation", "providers", "label", "_uniqueIdCounter", "MatOptionSelectionChange", "source", "isUserInput", "MatOption", "multiple", "_parent", "selected", "_selected", "group", "disableRipple", "hideSingleSelectionIndicator", "_element", "_changeDetectorRef", "_active", "_mostRecentViewValue", "id", "onSelectionChange", "EventEmitter", "_stateChanges", "Subject", "active", "viewValue", "_text", "textContent", "trim", "select", "emitEvent", "markForCheck", "_emitSelectionChangeEvent", "deselect", "focus", "_origin", "options", "_getHostElement", "setActiveStyles", "setInactiveStyles", "getLabel", "_handleKeydown", "keyCode", "ENTER", "SPACE", "hasModifierKey", "_selectViaInteraction", "preventDefault", "_getTabIndex", "ngAfterViewChecked", "next", "complete", "emit", "ChangeDetectorRef", "viewQuery", "MatOption_Query", "MatOption_HostBindings", "MatOption_keydown_HostBindingHandler", "$event", "outputs", "MatOption_Conditional_6_Template", "dependencies", "Output", "ViewChild", "static", "MatOptionModule", "ɵmod", "declarations", "MatOption", "MatOptgroup", "imports", "MatRippleModule", "MatCommonModule", "MatPseudoCheckboxModule", "exports", "ɵinj", "NgModule", "args", "eventListenerOptions", "capture", "rippleInteractionEvents", "matRippleUninitialized", "matRippleClassName", "matRippleCentered", "matRippleDisabled", "MatRippleLoader", "constructor", "_document", "inject", "DOCUMENT", "optional", "_animationMode", "ANIMATION_MODULE_TYPE$1", "_globalRippleOptions", "MAT_RIPPLE_GLOBAL_OPTIONS", "_platform", "Platform", "_ngZone", "NgZone", "_onInteraction", "event", "target", "HTMLElement", "eventTarget", "element", "closest", "createRipple", "runOutsideAngular", "addEventListener", "ngOnDestroy", "removeEventListener", "configureRipple", "host", "config", "setAttribute", "className", "hasAttribute", "centered", "disabled", "getRipple", "matRipple", "setDisabled", "ripple", "removeAttribute", "querySelector", "remove", "rippleEl", "createElement", "classList", "add", "getAttribute", "append", "MatRipple", "ElementRef", "undefined", "_isInitialized", "trigger", "attachRipple", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable"]
}
