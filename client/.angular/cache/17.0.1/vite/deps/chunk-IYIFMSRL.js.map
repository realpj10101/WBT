{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/collections/data-source.ts", "../../../../../../../src/cdk/collections/array-data-source.ts", "../../../../../../../src/cdk/collections/dispose-view-repeater-strategy.ts", "../../../../../../../src/cdk/collections/recycle-view-repeater-strategy.ts", "../../../../../../../src/cdk/collections/selection-model.ts", "../../../../../../../src/cdk/collections/unique-selection-dispatcher.ts", "../../../../../../../src/cdk/collections/view-repeater.ts", "../../../../../../../src/cdk/collections/collections_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConnectableObservable, Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: readonly T[] | Observable<readonly T[]>) {\n    super();\n  }\n\n  connect(): Observable<readonly T[]> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation,\n} from './view-repeater';\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n  implements _ViewRepeater<T, R, C>\n{\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ) {\n    changes.forEachOperation(\n      (\n        record: IterableChangeRecord<R>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        let view: EmbeddedViewRef<C> | undefined;\n        let operation: _ViewRepeaterOperation;\n        if (record.previousIndex == null) {\n          const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = viewContainerRef.createEmbeddedView(\n            insertContext.templateRef,\n            insertContext.context,\n            insertContext.index,\n          );\n          operation = _ViewRepeaterOperation.INSERTED;\n        } else if (currentIndex == null) {\n          viewContainerRef.remove(adjustedPreviousIndex!);\n          operation = _ViewRepeaterOperation.REMOVED;\n        } else {\n          view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n          viewContainerRef.move(view!, currentIndex);\n          operation = _ViewRepeaterOperation.MOVED;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view?.context,\n            operation,\n            record,\n          });\n        }\n      },\n    );\n  }\n\n  detach() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation,\n} from './view-repeater';\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n  implements _ViewRepeater<T, R, C>\n{\n  /**\n   * The size of the cache used to store unused views.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n   */\n  viewCacheSize: number = 20;\n\n  /**\n   * View cache that stores embedded view instances that have been previously stamped out,\n   * but don't are not currently rendered. The view repeater will reuse these views rather than\n   * creating brand new ones.\n   *\n   * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n   */\n  private _viewCache: EmbeddedViewRef<C>[] = [];\n\n  /** Apply changes to the DOM. */\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation(\n      (\n        record: IterableChangeRecord<R>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        let view: EmbeddedViewRef<C> | undefined;\n        let operation: _ViewRepeaterOperation;\n        if (record.previousIndex == null) {\n          // Item added.\n          const viewArgsFactory = () =>\n            itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = this._insertView(\n            viewArgsFactory,\n            currentIndex!,\n            viewContainerRef,\n            itemValueResolver(record),\n          );\n          operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n        } else if (currentIndex == null) {\n          // Item removed.\n          this._detachAndCacheView(adjustedPreviousIndex!, viewContainerRef);\n          operation = _ViewRepeaterOperation.REMOVED;\n        } else {\n          // Item moved.\n          view = this._moveView(\n            adjustedPreviousIndex!,\n            currentIndex!,\n            viewContainerRef,\n            itemValueResolver(record),\n          );\n          operation = _ViewRepeaterOperation.MOVED;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view?.context,\n            operation,\n            record,\n          });\n        }\n      },\n    );\n  }\n\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n    this._viewCache = [];\n  }\n\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n  private _insertView(\n    viewArgsFactory: () => _ViewRepeaterItemInsertArgs<C>,\n    currentIndex: number,\n    viewContainerRef: ViewContainerRef,\n    value: T,\n  ): EmbeddedViewRef<C> | undefined {\n    const cachedView = this._insertViewFromCache(currentIndex!, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(\n      viewArgs.templateRef,\n      viewArgs.context,\n      viewArgs.index,\n    );\n  }\n\n  /** Detaches the view at the given index and inserts into the view cache. */\n  private _detachAndCacheView(index: number, viewContainerRef: ViewContainerRef) {\n    const detachedView = viewContainerRef.detach(index) as EmbeddedViewRef<C>;\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n\n  /** Moves view at the previous index to the current index. */\n  private _moveView(\n    adjustedPreviousIndex: number,\n    currentIndex: number,\n    viewContainerRef: ViewContainerRef,\n    value: T,\n  ): EmbeddedViewRef<C> {\n    const view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n  private _maybeCacheView(view: EmbeddedViewRef<C>, viewContainerRef: ViewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(\n    index: number,\n    viewContainerRef: ViewContainerRef,\n  ): EmbeddedViewRef<C> | null {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  readonly changed = new Subject<SelectionChange<T>>();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true,\n    public compareWith?: (o1: T, o2: T) => boolean,\n  ) {\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   * @param values The values to select\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  select(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   * @param values The values to deselect\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  deselect(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Sets the selected values\n   * @param values The new selected values\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  setSelection(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values);\n    values.forEach(value => this._markSelected(value));\n    oldValues\n      .filter(value => !newSelectedSet.has(value))\n      .forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   * @param value The value to toggle\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  toggle(value: T): boolean | void {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   * @param flushEvent Whether to flush the changes in an event.\n   *   If false, the changes to the selection will be flushed along with the next event.\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  clear(flushEvent = true): boolean | void {\n    this._unmarkAll();\n    const changed = this._hasQueuedChanges();\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n    return changed;\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(this._getConcreteValue(value));\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit,\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    value = this._getConcreteValue(value);\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    value = this._getConcreteValue(value);\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n\n  /** Whether there are queued up change to be emitted. */\n  private _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n\n  /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n  private _getConcreteValue(inputValue: T): T {\n    if (!this.compareWith) {\n      return inputValue;\n    } else {\n      for (let selectedValue of this._selection) {\n        if (this.compareWith!(inputValue, selectedValue)) {\n          return selectedValue;\n        }\n      }\n      return inputValue;\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  InjectionToken,\n  IterableChangeRecord,\n  IterableChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * The context for an embedded view in the repeater's view container.\n *\n * @template T The type for the embedded view's $implicit property.\n */\nexport interface _ViewRepeaterItemContext<T> {\n  $implicit?: T;\n}\n\n/**\n * The arguments needed to construct an embedded view for an item in a view\n * container.\n *\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemInsertArgs<C> {\n  templateRef: TemplateRef<C>;\n  context?: C;\n  index?: number;\n}\n\n/**\n * A factory that derives the embedded view context for an item in a view\n * container.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> = (\n  record: IterableChangeRecord<R>,\n  adjustedPreviousIndex: number | null,\n  currentIndex: number | null,\n) => _ViewRepeaterItemInsertArgs<C>;\n\n/**\n * Extracts the value of an item from an {@link IterableChangeRecord}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n */\nexport type _ViewRepeaterItemValueResolver<T, R> = (record: IterableChangeRecord<R>) => T;\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nexport const enum _ViewRepeaterOperation {\n  /** The content of an existing view was replaced with another item. */\n  REPLACED,\n  /** A new view was created with `createEmbeddedView`. */\n  INSERTED,\n  /** The position of a view changed, but the content remains the same. */\n  MOVED,\n  /** A view was detached from the view container. */\n  REMOVED,\n}\n\n/**\n * Meta data describing the state of a view after it was updated by a\n * {@link _ViewRepeater}.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemChange<R, C> {\n  /** The view's context after it was changed. */\n  context?: C;\n  /** Indicates how the view was changed. */\n  operation: _ViewRepeaterOperation;\n  /** The view's corresponding change record. */\n  record: IterableChangeRecord<R>;\n}\n\n/**\n * Type for a callback to be executed after a view has changed.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemChanged<R, C> = (change: _ViewRepeaterItemChange<R, C>) => void;\n\n/**\n * Describes a strategy for rendering items in a {@link ViewContainerRef}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ): void;\n\n  detach(): void;\n}\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nexport const _VIEW_REPEATER_STRATEGY = new InjectionToken<\n  _ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>\n>('_ViewRepeater');\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["DataSource", "isDataSource", "value", "connect", "ConnectableObservable", "ArrayDataSource", "constructor", "_data", "isObservable", "of", "disconnect", "_DisposeViewRepeaterStrategy", "applyChanges", "changes", "viewContainerRef", "itemContextFactory", "itemValueResolver", "itemViewChanged", "forEachOperation", "record", "adjustedPreviousIndex", "currentIndex", "view", "operation", "previousIndex", "insertContext", "createEmbeddedView", "templateRef", "context", "index", "remove", "get", "move", "detach", "_RecycleViewRepeaterStrategy", "viewCacheSize", "_viewCache", "viewArgsFactory", "_insertView", "_detachAndCacheView", "_moveView", "destroy", "cachedView", "_insertViewFromCache", "$implicit", "undefined", "viewArgs", "detachedView", "_maybeCacheView", "length", "push", "indexOf", "pop", "insert", "SelectionModel", "selected", "_selected", "Array", "from", "_selection", "values", "_multiple", "initiallySelectedValues", "_emitChanges", "compareWith", "Set", "_deselectedToEmit", "_selectedToEmit", "changed", "Subject", "forEach", "_markSelected", "select", "_verifyValueAssignment", "_hasQueuedChanges", "_emitChangeEvent", "deselect", "_unmarkSelected", "setSelection", "oldValues", "newSelectedSet", "filter", "has", "toggle", "isSelected", "clear", "flushEvent", "_unmarkAll", "_getConcreteValue", "isEmpty", "size", "hasValue", "sort", "predicate", "isMultipleSelection", "next", "source", "added", "removed", "add", "delete", "ngDevMode", "getMultipleValuesInSingleSelectionError", "inputValue", "selectedValue", "Error", "UniqueSelectionDispatcher", "_listeners", "notify", "id", "name", "listener", "listen", "registered", "ngOnDestroy", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "_VIEW_REPEATER_STRATEGY", "InjectionToken"]
}
