{
  "version": 3,
  "sources": ["../../../../../../../src/material/toolbar/toolbar.ts", "../../../../../../../src/material/toolbar/toolbar.html", "../../../../../../../src/material/toolbar/toolbar-module.ts", "../../../../../../../src/material/toolbar/toolbar_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nconst _MatToolbarBase = mixinColor(\n  class {\n    constructor(public _elementRef: ElementRef) {}\n  },\n);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow, {descendants: true}) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any,\n  ) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._checkToolbarMixedModes();\n      this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n    }\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n      const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n        .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n        .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n        .some(node => !!(node.textContent && node.textContent.trim()));\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error(\n    'MatToolbar: Attempting to combine different toolbar modes. ' +\n      'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n      'inside of a `<mat-toolbar>` for a single row.',\n  );\n}\n", "<ng-content></ng-content>\n<ng-content select=\"mat-toolbar-row\"></ng-content>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "_MatToolbarBase", "mixinColor", "constructor", "_elementRef", "MatToolbarRow", "selectors", "hostAttrs", "exportAs", "Directive", "args", "selector", "host", "MatToolbar", "elementRef", "_platform", "document", "_document", "ngAfterViewInit", "isBrowser", "_checkToolbarMixedModes", "_toolbarRows", "changes", "subscribe", "length", "ngDevMode", "isCombinedUsage", "Array", "from", "nativeElement", "childNodes", "filter", "node", "classList", "contains", "nodeType", "COMMENT_NODE", "some", "textContent", "trim", "throwToolbarMixedModesError", "Éµfac", "MatToolbar_Factory", "t", "ElementRef", "Platform", "DOCUMENT", "contentQueries", "MatToolbar_ContentQueries", "rf", "ctx", "dirIndex", "_t", "styles", "encapsulation", "changeDetection", "Component", "inputs", "ChangeDetectionStrategy", "OnPush", "ViewEncapsulation", "None", "template", "Inject", "ContentChildren", "descendants", "Error", "MatToolbarModule", "declarations", "imports", "MatCommonModule", "exports", "NgModule"]
}
