{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/table/can-stick.ts", "../../../../../../../src/cdk/table/tokens.ts", "../../../../../../../src/cdk/table/cell.ts", "../../../../../../../src/cdk/table/coalesced-style-scheduler.ts", "../../../../../../../src/cdk/table/row.ts", "../../../../../../../src/cdk/table/sticky-styler.ts", "../../../../../../../src/cdk/table/table-errors.ts", "../../../../../../../src/cdk/table/sticky-position-listener.ts", "../../../../../../../src/cdk/table/table.ts", "../../../../../../../src/cdk/table/text-column.ts", "../../../../../../../src/cdk/table/table-module.ts", "../../../../../../../src/cdk/table/table_public_index.ts", "../../../../../../../src/material/table/table.ts", "../../../../../../../src/material/table/cell.ts", "../../../../../../../src/material/table/row.ts", "../../../../../../../src/material/table/text-column.ts", "../../../../../../../src/material/table/module.ts", "../../../../../../../src/material/table/table-data-source.ts", "../../../../../../../src/material/table/table_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** @docs-private */\nexport type Constructor<T> = new (...args: any[]) => T;\n\n/**\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport interface CanStick {\n  /** Whether sticky positioning should be applied. */\n  sticky: boolean;\n\n  /** Whether the sticky input has changed since it was last checked. */\n  _hasStickyChanged: boolean;\n\n  /** Whether the sticky value has changed since this was last called. */\n  hasStickyChanged(): boolean;\n\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\n  resetStickyChanged(): void;\n}\n\n/** @docs-private */\nexport type CanStickCtor = Constructor<CanStick>;\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T): CanStickCtor & T {\n  return class extends base {\n    /** Whether sticky positioning should be applied. */\n    get sticky(): boolean {\n      return this._sticky;\n    }\n    set sticky(v: BooleanInput) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    _sticky: boolean = false;\n\n    /** Whether the sticky input has changed since it was last checked. */\n    _hasStickyChanged: boolean = false;\n\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged(): boolean {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nexport const CDK_TABLE = new InjectionToken<any>('CDK_TABLE');\n\n/** Configurable options for `CdkTextColumn`. */\nexport interface TextColumnOptions<T> {\n  /**\n   * Default function that provides the header text based on the column name if a header\n   * text is not provided.\n   */\n  defaultHeaderTextTransform?: (name: string) => string;\n\n  /** Default data accessor to use if one is not provided. */\n  defaultDataAccessor?: (data: T, name: string) => string;\n}\n\n/** Injection token that can be used to specify the text column options. */\nexport const TEXT_COLUMN_OPTIONS = new InjectionToken<TextColumnOptions<any>>(\n  'text-column-options',\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  TemplateRef,\n  booleanAttribute,\n} from '@angular/core';\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\nimport {CDK_TABLE} from './tokens';\n\n/** Base interface for a cell definition. Captures a column's cell template definition. */\nexport interface CellDef {\n  template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({selector: '[cdkCellDef]'})\nexport class CdkCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkHeaderCellDef]'})\nexport class CdkHeaderCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkFooterCellDef]'})\nexport class CdkFooterCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {}\nconst _CdkColumnDefBase: CanStickCtor & typeof CdkColumnDefBase =\n  mixinHasStickyInput(CdkColumnDefBase);\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[cdkColumnDef]',\n  inputs: ['sticky'],\n  providers: [{provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef}],\n})\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\n  /** Unique name for this column. */\n  @Input('cdkColumnDef')\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._setNameInput(name);\n  }\n  protected _name: string;\n\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  @Input({transform: booleanAttribute})\n  get stickyEnd(): boolean {\n    return this._stickyEnd;\n  }\n  set stickyEnd(value: boolean) {\n    if (value !== this._stickyEnd) {\n      this._stickyEnd = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  _stickyEnd: boolean = false;\n\n  /** @docs-private */\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\n\n  /**\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n   * do not match are replaced by the '-' character.\n   */\n  cssClassFriendlyName: string;\n\n  /**\n   * Class name for cells in this column.\n   * @docs-private\n   */\n  _columnCssClassName: string[];\n\n  constructor(@Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super();\n  }\n\n  /**\n   * Overridable method that sets the css classes that will be added to every cell in this\n   * column.\n   * In the future, columnCssClassName will change from type string[] to string and this\n   * will set a single string value.\n   * @docs-private\n   */\n  protected _updateColumnCssClassName() {\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setNameInput(value: string) {\n    // If the directive is set without a name (updated programmatically), then this setter will\n    // trigger with an empty string and should not overwrite the programmatically set value.\n    if (value) {\n      this._name = value;\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n      this._updateColumnCssClassName();\n    }\n  }\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n  host: {\n    'class': 'cdk-footer-cell',\n  },\n})\nexport class CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    if (columnDef._table?._elementRef.nativeElement.nodeType === 1) {\n      const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n      const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-cell, td[cdk-cell]',\n  host: {\n    'class': 'cdk-cell',\n  },\n})\nexport class CdkCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    if (columnDef._table?._elementRef.nativeElement.nodeType === 1) {\n      const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n      const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, InjectionToken} from '@angular/core';\nimport {from, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\n/**\n * @docs-private\n */\nexport class _Schedule {\n  tasks: (() => unknown)[] = [];\n  endTasks: (() => unknown)[] = [];\n}\n\n/** Injection token used to provide a coalesced style scheduler. */\nexport const _COALESCED_STYLE_SCHEDULER = new InjectionToken<_CoalescedStyleScheduler>(\n  '_COALESCED_STYLE_SCHEDULER',\n);\n\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n@Injectable()\nexport class _CoalescedStyleScheduler implements OnDestroy {\n  private _currentSchedule: _Schedule | null = null;\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(private readonly _ngZone: NgZone) {}\n\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n  schedule(task: () => unknown): void {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule!.tasks.push(task);\n  }\n\n  /**\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\n   * VM turn.\n   */\n  scheduleEnd(task: () => unknown): void {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule!.endTasks.push(task);\n  }\n\n  /** Prevent any further tasks from running. */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  private _createScheduleIfNeeded() {\n    if (this._currentSchedule) {\n      return;\n    }\n\n    this._currentSchedule = new _Schedule();\n\n    this._getScheduleObservable()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        while (this._currentSchedule!.tasks.length || this._currentSchedule!.endTasks.length) {\n          const schedule = this._currentSchedule!;\n\n          // Capture new tasks scheduled by the current set of tasks.\n          this._currentSchedule = new _Schedule();\n\n          for (const task of schedule.tasks) {\n            task();\n          }\n\n          for (const task of schedule.endTasks) {\n            task();\n          }\n        }\n\n        this._currentSchedule = null;\n      });\n  }\n\n  private _getScheduleObservable() {\n    // Use onStable when in the context of an ongoing change detection cycle so that we\n    // do not accidentally trigger additional cycles.\n    return this._ngZone.isStable\n      ? from(Promise.resolve(undefined))\n      : this._ngZone.onStable.pipe(take(1));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\nimport {CdkCellDef, CdkColumnDef} from './cell';\nimport {CDK_TABLE} from './tokens';\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n@Directive()\nexport abstract class BaseRowDef implements OnChanges {\n  /** The columns to be displayed on this row. */\n  columns: Iterable<string>;\n\n  /** Differ used to check if any changes were made to the columns. */\n  protected _columnsDiffer: IterableDiffer<any>;\n\n  constructor(\n    /** @docs-private */ public template: TemplateRef<any>,\n    protected _differs: IterableDiffers,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff(): IterableChanges<any> | null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n}\n\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {}\nconst _CdkHeaderRowDefBase: CanStickCtor & typeof CdkHeaderRowDefBase =\n  mixinHasStickyInput(CdkHeaderRowDefBase);\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n})\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any,\n  ) {\n    super(template, _differs);\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  override ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n}\n\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {}\nconst _CdkFooterRowDefBase: CanStickCtor & typeof CdkFooterRowDefBase =\n  mixinHasStickyInput(CdkFooterRowDefBase);\n\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkFooterRowDef]',\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n})\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any,\n  ) {\n    super(template, _differs);\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  override ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n})\nexport class CdkRowDef<T> extends BaseRowDef {\n  /**\n   * Function that should return true if this row template should be used for the provided index\n   * and row data. If left undefined, this row will be considered the default row template to use\n   * when no other when functions return true for the data.\n   * For every row, there must be at least one when function that passes or an undefined to default.\n   */\n  when: (index: number, rowData: T) => boolean;\n\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any,\n  ) {\n    super(template, _differs);\n  }\n}\n\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n */\nexport interface CdkCellOutletMultiRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  dataIndex?: number;\n\n  /** Index location of the rendered row that this cell is located within. */\n  renderIndex?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n@Directive({selector: '[cdkCellOutlet]'})\nexport class CdkCellOutlet implements OnDestroy {\n  /** The ordered list of cells to render within this outlet's view container */\n  cells: CdkCellDef[];\n\n  /** The data context to be provided to each cell */\n  context: any;\n\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n  static mostRecentCellOutlet: CdkCellOutlet | null = null;\n\n  constructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-header-row, tr[cdk-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkHeaderRow {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkFooterRow {}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-row, tr[cdk-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkRow {}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[cdkNoDataRow]',\n})\nexport class CdkNoDataRow {\n  _contentClassName = 'cdk-no-data-row';\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\nimport {Direction} from '@angular/cdk/bidi';\nimport {_CoalescedStyleScheduler} from './coalesced-style-scheduler';\nimport {StickyPositioningListener} from './sticky-position-listener';\n\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\n\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nexport class StickyStyler {\n  private _cachedCellWidths: number[] = [];\n  private readonly _borderCellCss: Readonly<{[d in StickyDirection]: string}>;\n\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  constructor(\n    private _isNativeHtmlTable: boolean,\n    private _stickCellCss: string,\n    public direction: Direction,\n    private _coalescedStyleScheduler: _CoalescedStyleScheduler,\n    private _isBrowser = true,\n    private readonly _needsPositionStickyOnElement = true,\n    private readonly _positionListener?: StickyPositioningListener,\n  ) {\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`,\n    };\n  }\n\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\n    const elementsToClear: HTMLElement[] = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n\n      elementsToClear.push(row);\n      for (let i = 0; i < row.children.length; i++) {\n        elementsToClear.push(row.children[i] as HTMLElement);\n      }\n    }\n\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      for (const element of elementsToClear) {\n        this._removeStickyStyle(element, stickyDirections);\n      }\n    });\n  }\n\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   */\n  updateStickyColumns(\n    rows: HTMLElement[],\n    stickyStartStates: boolean[],\n    stickyEndStates: boolean[],\n    recalculateCellWidths = true,\n  ) {\n    if (\n      !rows.length ||\n      !this._isBrowser ||\n      !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))\n    ) {\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({sizes: []});\n        this._positionListener.stickyEndColumnsUpdated({sizes: []});\n      }\n\n      return;\n    }\n\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n    const cellWidths: number[] = this._getCellWidths(firstRow, recalculateCellWidths);\n\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n\n    const lastStickyStart = stickyStartStates.lastIndexOf(true);\n    const firstStickyEnd = stickyEndStates.indexOf(true);\n\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      const isRtl = this.direction === 'rtl';\n      const start = isRtl ? 'right' : 'left';\n      const end = isRtl ? 'left' : 'right';\n\n      for (const row of rows) {\n        for (let i = 0; i < numCells; i++) {\n          const cell = row.children[i] as HTMLElement;\n          if (stickyStartStates[i]) {\n            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n          }\n\n          if (stickyEndStates[i]) {\n            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n          }\n        }\n      }\n\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes:\n            lastStickyStart === -1\n              ? []\n              : cellWidths\n                  .slice(0, lastStickyStart + 1)\n                  .map((width, index) => (stickyStartStates[index] ? width : null)),\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes:\n            firstStickyEnd === -1\n              ? []\n              : cellWidths\n                  .slice(firstStickyEnd)\n                  .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                  .reverse(),\n        });\n      }\n    });\n  }\n\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n\n    // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n    const stickyOffsets: number[] = [];\n    const stickyCellHeights: (number | undefined)[] = [];\n    const elementsToStick: HTMLElement[][] = [];\n    for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n      if (!states[rowIndex]) {\n        continue;\n      }\n\n      stickyOffsets[rowIndex] = stickyOffset;\n      const row = rows[rowIndex];\n      elementsToStick[rowIndex] = this._isNativeHtmlTable\n        ? (Array.from(row.children) as HTMLElement[])\n        : [row];\n\n      const height = row.getBoundingClientRect().height;\n      stickyOffset += height;\n      stickyCellHeights[rowIndex] = height;\n    }\n\n    const borderedRowIndex = states.lastIndexOf(true);\n\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n\n        const offset = stickyOffsets[rowIndex];\n        const isBorderedRowIndex = rowIndex === borderedRowIndex;\n        for (const element of elementsToStick[rowIndex]) {\n          this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n        }\n      }\n\n      if (position === 'top') {\n        this._positionListener?.stickyHeaderRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick,\n        });\n      } else {\n        this._positionListener?.stickyFooterRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick,\n        });\n      }\n    });\n  }\n\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n\n    const tfoot = tableElement.querySelector('tfoot')!;\n\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      if (stickyStates.some(state => !state)) {\n        this._removeStickyStyle(tfoot, ['bottom']);\n      } else {\n        this._addStickyStyle(tfoot, 'bottom', 0, false);\n      }\n    });\n  }\n\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    }\n\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(\n      dir => stickyDirections.indexOf(dir) === -1 && element.style[dir],\n    );\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(\n    element: HTMLElement,\n    dir: StickyDirection,\n    dirValue: number,\n    isBorderElement: boolean,\n  ) {\n    element.classList.add(this._stickCellCss);\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element: HTMLElement): string {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1,\n    };\n\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS as Iterable<StickyDirection> & StickyDirection[]) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n\n    return zIndex ? `${zIndex}` : '';\n  }\n\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row: HTMLElement, recalculateCellWidths = true): number[] {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n\n    const cellWidths: number[] = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell: HTMLElement = firstRowCells[i] as HTMLElement;\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nexport function getTableUnknownColumnError(id: string) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nexport function getTableDuplicateColumnNameError(name: string) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nexport function getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nexport function getTableMissingMatchingRowDefError(data: any) {\n  return Error(\n    `Could not find a matching row definition for the` +\n      `provided row data: ${JSON.stringify(data)}`,\n  );\n}\n\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nexport function getTableMissingRowDefsError() {\n  return Error(\n    'Missing definitions for header, footer, and row; ' +\n      'cannot determine which columns should be rendered.',\n  );\n}\n\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nexport function getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nexport function getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nexport function getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** The injection token used to specify the StickyPositioningListener. */\nexport const STICKY_POSITIONING_LISTENER = new InjectionToken<StickyPositioningListener>('CDK_SPL');\n\nexport type StickySize = number | null | undefined;\nexport type StickyOffset = number | null | undefined;\n\nexport interface StickyUpdate {\n  elements?: readonly (HTMLElement[] | undefined)[];\n  offsets?: StickyOffset[];\n  sizes: StickySize[];\n}\n\n/**\n * If provided, CdkTable will call the methods below when it updates the size/\n * position/etc of its sticky rows and columns.\n */\nexport interface StickyPositioningListener {\n  /** Called when CdkTable updates its sticky start columns. */\n  stickyColumnsUpdated(update: StickyUpdate): void;\n\n  /** Called when CdkTable updates its sticky end columns. */\n  stickyEndColumnsUpdated(update: StickyUpdate): void;\n\n  /** Called when CdkTable updates its sticky header rows. */\n  stickyHeaderRowsUpdated(update: StickyUpdate): void;\n\n  /** Called when CdkTable updates its sticky footer rows. */\n  stickyFooterRowsUpdated(update: StickyUpdate): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {\n  CollectionViewer,\n  DataSource,\n  _DisposeViewRepeaterStrategy,\n  _RecycleViewRepeaterStrategy,\n  isDataSource,\n  _VIEW_REPEATER_STRATEGY,\n  _ViewRepeater,\n  _ViewRepeaterItemChange,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterOperation,\n} from '@angular/cdk/collections';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  booleanAttribute,\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  isObservable,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {CdkColumnDef} from './cell';\nimport {_CoalescedStyleScheduler, _COALESCED_STYLE_SCHEDULER} from './coalesced-style-scheduler';\nimport {\n  BaseRowDef,\n  CdkCellOutlet,\n  CdkCellOutletMultiRowContext,\n  CdkCellOutletRowContext,\n  CdkFooterRowDef,\n  CdkHeaderRowDef,\n  CdkNoDataRow,\n  CdkRowDef,\n} from './row';\nimport {StickyStyler} from './sticky-styler';\nimport {\n  getTableDuplicateColumnNameError,\n  getTableMissingMatchingRowDefError,\n  getTableMissingRowDefsError,\n  getTableMultipleDefaultRowDefsError,\n  getTableUnknownColumnError,\n  getTableUnknownDataSourceError,\n} from './table-errors';\nimport {STICKY_POSITIONING_LISTENER, StickyPositioningListener} from './sticky-position-listener';\nimport {CDK_TABLE} from './tokens';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n@Directive({\n  selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n})\nexport class CdkRecycleRows {}\n\n/** Interface used to provide an outlet for rows to be inserted into. */\nexport interface RowOutlet {\n  viewContainer: ViewContainerRef;\n}\n\n/** Possible types that can be set as the data source for a `CdkTable`. */\nexport type CdkTableDataSourceInput<T> = readonly T[] | DataSource<T> | Observable<readonly T[]>;\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n@Directive({selector: '[rowOutlet]'})\nexport class DataRowOutlet implements RowOutlet {\n  constructor(\n    public viewContainer: ViewContainerRef,\n    public elementRef: ElementRef,\n  ) {}\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n@Directive({selector: '[headerRowOutlet]'})\nexport class HeaderRowOutlet implements RowOutlet {\n  constructor(\n    public viewContainer: ViewContainerRef,\n    public elementRef: ElementRef,\n  ) {}\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n@Directive({selector: '[footerRowOutlet]'})\nexport class FooterRowOutlet implements RowOutlet {\n  constructor(\n    public viewContainer: ViewContainerRef,\n    public elementRef: ElementRef,\n  ) {}\n}\n\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n@Directive({selector: '[noDataRowOutlet]'})\nexport class NoDataRowOutlet implements RowOutlet {\n  constructor(\n    public viewContainer: ViewContainerRef,\n    public elementRef: ElementRef,\n  ) {}\n}\n\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nexport const CDK_TABLE_TEMPLATE =\n  // Note that according to MDN, the `caption` element has to be projected as the **first**\n  // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n  `\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * @docs-private\n */\nexport interface RowContext<T>\n  extends CdkCellOutletMultiRowContext<T>,\n    CdkCellOutletRowContext<T> {}\n\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> {}\n\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been iterated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * @docs-private\n */\nexport interface RenderRow<T> {\n  data: T;\n  dataIndex: number;\n  rowDef: CdkRowDef<T>;\n}\n\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n@Component({\n  selector: 'cdk-table, table[cdk-table]',\n  exportAs: 'cdkTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'cdk-table',\n    '[class.cdk-table-fixed-layout]': 'fixedLayout',\n    'ngSkipHydration': '',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n  // The view for `MatTable` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [\n    {provide: CDK_TABLE, useExisting: CdkTable},\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {provide: STICKY_POSITIONING_LISTENER, useValue: null},\n  ],\n})\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  private _document: Document;\n\n  /** Latest data provided by the data source. */\n  protected _data: readonly T[];\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  /** List of the rendered rows as identified by their `RenderRow` object. */\n  private _renderRows: RenderRow<T>[];\n\n  /** Subscription that listens for the data provided by the data source. */\n  private _renderChangeSubscription: Subscription | null;\n\n  /**\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n   * any custom column definitions added to `_customColumnDefs`.\n   */\n  private _columnDefsByName = new Map<string, CdkColumnDef>();\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n   */\n  private _rowDefs: CdkRowDef<T>[];\n\n  /**\n   * Set of all header row definitions that can be used by this table. Populated by the rows\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\n   * `_customHeaderRowDefs`.\n   */\n  private _headerRowDefs: CdkHeaderRowDef[];\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to\n   * `_customFooterRowDefs`.\n   */\n  private _footerRowDefs: CdkFooterRowDef[];\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\n\n  /** Stores the row definition that does not have a when predicate. */\n  private _defaultRowDef: CdkRowDef<T> | null;\n\n  /**\n   * Column definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * column definitions as *its* content child.\n   */\n  private _customColumnDefs = new Set<CdkColumnDef>();\n\n  /**\n   * Data row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in data rows as *its* content child.\n   */\n  private _customRowDefs = new Set<CdkRowDef<T>>();\n\n  /**\n   * Header row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in header rows as *its* content child.\n   */\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\n\n  /**\n   * Footer row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n   * built-in footer row as *its* content child.\n   */\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\n\n  /** No data row that was defined outside of the direct content children of the table. */\n  private _customNoDataRow: CdkNoDataRow | null;\n\n  /**\n   * Whether the header row definition has been changed. Triggers an update to the header row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _headerRowDefChanged = true;\n\n  /**\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _footerRowDefChanged = true;\n\n  /**\n   * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n   * change.\n   */\n  private _stickyColumnStylesNeedReset = true;\n\n  /**\n   * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n   * `false`, cached values will be used instead. This is only applicable to tables with\n   * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n   */\n  private _forceRecalculateCellWidths = true;\n\n  /**\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\n   * and understand which rows are added/moved/removed.\n   *\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n   * contains an array of created pairs. The array is necessary to handle cases where the data\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n   * stored.\n   */\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\n\n  /** Whether the table is applied to a native `<table>`. */\n  protected _isNativeHtmlTable: boolean;\n\n  /**\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\n   * the table's rows and cells.\n   */\n  private _stickyStyler: StickyStyler;\n\n  /**\n   * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n   * table subclasses.\n   */\n  protected stickyCssClass: string = 'cdk-table-sticky';\n\n  /**\n   * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n   * the position is set in a selector associated with the value of stickyCssClass. May be\n   * overridden by table subclasses\n   */\n  protected needsPositionStickyOnElement = true;\n\n  /** Whether the no data row is currently showing anything. */\n  private _isShowingNoDataRow = false;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input()\n  get trackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n  set trackBy(fn: TrackByFunction<T>) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  private _trackByFn: TrackByFunction<T>;\n\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  @Input()\n  get dataSource(): CdkTableDataSourceInput<T> {\n    return this._dataSource;\n  }\n  set dataSource(dataSource: CdkTableDataSourceInput<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: CdkTableDataSourceInput<T>;\n\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  @Input({transform: booleanAttribute})\n  get multiTemplateDataRows(): boolean {\n    return this._multiTemplateDataRows;\n  }\n  set multiTemplateDataRows(value: boolean) {\n    this._multiTemplateDataRows = value;\n\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n      this.updateStickyColumnStyles();\n    }\n  }\n  _multiTemplateDataRows: boolean = false;\n\n  /**\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\n   */\n  @Input({transform: booleanAttribute})\n  get fixedLayout(): boolean {\n    return this._fixedLayout;\n  }\n  set fixedLayout(value: boolean) {\n    this._fixedLayout = value;\n\n    // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n    this._forceRecalculateCellWidths = true;\n    this._stickyColumnStylesNeedReset = true;\n  }\n  private _fixedLayout: boolean = false;\n\n  /**\n   * Emits when the table completes rendering a set of data rows based on the latest data from the\n   * data source, even if the set of rows is empty.\n   */\n  @Output()\n  readonly contentChanged = new EventEmitter<void>();\n\n  // TODO(andrewseguin): Remove max value as the end index\n  //   and instead calculate the view on init and scroll.\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   *\n   * @docs-private\n   */\n  readonly viewChange = new BehaviorSubject<{start: number; end: number}>({\n    start: 0,\n    end: Number.MAX_VALUE,\n  });\n\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\n  @ViewChild(DataRowOutlet, {static: true}) _rowOutlet: DataRowOutlet;\n  @ViewChild(HeaderRowOutlet, {static: true}) _headerRowOutlet: HeaderRowOutlet;\n  @ViewChild(FooterRowOutlet, {static: true}) _footerRowOutlet: FooterRowOutlet;\n  @ViewChild(NoDataRowOutlet, {static: true}) _noDataRowOutlet: NoDataRowOutlet;\n\n  /**\n   * The column definitions provided by the user that contain what the header, data, and footer\n   * cells should render for each column.\n   */\n  @ContentChildren(CdkColumnDef, {descendants: true}) _contentColumnDefs: QueryList<CdkColumnDef>;\n\n  /** Set of data row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkRowDef, {descendants: true}) _contentRowDefs: QueryList<CdkRowDef<T>>;\n\n  /** Set of header row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkHeaderRowDef, {\n    descendants: true,\n  })\n  _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\n\n  /** Set of footer row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkFooterRowDef, {\n    descendants: true,\n  })\n  _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\n\n  /** Row definition that will only be rendered if there's no data in the table. */\n  @ContentChild(CdkNoDataRow) _noDataRow: CdkNoDataRow;\n\n  constructor(\n    protected readonly _differs: IterableDiffers,\n    protected readonly _changeDetectorRef: ChangeDetectorRef,\n    protected readonly _elementRef: ElementRef,\n    @Attribute('role') role: string,\n    @Optional() protected readonly _dir: Directionality,\n    @Inject(DOCUMENT) _document: any,\n    private _platform: Platform,\n    @Inject(_VIEW_REPEATER_STRATEGY)\n    protected readonly _viewRepeater: _ViewRepeater<T, RenderRow<T>, RowContext<T>>,\n    @Inject(_COALESCED_STYLE_SCHEDULER)\n    protected readonly _coalescedStyleScheduler: _CoalescedStyleScheduler,\n    private readonly _viewportRuler: ViewportRuler,\n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    @Optional()\n    @SkipSelf()\n    @Inject(STICKY_POSITIONING_LISTENER)\n    protected readonly _stickyPositioningListener: StickyPositioningListener,\n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    @Optional()\n    protected readonly _ngZone?: NgZone,\n  ) {\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'table');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n\n  ngOnInit() {\n    this._setupStickyStyler();\n\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    }\n\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n\n    this._viewportRuler\n      .change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this._forceRecalculateCellWidths = true;\n      });\n  }\n\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (\n      !this._headerRowDefs.length &&\n      !this._footerRowDefs.length &&\n      !this._rowDefs.length &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getTableMissingRowDefsError();\n    }\n\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    const columnsChanged = this._renderUpdatedColumns();\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n    // Ensure sticky column styles are reset if set to `true` elsewhere.\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n    this._forceRecalculateCellWidths = rowDefsChanged;\n\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    } else if (this._stickyColumnStylesNeedReset) {\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n      // called when it row data arrives. Otherwise, we need to call it proactively.\n      this.updateStickyColumnStyles();\n    }\n\n    this._checkStickyStates();\n  }\n\n  ngOnDestroy() {\n    [\n      this._rowOutlet.viewContainer,\n      this._headerRowOutlet.viewContainer,\n      this._footerRowOutlet.viewContainer,\n      this._cachedRenderRowsMap,\n      this._customColumnDefs,\n      this._customRowDefs,\n      this._customHeaderRowDefs,\n      this._customFooterRowDefs,\n      this._columnDefsByName,\n    ].forEach(def => {\n      def.clear();\n    });\n\n    this._headerRowDefs = [];\n    this._footerRowDefs = [];\n    this._defaultRowDef = null;\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      this._updateNoDataRow();\n      this.contentChanged.next();\n      return;\n    }\n    const viewContainer = this._rowOutlet.viewContainer;\n\n    this._viewRepeater.applyChanges(\n      changes,\n      viewContainer,\n      (\n        record: IterableChangeRecord<RenderRow<T>>,\n        _adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => this._getEmbeddedViewArgs(record.item, currentIndex!),\n      record => record.item.data,\n      (change: _ViewRepeaterItemChange<RenderRow<T>, RowContext<T>>) => {\n        if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n          this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n        }\n      },\n    );\n\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\n      rowView.context.$implicit = record.item.data;\n    });\n\n    this._updateNoDataRow();\n\n    // Allow the new row data to render before measuring it.\n    // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n    if (this._ngZone && NgZone.isInAngularZone()) {\n      this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n        this.updateStickyColumnStyles();\n      });\n    } else {\n      this.updateStickyColumnStyles();\n    }\n\n    this.contentChanged.next();\n  }\n\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.add(rowDef);\n  }\n\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.delete(rowDef);\n  }\n\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Sets a no data row definition that was not included as a part of the content children. */\n  setNoDataRow(noDataRow: CdkNoDataRow | null) {\n    this._customNoDataRow = noDataRow;\n  }\n\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyHeaderRowStyles(): void {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\n\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const thead = tableElement.querySelector('thead');\n    if (thead) {\n      thead.style.display = headerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyFooterRowStyles(): void {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\n\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const tfoot = tableElement.querySelector('tfoot');\n    if (tfoot) {\n      tfoot.style.display = footerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n    // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\n    // don't need to be cleared unless either the sticky column config changes or one of the row\n    // defs change.\n    if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n      // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n      this._stickyStyler.clearStickyPositioning(\n        [...headerRows, ...dataRows, ...footerRows],\n        ['left', 'right'],\n      );\n      this._stickyColumnStylesNeedReset = false;\n    }\n\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows: HTMLElement[] = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  private _getAllRenderRows(): RenderRow<T>[] {\n    const renderRows: RenderRow<T>[] = [];\n\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef)!.push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n\n    return renderRows;\n  }\n\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  private _getRenderRowsForData(\n    data: T,\n    dataIndex: number,\n    cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>,\n  ): RenderRow<T>[] {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef)! : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift()!;\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {data, rowDef, dataIndex};\n      }\n    });\n  }\n\n  /** Update the map containing the content's column definitions. */\n  private _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n\n    const columnDefs = mergeArrayAndSet(\n      this._getOwnDefs(this._contentColumnDefs),\n      this._customColumnDefs,\n    );\n    columnDefs.forEach(columnDef => {\n      if (\n        this._columnDefsByName.has(columnDef.name) &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)\n      ) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n\n  /** Update the list of all available row definitions that can be used. */\n  private _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(\n      this._getOwnDefs(this._contentHeaderRowDefs),\n      this._customHeaderRowDefs,\n    );\n    this._footerRowDefs = mergeArrayAndSet(\n      this._getOwnDefs(this._contentFooterRowDefs),\n      this._customFooterRowDefs,\n    );\n    this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (\n      !this.multiTemplateDataRows &&\n      defaultRowDefs.length > 1 &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n  private _renderUpdatedColumns(): boolean {\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\n\n    // Force re-render data rows if the list of column definitions have changed.\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n    if (dataColumnsChanged) {\n      this._forceRenderDataRows();\n    }\n\n    // Force re-render header/footer rows if the list of column definitions have changed.\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n    if (headerColumnsChanged) {\n      this._forceRenderHeaderRows();\n    }\n\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n    if (footerColumnsChanged) {\n      this._forceRenderFooterRows();\n    }\n\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n  }\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: CdkTableDataSourceInput<T>) {\n    this._data = [];\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      this._rowOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n\n    let dataStream: Observable<readonly T[]> | undefined;\n\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = observableOf(this.dataSource);\n    }\n\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableUnknownDataSourceError();\n    }\n\n    this._renderChangeSubscription = dataStream!\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(data => {\n        this._data = data || [];\n        this.renderRows();\n      });\n  }\n\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  private _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n  }\n\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  private _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n  }\n\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return columnDef!;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(\n      rows,\n      stickyStartStates,\n      stickyEndStates,\n      !this._fixedLayout || this._forceRecalculateCellWidths,\n    );\n  }\n\n  /** Gets the list of rows that have been rendered in the row outlet. */\n  _getRenderedRows(rowOutlet: RowOutlet): HTMLElement[] {\n    const renderedRows: HTMLElement[] = [];\n\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>;\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n\n    return renderedRows;\n  }\n\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n\n    let rowDefs: CdkRowDef<T>[] = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef =\n        this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n\n    return rowDefs;\n  }\n\n  private _getEmbeddedViewArgs(\n    renderRow: RenderRow<T>,\n    index: number,\n  ): _ViewRepeaterItemInsertArgs<RowContext<T>> {\n    const rowDef = renderRow.rowDef;\n    const context: RowContext<T> = {$implicit: renderRow.data};\n    return {\n      templateRef: rowDef.template,\n      context,\n      index,\n    };\n  }\n\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  private _renderRow(\n    outlet: RowOutlet,\n    rowDef: BaseRowDef,\n    index: number,\n    context: RowContext<T> = {},\n  ): EmbeddedViewRef<RowContext<T>> {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n    this._renderCellTemplateForItem(rowDef, context);\n    return view;\n  }\n\n  private _renderCellTemplateForItem(rowDef: BaseRowDef, context: RowContext<T>) {\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  private _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\n      const context = viewRef.context as RowContext<T>;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n\n  /** Gets the column definitions for the provided row def. */\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return rowDef.extractCellTemplate(column!);\n    });\n  }\n\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n  private _applyNativeTableSections() {\n    const documentFragment = this._document.createDocumentFragment();\n    const sections = [\n      {tag: 'thead', outlets: [this._headerRowOutlet]},\n      {tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet]},\n      {tag: 'tfoot', outlets: [this._footerRowOutlet]},\n    ];\n\n    for (const section of sections) {\n      const element = this._document.createElement(section.tag);\n      element.setAttribute('role', 'rowgroup');\n\n      for (const outlet of section.outlets) {\n        element.appendChild(outlet.elementRef.nativeElement);\n      }\n\n      documentFragment.appendChild(element);\n    }\n\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\n    this._elementRef.nativeElement.appendChild(documentFragment);\n  }\n\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  private _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n  }\n\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n  private _checkStickyStates() {\n    const stickyCheckReducer = (\n      acc: boolean,\n      d: CdkHeaderRowDef | CdkFooterRowDef | CdkColumnDef,\n    ) => {\n      return acc || d.hasStickyChanged();\n    };\n\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this._stickyColumnStylesNeedReset = true;\n      this.updateStickyColumnStyles();\n    }\n  }\n\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n  private _setupStickyStyler() {\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(\n      this._isNativeHtmlTable,\n      this.stickyCssClass,\n      direction,\n      this._coalescedStyleScheduler,\n      this._platform.isBrowser,\n      this.needsPositionStickyOnElement,\n      this._stickyPositioningListener,\n    );\n    (this._dir ? this._dir.change : observableOf<Direction>())\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(value => {\n        this._stickyStyler.direction = value;\n        this.updateStickyColumnStyles();\n      });\n  }\n\n  /** Filters definitions that belong to this table from a QueryList. */\n  private _getOwnDefs<I extends {_table?: any}>(items: QueryList<I>): I[] {\n    return items.filter(item => !item._table || item._table === this);\n  }\n\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n  private _updateNoDataRow() {\n    const noDataRow = this._customNoDataRow || this._noDataRow;\n\n    if (!noDataRow) {\n      return;\n    }\n\n    const shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n    if (shouldShow === this._isShowingNoDataRow) {\n      return;\n    }\n\n    const container = this._noDataRowOutlet.viewContainer;\n\n    if (shouldShow) {\n      const view = container.createEmbeddedView(noDataRow.templateRef);\n      const rootNode: HTMLElement | undefined = view.rootNodes[0];\n\n      // Only add the attributes if we have a single root node since it's hard\n      // to figure out which one to add it to when there are multiple.\n      if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n        rootNode.setAttribute('role', 'row');\n        rootNode.classList.add(noDataRow._contentClassName);\n      }\n    } else {\n      container.clear();\n    }\n\n    this._isShowingNoDataRow = shouldShow;\n\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet<T>(array: T[], set: Set<T>): T[] {\n  return array.concat(Array.from(set));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {CdkTable} from './table';\nimport {\n  getTableTextColumnMissingParentTableError,\n  getTableTextColumnMissingNameError,\n} from './table-errors';\nimport {TEXT_COLUMN_OPTIONS, TextColumnOptions} from './tokens';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  selector: 'cdk-text-column',\n  template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class CdkTextColumn<T> implements OnDestroy, OnInit {\n  /** Column name that should be used to reference this column. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._name = name;\n\n    // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n    this._syncColumnDefName();\n  }\n  _name: string;\n\n  /**\n   * Text label that should be used for the column header. If this property is not\n   * set, the header text will default to the column name with its first letter capitalized.\n   */\n  @Input() headerText: string;\n\n  /**\n   * Accessor function to retrieve the data rendered for each cell. If this\n   * property is not set, the data cells will render the value found in the data's property matching\n   * the column's name. For example, if the column is named `id`, then the rendered value will be\n   * value defined by the data's `id` property.\n   */\n  @Input() dataAccessor: (data: T, name: string) => string;\n\n  /** Alignment of the cell values. */\n  @Input() justify: 'start' | 'end' | 'center' = 'start';\n\n  /** @docs-private */\n  @ViewChild(CdkColumnDef, {static: true}) columnDef: CdkColumnDef;\n\n  /**\n   * The column cell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  @ViewChild(CdkCellDef, {static: true}) cell: CdkCellDef;\n\n  /**\n   * The column headerCell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  @ViewChild(CdkHeaderCellDef, {static: true}) headerCell: CdkHeaderCellDef;\n\n  constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _table: CdkTable<T>,\n    @Optional() @Inject(TEXT_COLUMN_OPTIONS) private _options: TextColumnOptions<T>,\n  ) {\n    this._options = _options || {};\n  }\n\n  ngOnInit() {\n    this._syncColumnDefName();\n\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n\n    if (!this.dataAccessor) {\n      this.dataAccessor =\n        this._options.defaultDataAccessor || ((data: T, name: string) => (data as any)[name]);\n    }\n\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n      this._table.addColumnDef(this.columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   */\n  _createDefaultHeaderText() {\n    const name = this.name;\n\n    if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableTextColumnMissingNameError();\n    }\n\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n\n    return name[0].toUpperCase() + name.slice(1);\n  }\n\n  /** Synchronizes the column definition name with the text column name. */\n  private _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {\n  HeaderRowOutlet,\n  DataRowOutlet,\n  CdkTable,\n  CdkRecycleRows,\n  FooterRowOutlet,\n  NoDataRowOutlet,\n} from './table';\nimport {\n  CdkCellOutlet,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n  CdkNoDataRow,\n} from './row';\nimport {\n  CdkColumnDef,\n  CdkHeaderCellDef,\n  CdkHeaderCell,\n  CdkCell,\n  CdkCellDef,\n  CdkFooterCellDef,\n  CdkFooterCell,\n} from './cell';\nimport {CdkTextColumn} from './text-column';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkFooterCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkFooterCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  DataRowOutlet,\n  HeaderRowOutlet,\n  FooterRowOutlet,\n  CdkTextColumn,\n  CdkNoDataRow,\n  CdkRecycleRows,\n  NoDataRowOutlet,\n];\n\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n  imports: [ScrollingModule],\n})\nexport class CdkTableModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CdkTable,\n  _CoalescedStyleScheduler,\n  _COALESCED_STYLE_SCHEDULER,\n  CDK_TABLE,\n  STICKY_POSITIONING_LISTENER,\n} from '@angular/cdk/table';\nimport {\n  _DisposeViewRepeaterStrategy,\n  _RecycleViewRepeaterStrategy,\n  _VIEW_REPEATER_STRATEGY,\n} from '@angular/cdk/collections';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n@Directive({\n  selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n})\nexport class MatRecycleRows {}\n\n@Component({\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  // Note that according to MDN, the `caption` element has to be projected as the **first**\n  // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n  // We can't reuse `CDK_TABLE_TEMPLATE` because it's incompatible with local compilation mode.\n  template: `\n    <ng-content select=\"caption\"></ng-content>\n    <ng-content select=\"colgroup, col\"></ng-content>\n    <ng-container headerRowOutlet></ng-container>\n    <ng-container rowOutlet></ng-container>\n    <ng-container noDataRowOutlet></ng-container>\n    <ng-container footerRowOutlet></ng-container>\n  `,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-mdc-table mdc-data-table__table',\n    '[class.mdc-table-fixed-layout]': 'fixedLayout',\n    'ngSkipHydration': '',\n  },\n  providers: [\n    {provide: CdkTable, useExisting: MatTable},\n    {provide: CDK_TABLE, useExisting: MatTable},\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {provide: STICKY_POSITIONING_LISTENER, useValue: null},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> implements OnInit {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected override stickyCssClass = 'mat-mdc-table-sticky';\n\n  /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n  protected override needsPositionStickyOnElement = false;\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    // After ngOnInit, the `CdkTable` has created and inserted the table sections (thead, tbody,\n    // tfoot). MDC requires the `mdc-data-table__content` class to be added to the body. Note that\n    // this only applies to native tables, because we don't wrap the content of flexbox-based ones.\n    if (this._isNativeHtmlTable) {\n      const tbody = this._elementRef.nativeElement.querySelector('tbody');\n      tbody.classList.add('mdc-data-table__content');\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkFooterCell,\n  CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}],\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}],\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}],\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  inputs: ['sticky'],\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef},\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef')\n  override get name(): string {\n    return this._name;\n  }\n  override set name(name: string) {\n    this._setNameInput(name);\n  }\n\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n  protected override _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName!.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-mdc-cell mdc-data-table__cell',\n  },\n})\nexport class MatCell extends CdkCell {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n  CdkNoDataRow,\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: ROW_TEMPLATE,\n  host: {\n    'class': 'mat-mdc-header-row mdc-data-table__header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: ROW_TEMPLATE,\n  host: {\n    'class': 'mat-mdc-footer-row mdc-data-table__row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-row, tr[mat-row]',\n  template: ROW_TEMPLATE,\n  host: {\n    'class': 'mat-mdc-row mdc-data-table__row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[matNoDataRow]',\n  providers: [{provide: CdkNoDataRow, useExisting: MatNoDataRow}],\n})\nexport class MatNoDataRow extends CdkNoDataRow {\n  override _contentClassName = 'mat-mdc-no-data-row';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatRecycleRows, MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef,\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef,\n  MatNoDataRow,\n} from './row';\nimport {MatTextColumn} from './text-column';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n  MatRecycleRows,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n  MatNoDataRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CdkTableModule],\n  exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T, P extends MatPaginator = MatPaginator> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription | null = null;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data: T[]) {\n    data = Array.isArray(data) ? data : [];\n    this._data.next(data);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string {\n    return this._filter.value;\n  }\n\n  set filter(filter: string) {\n    this._filter.next(filter);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null {\n    return this._sort;\n  }\n\n  set sort(sort: MatSort | null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n\n  private _sort: MatSort | null;\n\n  /**\n   * Instance of the paginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the paginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): P | null {\n    return this._paginator;\n  }\n\n  set paginator(paginator: P | null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n\n  private _paginator: P | null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: (data: T, sortHeaderId: string) => string | number = (\n    data: T,\n    sortHeaderId: string,\n  ): string | number => {\n    const value = (data as unknown as Record<string, any>)[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  };\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: (data: T[], sort: MatSort) => T[] = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n\n      if (valueAType !== valueBType) {\n        if (valueAType === 'number') {\n          valueA += '';\n        }\n        if (valueBType === 'number') {\n          valueB += '';\n        }\n      }\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  };\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: (data: T, filter: string) => boolean = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data as unknown as Record<string, any>)\n      .reduce((currentTerm: string, key: string) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + (data as unknown as Record<string, any>)[key] + '◬';\n      }, '')\n      .toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  };\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort | null | void> = this._sort\n      ? (merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort | void>)\n      : observableOf(null);\n    const pageChange: Observable<PageEvent | null | void> = this._paginator\n      ? (merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized,\n        ) as Observable<PageEvent | void>)\n      : observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(\n      map(([data]) => this._filterData(data)),\n    );\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(\n      map(([data]) => this._orderData(data)),\n    );\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(\n      map(([data]) => this._pageData(data)),\n    );\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterPredicate function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterPredicate.\n    // May be overridden for customization.\n    this.filteredData =\n      this.filter == null || this.filter === ''\n        ? data\n        : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided paginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) {\n      return data;\n    }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) {\n        return;\n      }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n\n  /**\n   * Used by the MatTable. Called when it disconnects from the data source.\n   * @docs-private\n   */\n  disconnect() {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "CdkTextColumn_th_1_Template", "rf", "ctx", "mixinHasStickyInput", "base", "sticky", "_sticky", "v", "prevValue", "coerceBooleanProperty", "_hasStickyChanged", "hasStickyChanged", "resetStickyChanged", "constructor", "args", "CDK_TABLE", "InjectionToken", "TEXT_COLUMN_OPTIONS", "CdkCellDef", "template", "TemplateRef", "selectors", "Directive", "selector", "CdkHeaderCellDef", "CdkFooterCellDef", "CdkColumnDefBase", "_CdkColumnDefBase", "CdkColumnDef", "name", "_name", "_setNameInput", "stickyEnd", "_stickyEnd", "value", "_table", "_updateColumnCssClassName", "_columnCssClassName", "cssClassFriendlyName", "replace", "ɵfac", "CdkColumnDef_Factory", "t", "ɵdir", "contentQueries", "CdkColumnDef_ContentQueries", "dirIndex", "_t", "booleanAttribute", "features", "provide", "useExisting", "inputs", "providers", "Inject", "Optional", "Input", "transform", "cell", "ContentChild", "headerCell", "footerCell", "BaseCdkCell", "columnDef", "elementRef", "nativeElement", "classList", "add", "CdkHeaderCell", "ElementRef", "hostAttrs", "host", "CdkFooterCell", "_elementRef", "nodeType", "tableRole", "getAttribute", "role", "setAttribute", "CdkCell", "_Schedule", "tasks", "endTasks", "_COALESCED_STYLE_SCHEDULER", "_CoalescedStyleScheduler", "_ngZone", "_currentSchedule", "_destroyed", "Subject", "schedule", "task", "_createScheduleIfNeeded", "push", "scheduleEnd", "ngOnDestroy", "next", "complete", "_getScheduleObservable", "pipe", "takeUntil", "subscribe", "length", "isStable", "from", "Promise", "resolve", "undefined", "onStable", "take", "NgZone", "factory", "Injectable", "CDK_ROW_TEMPLATE", "BaseRowDef", "_differs", "ngOnChanges", "changes", "_columnsDiffer", "columns", "currentValue", "find", "create", "diff", "getColumnsDiff", "extractCellTemplate", "column", "CdkHeaderRowDef", "CdkFooterRowDef", "IterableDiffers", "CdkHeaderRowDefBase", "_CdkHeaderRowDefBase", "CdkHeaderRowDef_Factory", "CdkFooterRowDefBase", "_CdkFooterRowDefBase", "CdkFooterRowDef_Factory", "CdkRowDef", "CdkRowDef_Factory", "when", "CdkCellOutlet", "_viewContainer", "mostRecentCellOutlet", "ViewContainerRef", "CdkHeaderRow", "ɵcmp", "decls", "vars", "consts", "CdkHeaderRow_Template", "dependencies", "encapsulation", "Component", "changeDetection", "ChangeDetectionStrategy", "Default", "ViewEncapsulation", "None", "CdkFooterRow", "CdkFooterRow_Template", "CdkRow", "CdkRow_Template", "CdkNoDataRow", "templateRef", "_contentClassName", "STICKY_DIRECTIONS", "StickyStyler", "_isNativeHtmlTable", "_stickCellCss", "direction", "_coalescedStyleScheduler", "_isBrowser", "_needsPositionStickyOnElement", "_positionListener", "_cachedCellWidths", "_borderCellCss", "clearStickyPositioning", "rows", "stickyDirections", "elementsToClear", "row", "ELEMENT_NODE", "i", "children", "element", "_removeStickyStyle", "updateStickyColumns", "stickyStartStates", "stickyEndStates", "recalculateCellWidths", "some", "state", "stickyColumnsUpdated", "sizes", "stickyEndColumnsUpdated", "firstRow", "numCells", "cellWidths", "_getCellWidths", "startPositions", "_getStickyStartColumnPositions", "endPositions", "_getStickyEndColumnPositions", "lastStickyStart", "lastIndexOf", "firstStickyEnd", "indexOf", "isRtl", "start", "end", "_addStickyStyle", "slice", "map", "width", "index", "reverse", "stickRows", "rowsToStick", "stickyStates", "position", "states", "stickyOffsets", "stickyCellHeights", "elementsToStick", "rowIndex", "stickyOffset", "Array", "height", "getBoundingClientRect", "borderedRowIndex", "offset", "isBorderedRowIndex", "stickyHeaderRowsUpdated", "offsets", "elements", "stickyFooterRowsUpdated", "updateStickyFooterContainer", "tableElement", "tfoot", "querySelector", "dir", "style", "remove", "hasDirection", "zIndex", "_getCalculatedZIndex", "dirValue", "isBorderElement", "cssText", "zIndexIncrements", "top", "bottom", "left", "right", "firstRowCells", "widths", "positions", "nextPosition", "getTableUnknownColumnError", "id", "Error", "getTableDuplicateColumnNameError", "getTableMultipleDefaultRowDefsError", "getTableMissingMatchingRowDefError", "data", "JSON", "stringify", "getTableMissingRowDefsError", "getTableUnknownDataSourceError", "getTableTextColumnMissingParentTableError", "getTableTextColumnMissingNameError", "STICKY_POSITIONING_LISTENER", "CdkRecycleRows", "_VIEW_REPEATER_STRATEGY", "useClass", "_RecycleViewRepeaterStrategy", "DataRowOutlet", "viewContainer", "HeaderRowOutlet", "FooterRowOutlet", "NoDataRowOutlet", "CDK_TABLE_TEMPLATE", "CdkTable", "trackBy", "_trackByFn", "fn", "ngDevMode", "console", "warn", "JSON", "stringify", "dataSource", "_dataSource", "_switchDataSource", "multiTemplateDataRows", "_multiTemplateDataRows", "value", "_rowOutlet", "viewContainer", "length", "_forceRenderDataRows", "updateStickyColumnStyles", "fixedLayout", "_fixedLayout", "_forceRecalculateCellWidths", "_stickyColumnStylesNeedReset", "constructor", "_differs", "_changeDetectorRef", "_elementRef", "role", "_dir", "_document", "_platform", "_viewRepeater", "_coalescedStyleScheduler", "_viewportRuler", "_stickyPositioningListener", "_ngZone", "_onDestroy", "Subject", "_columnDefsByName", "Map", "_customColumnDefs", "Set", "_customRowDefs", "_customHeaderRowDefs", "_customFooterRowDefs", "_headerRowDefChanged", "_footerRowDefChanged", "_cachedRenderRowsMap", "stickyCssClass", "needsPositionStickyOnElement", "_isShowingNoDataRow", "contentChanged", "EventEmitter", "viewChange", "BehaviorSubject", "start", "end", "Number", "MAX_VALUE", "nativeElement", "setAttribute", "_isNativeHtmlTable", "nodeName", "ngOnInit", "_setupStickyStyler", "_applyNativeTableSections", "_dataDiffer", "find", "create", "_i", "dataRow", "dataIndex", "data", "change", "pipe", "takeUntil", "subscribe", "ngAfterContentChecked", "_cacheRowDefs", "_cacheColumnDefs", "_headerRowDefs", "_footerRowDefs", "_rowDefs", "getTableMissingRowDefsError", "columnsChanged", "_renderUpdatedColumns", "rowDefsChanged", "_forceRenderHeaderRows", "_forceRenderFooterRows", "_renderChangeSubscription", "_observeRenderChanges", "_checkStickyStates", "ngOnDestroy", "_headerRowOutlet", "_footerRowOutlet", "forEach", "def", "clear", "_defaultRowDef", "next", "complete", "isDataSource", "disconnect", "renderRows", "_renderRows", "_getAllRenderRows", "changes", "diff", "_updateNoDataRow", "applyChanges", "record", "_adjustedPreviousIndex", "currentIndex", "_getEmbeddedViewArgs", "item", "operation", "context", "_renderCellTemplateForItem", "rowDef", "_updateRowIndexContext", "forEachIdentityChange", "rowView", "get", "$implicit", "NgZone", "isInAngularZone", "onStable", "take", "addColumnDef", "columnDef", "add", "removeColumnDef", "delete", "addRowDef", "removeRowDef", "addHeaderRowDef", "headerRowDef", "removeHeaderRowDef", "addFooterRowDef", "footerRowDef", "removeFooterRowDef", "setNoDataRow", "noDataRow", "_customNoDataRow", "updateStickyHeaderRowStyles", "headerRows", "_getRenderedRows", "tableElement", "thead", "querySelector", "style", "display", "stickyStates", "map", "sticky", "_stickyStyler", "clearStickyPositioning", "stickRows", "resetStickyChanged", "updateStickyFooterRowStyles", "footerRows", "tfoot", "updateStickyFooterContainer", "dataRows", "headerRow", "i", "_addStickyColumnStyles", "rows", "push", "footerRow", "Array", "from", "values", "prevCachedRenderRows", "_data", "renderRowsForData", "_getRenderRowsForData", "has", "set", "WeakMap", "j", "renderRow", "cache", "rowDefs", "_getRowDefs", "cachedRenderRows", "shift", "columnDefs", "mergeArrayAndSet", "_getOwnDefs", "_contentColumnDefs", "name", "getTableDuplicateColumnNameError", "_contentHeaderRowDefs", "_contentFooterRowDefs", "_contentRowDefs", "defaultRowDefs", "filter", "when", "getTableMultipleDefaultRowDefsError", "columnsDiffReducer", "acc", "getColumnsDiff", "dataColumnsChanged", "reduce", "headerColumnsChanged", "footerColumnsChanged", "unsubscribe", "dataStream", "connect", "isObservable", "isArray", "of", "undefined", "getTableUnknownDataSourceError", "_renderRow", "columns", "columnName", "getTableUnknownColumnError", "stickyStartStates", "stickyEndStates", "stickyEnd", "updateStickyColumns", "rowOutlet", "renderedRows", "viewRef", "rootNodes", "getTableMissingMatchingRowDefError", "index", "templateRef", "template", "outlet", "view", "createEmbeddedView", "cellTemplate", "_getCellTemplates", "CdkCellOutlet", "mostRecentCellOutlet", "_viewContainer", "markForCheck", "renderIndex", "count", "first", "last", "even", "odd", "columnId", "column", "extractCellTemplate", "documentFragment", "createDocumentFragment", "sections", "tag", "outlets", "_noDataRowOutlet", "section", "element", "createElement", "appendChild", "elementRef", "stickyCheckReducer", "d", "hasStickyChanged", "direction", "StickyStyler", "isBrowser", "items", "_table", "_noDataRow", "shouldShow", "container", "rootNode", "nodeType", "ELEMENT_NODE", "classList", "_contentClassName", "IterableDiffers", "ChangeDetectorRef", "ElementRef", "Directionality", "DOCUMENT", "Platform", "_VIEW_REPEATER_STRATEGY", "_COALESCED_STYLE_SCHEDULER", "ViewportRuler", "STICKY_POSITIONING_LISTENER", "ɵcmp", "selectors", "contentQueries", "CdkTable_ContentQueries", "rf", "ctx", "dirIndex", "CdkNoDataRow", "CdkColumnDef", "CdkRowDef", "CdkHeaderRowDef", "CdkFooterRowDef", "_t", "DataRowOutlet", "HeaderRowOutlet", "FooterRowOutlet", "NoDataRowOutlet", "hostVars", "hostBindings", "CdkTable_HostBindings", "booleanAttribute", "outputs", "exportAs", "features", "provide", "CDK_TABLE", "useExisting", "useClass", "_DisposeViewRepeaterStrategy", "_CoalescedStyleScheduler", "useValue", "dependencies", "styles", "encapsulation", "Component", "args", "selector", "CDK_TABLE_TEMPLATE", "host", "ViewEncapsulation", "None", "changeDetection", "ChangeDetectionStrategy", "Default", "providers", "Attribute", "Optional", "Inject", "SkipSelf", "Input", "transform", "Output", "ViewChild", "static", "ContentChildren", "descendants", "ContentChild", "array", "concat", "CdkTextColumn", "_name", "_syncColumnDefName", "_options", "justify", "headerText", "_createDefaultHeaderText", "dataAccessor", "defaultDataAccessor", "cell", "headerCell", "getTableTextColumnMissingParentTableError", "getTableTextColumnMissingNameError", "defaultHeaderTextTransform", "toUpperCase", "slice", "ɵfac", "CdkTextColumn_Factory", "t", "TEXT_COLUMN_OPTIONS", "viewQuery", "CdkTextColumn_Query", "CdkCellDef", "CdkHeaderCellDef", "CdkCell", "CdkHeaderCell", "EXPORTED_DECLARATIONS", "CdkFooterCellDef", "CdkRow", "CdkFooterCell", "CdkHeaderRow", "CdkFooterRow", "CdkRecycleRows", "CdkTableModule", "ɵmod", "declarations", "imports", "ScrollingModule", "exports", "ɵinj", "NgModule", "_c0", "_c1", "MatTextColumn_th_1_Template", "rf", "ctx", "MatRecycleRows", "selectors", "features", "provide", "_VIEW_REPEATER_STRATEGY", "useClass", "_RecycleViewRepeaterStrategy", "Directive", "args", "selector", "providers", "MatTable", "CdkTable", "constructor", "stickyCssClass", "needsPositionStickyOnElement", "ngOnInit", "_isNativeHtmlTable", "tbody", "_elementRef", "nativeElement", "querySelector", "classList", "add", "t", "ɵcmp", "hostAttrs", "hostVars", "hostBindings", "MatTable_HostBindings", "useExisting", "CDK_TABLE", "_COALESCED_STYLE_SCHEDULER", "_CoalescedStyleScheduler", "_DisposeViewRepeaterStrategy", "STICKY_POSITIONING_LISTENER", "useValue", "DataRowOutlet", "HeaderRowOutlet", "FooterRowOutlet", "NoDataRowOutlet", "styles", "encapsulation", "Component", "exportAs", "template", "host", "ViewEncapsulation", "None", "changeDetection", "ChangeDetectionStrategy", "Default", "MatCellDef", "CdkCellDef", "MatHeaderCellDef", "CdkHeaderCellDef", "MatFooterCellDef", "CdkFooterCellDef", "MatColumnDef", "CdkColumnDef", "name", "_name", "_setNameInput", "_updateColumnCssClassName", "_columnCssClassName", "push", "cssClassFriendlyName", "ɵdir", "inputs", "sticky", "Input", "MatHeaderCell", "CdkHeaderCell", "MatFooterCell", "CdkFooterCell", "MatCell", "CdkCell", "ROW_TEMPLATE", "MatHeaderRowDef", "CdkHeaderRowDef", "columns", "MatFooterRowDef", "CdkFooterRowDef", "MatRowDef", "CdkRowDef", "when", "MatHeaderRow", "CdkHeaderRow", "dependencies", "CdkCellOutlet", "MatFooterRow", "CdkFooterRow", "MatRow", "CdkRow", "MatNoDataRow", "CdkNoDataRow", "_contentClassName", "MatTextColumn", "CdkTextColumn", "EXPORTED_DECLARATIONS", "MatTableModule", "declarations", "imports", "MatCommonModule", "CdkTableModule", "exports", "ɵinj", "NgModule", "MAX_SAFE_INTEGER", "MatTableDataSource", "DataSource", "data", "_data", "value", "Array", "isArray", "next", "_renderChangesSubscription", "_filterData", "filter", "_filter", "sort", "_sort", "_updateChangeSubscription", "paginator", "_paginator", "initialData", "_renderData", "BehaviorSubject", "_internalPageChanges", "Subject", "sortingDataAccessor", "sortHeaderId", "_isNumberValue", "numberValue", "Number", "sortData", "active", "direction", "a", "b", "valueA", "valueB", "valueAType", "valueBType", "comparatorResult", "filterPredicate", "dataStr", "Object", "keys", "reduce", "currentTerm", "key", "toLowerCase", "transformedFilter", "trim", "indexOf", "sortChange", "merge", "initialized", "of", "pageChange", "page", "dataStream", "filteredData", "combineLatest", "pipe", "map", "orderedData", "_orderData", "paginatedData", "_pageData", "unsubscribe", "subscribe", "obj", "_updatePaginator", "length", "slice", "startIndex", "pageIndex", "pageSize", "filteredDataLength", "Promise", "resolve", "then", "lastPageIndex", "Math", "ceil", "newPageIndex", "min", "connect", "disconnect"]
}
